{
  "stats": {
    "suites": 48,
    "tests": 246,
    "passes": 220,
    "pending": 0,
    "failures": 26,
    "start": "2020-09-14T12:25:21.753Z",
    "end": "2020-09-14T12:37:44.328Z",
    "duration": 742575,
    "testsRegistered": 246,
    "passPercent": 89.43089430894308,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a74f943e-a98f-4ec8-b11c-f47ad5aab898",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "83a18a40-fcdc-4d52-a514-184e0da30ff9",
          "title": "Account Creation, Sign and Broadcast for User1",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 \"before each\" hook",
              "timedOut": false,
              "duration": 3000,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
              "err": {},
              "uuid": "ad9ca2bf-cdea-46c1-ab84-a44d6cebec12",
              "parentUUID": "83a18a40-fcdc-4d52-a514-184e0da30ff9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should create an account for: ab8a13d5bf81d56be1b501b0c48c38c5",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 it should create an account for: ab8a13d5bf81d56be1b501b0c48c38c5",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let name = {\nname: name1\n        }\n\n        var err,res = await chai.request(server)\n        .post(config.keysAdd)\n        .send(name)\n    \n        res.should.have.status(200);\n        res.body.should.be.a('object');\n\n        expect(res.body.result.success).to.be.true\n        expect(res.body.result.keyOutput.address).to.not.equal(null)\n        expect(res.body.result.keyOutput.address).to.not.equal('')     \n        \n        names1.address = res.body.result.keyOutput.address",
              "err": {},
              "uuid": "3c004295-00dc-4651-82ca-b7cb269151c3",
              "parentUUID": "83a18a40-fcdc-4d52-a514-184e0da30ff9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ab8a13d5bf81d56be1b501b0c48c38c5 should be able to signTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 ab8a13d5bf81d56be1b501b0c48c38c5 should be able to signTx ",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n\"baseReq\":{\n  \"from\":config.testAccountAddress,\n  \"chain_id\": config.chain_id\n},\n\"type\": \"cosmos-sdk/StdTx\",\n\"value\": {\n  \"msg\": [\n    {\n      \"type\": \"cosmos-sdk/MsgSend\",\n      \"value\": {\n        \"from_address\": config.testAccountAddress,\n        \"to_address\": names1.address,\n        \"amount\": [\n          {\n            \"denom\": \"stake\",\n            \"amount\": \"1000\"\n          }\n        ]\n      }\n    }\n  ],\n  \"fee\": {\n    \"amount\": [],\n    \"gas\": \"200000\"\n  },\n  \"signatures\": null,\n  \"memo\": \"\"\n}\n          }\n\n        var err,res = await chai.request(server)\n        .post(config.signTx)\n        .send(obj)\n\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.result.success).to.be.true\n\n        names1.typekey = res.body.result.tx.signatures[0].pub_key.type\n        names1.value = res.body.result.tx.signatures[0].pub_key.value\n        names1.signature = res.body.result.tx.signatures[0].signature",
              "err": {},
              "uuid": "f6fc93fa-9a98-4a33-8944-9917f915413d",
              "parentUUID": "83a18a40-fcdc-4d52-a514-184e0da30ff9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ab8a13d5bf81d56be1b501b0c48c38c5 should be able to broadcastTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 ab8a13d5bf81d56be1b501b0c48c38c5 should be able to broadcastTx ",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n\"tx\": {\n     \"msg\": [\n         {\n             \"type\": \"cosmos-sdk/MsgSend\",\n             \"value\": {\n                 \"from_address\": config.testAccountAddress,\n                 \"to_address\": names1.address,\n                 \"amount\": [\n                     {\n                         \"denom\": \"stake\",\n                         \"amount\": \"1000\"\n                     }\n                 ]\n             }\n         }\n     ],\n     \"fee\": {\n         \"amount\": [],\n         \"gas\": \"200000\"\n     },\n     \"signatures\": [\n         {\n             \"pub_key\": {\n                 \"type\": names1.typekey,\n                 \"value\": names1.value\n                 },\n             \"signature\": names1.signature\n         }\n       ],\n     \"memo\": \"\"\n },\n         \"mode\": \"sync\"\n     }\n\n     \n        var err,res = await chai.request(server)\n        .post(config.broadcastTx)\n        .send(obj)\n\n   \n    \n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.txhash).to.not.equal(null)\n        expect(res.body.txhash).to.not.equal('')\n\n        var hash = res.body.txhash\n\n        var err,res = await chai.request(server)\n         .get('/txs/'+hash)",
              "err": {},
              "uuid": "962e5451-ac49-4867-a099-928d5bcad145",
              "parentUUID": "83a18a40-fcdc-4d52-a514-184e0da30ff9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c004295-00dc-4651-82ca-b7cb269151c3",
            "f6fc93fa-9a98-4a33-8944-9917f915413d",
            "962e5451-ac49-4867-a099-928d5bcad145"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 231,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3fe5e5c5-8a50-4142-b48b-aa19ddb59c39",
          "title": "Account Creation, Sign and Broadcast for User2",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 \"before each\" hook",
              "timedOut": false,
              "duration": 3004,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
              "err": {},
              "uuid": "bdefc7d9-1d82-4c3d-8df4-597b11ef093d",
              "parentUUID": "3fe5e5c5-8a50-4142-b48b-aa19ddb59c39",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should create an account for: 3a0451e8fe981eefbfbcaf3555279ca7",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 it should create an account for: 3a0451e8fe981eefbfbcaf3555279ca7",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let name = {\nname: name2\n      }\n     \n      var err,res = await chai.request('http://localhost:1317')\n      .post(config.keysAdd)\n      .send(name)\n\n   \n  \n      res.should.have.status(200);\n      res.body.should.be.a('object');\n\n      expect(res.body.result.success).to.be.true\n      expect(res.body.result.keyOutput.address).to.not.equal(null)\n      expect(res.body.result.keyOutput.address).to.not.equal('')\n\n      names2.address = res.body.result.keyOutput.address",
              "err": {},
              "uuid": "e91282b0-a251-4260-9ee4-22462d52c14d",
              "parentUUID": "3fe5e5c5-8a50-4142-b48b-aa19ddb59c39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3a0451e8fe981eefbfbcaf3555279ca7 should be able to signTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 3a0451e8fe981eefbfbcaf3555279ca7 should be able to signTx ",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n        \"baseReq\":{\n\"from\":config.testAccountAddress,\n\"chain_id\": config.chain_id\n        },\n        \"type\": \"cosmos-sdk/StdTx\",\n        \"value\": {\n\"msg\": [\n  {\n    \"type\": \"cosmos-sdk/MsgSend\",\n    \"value\": {\n      \"from_address\": config.testAccountAddress,\n      \"to_address\": names2.address,\n      \"amount\": [\n        {\n          \"denom\": \"stake\",\n          \"amount\": \"1000\"\n        }\n      ]\n    }\n  }\n],\n\"fee\": {\n  \"amount\": [],\n  \"gas\": \"200000\"\n},\n\"signatures\": null,\n\"memo\": \"\"\n        }\n      }\n\n    var err,res = await chai.request(server)\n    .post(config.signTx)\n    .send(obj)\n\n    \n\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.result.success).to.be.true\n\n    names2.typekey = res.body.result.tx.signatures[0].pub_key.type\n    names2.value = res.body.result.tx.signatures[0].pub_key.value\n    names2.signature = res.body.result.tx.signatures[0].signature",
              "err": {},
              "uuid": "66e37175-62a3-4b8e-8b13-b9c78c8955e7",
              "parentUUID": "3fe5e5c5-8a50-4142-b48b-aa19ddb59c39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3a0451e8fe981eefbfbcaf3555279ca7 should be able to broadcastTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 3a0451e8fe981eefbfbcaf3555279ca7 should be able to broadcastTx ",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n\"tx\": {\n     \"msg\": [\n         {\n             \"type\": \"cosmos-sdk/MsgSend\",\n             \"value\": {\n                 \"from_address\": config.testAccountAddress,\n                 \"to_address\": names2.address,\n                 \"amount\": [\n                     {\n                         \"denom\": \"stake\",\n                         \"amount\": \"1000\"\n                     }\n                 ]\n             }\n         }\n     ],\n     \"fee\": {\n         \"amount\": [],\n         \"gas\": \"200000\"\n     },\n     \"signatures\": [\n         {\n             \"pub_key\": {\n                 \"type\": names2.typekey,\n                 \"value\": names2.value\n                 },\n             \"signature\": names2.signature\n         }\n       ],\n     \"memo\": \"\"\n },\n     \"mode\": \"sync\"\n }\n\n \n    var err,res = await chai.request(server)\n    .post(config.broadcastTx)\n    .send(obj)\n\n \n\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.txhash).to.not.equal(null)\n    expect(res.body.txhash).to.not.equal('')\n\n    var hash = res.body.txhash\n\n    var err,res = await chai.request(server)\n     .get('/txs/'+hash)",
              "err": {},
              "uuid": "e6163cd2-ed0a-4cbb-81b1-02ea1a63c83f",
              "parentUUID": "3fe5e5c5-8a50-4142-b48b-aa19ddb59c39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e91282b0-a251-4260-9ee4-22462d52c14d",
            "66e37175-62a3-4b8e-8b13-b9c78c8955e7",
            "e6163cd2-ed0a-4cbb-81b1-02ea1a63c83f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 200,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0c88b259-86ce-4a6b-a97a-0b5ee0103226",
          "title": "Nub Tx",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Nub Tx \"before each\" hook",
              "timedOut": false,
              "duration": 3001,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
              "err": {},
              "uuid": "d0196506-b40b-49f8-8583-ae63195ca1a6",
              "parentUUID": "0c88b259-86ce-4a6b-a97a-0b5ee0103226",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "nubTx: ",
              "fullTitle": "Nub Tx nubTx: ",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n        \"type\": config.nubType,\n         \"value\": {\n  \"baseReq\": {\n    \"from\": config.testAccountAddress,\n    \"chain_id\": config.chain_id\n  },\n  \"nubID\":config.nubID\n}\n        }\n        \n     \n      var err,res = await chai.request(server)\n      .post(config.nubPath)\n      .send(obj)\n  \n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n\n      txHash = res.body.txhash",
              "err": {},
              "uuid": "eaefda7c-26ae-4a74-9fbf-acbf93dfa3ee",
              "parentUUID": "0c88b259-86ce-4a6b-a97a-0b5ee0103226",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Query nubTx: ",
              "fullTitle": "Nub Tx Query nubTx: ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n      console.log(\"came inside\")\n      var err,res = await chai.request(server)\n     .get('/txs/'+txHash) \n     var data1 = res.body    \n      if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n        console.log(\"RETRY\")\n        callbackretry('failed')\n      }else{\n        console.log(\"NO RETRY\")\n        callbackretry(null, 'true ')\n      }\n    }, function(err, response){\n      if(err){\n        console.log(\"err: \" + err)\n        console.log(\"response: \" + response)\n        console.log(\"failed to send txHash query\")\n      }else{\n        console.log(\"send txHash query successfull\")\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error') \n      }\n    })\n    console.log(\"txHash: \" + txHash)",
              "err": {},
              "uuid": "581c9f6c-b7cf-4c30-9d2e-0d0b224c5678",
              "parentUUID": "0c88b259-86ce-4a6b-a97a-0b5ee0103226",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eaefda7c-26ae-4a74-9fbf-acbf93dfa3ee",
            "581c9f6c-b7cf-4c30-9d2e-0d0b224c5678"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 61,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bfd12380-9976-4c82-8a21-47fa4f7343fe",
          "title": "Identity",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0f75fc3c-eeba-444d-a942-b8c636fb077d",
              "title": "Issue Identity 1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "73b3a552-fb25-4492-98ce-61c0f485b479",
                  "parentUUID": "0f75fc3c-eeba-444d-a942-b8c636fb077d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Query Identity: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "73ee992e-e69c-46ff-bc1b-7de7031f5747",
                  "parentUUID": "0f75fc3c-eeba-444d-a942-b8c636fb077d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Define Identity: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineIdentityType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"mutableTraits1:S|num1\" + num,\n         \"immutableTraits\":\"immutableTraits1:S|\",\n         \"mutableMetaTraits\": \"mutableMetaTraits1:S|num3\" + num,\n         \"immutableMetaTraits\": \"immutableMetaTraits1:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineIdentityPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a59a30eb-8975-4c81-b391-4db9c3541d65",
                  "parentUUID": "0f75fc3c-eeba-444d-a942-b8c636fb077d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 1 Query Tx: ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "f7926f91-93b8-4ac2-9101-e3681ecc89d5",
                  "parentUUID": "0f75fc3c-eeba-444d-a942-b8c636fb077d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 1 Query Classification: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }\n\n      });",
                  "err": {},
                  "uuid": "73a3eb24-ddcf-45ce-9b62-f91239e0c3b9",
                  "parentUUID": "0f75fc3c-eeba-444d-a942-b8c636fb077d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Issue Identity: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.issuedentityType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"to\": config.testAccountAddress,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"mutableTraits1:S|num1\" + num,\n       \"immutableProperties\": \"immutableTraits1:S|\",\n       \"mutableMetaProperties\": \"mutableMetaTraits1:S|num3\" + num,\n       \"immutableMetaProperties\": \"immutableMetaTraits1:S|num4\" + num    \n     }\n   }   \n   \n  \n var err,res = await chai.request(server)\n .post(config.issueIdentityPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "ff41b93c-723a-4036-9503-690d1ceaddc5",
                  "parentUUID": "0f75fc3c-eeba-444d-a942-b8c636fb077d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 1 Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "82e9200c-f66e-45d5-a9a3-5daab2510ccd",
                  "parentUUID": "0f75fc3c-eeba-444d-a942-b8c636fb077d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73ee992e-e69c-46ff-bc1b-7de7031f5747",
                "a59a30eb-8975-4c81-b391-4db9c3541d65",
                "f7926f91-93b8-4ac2-9101-e3681ecc89d5",
                "73a3eb24-ddcf-45ce-9b62-f91239e0c3b9",
                "ff41b93c-723a-4036-9503-690d1ceaddc5",
                "82e9200c-f66e-45d5-a9a3-5daab2510ccd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1dc4844-d709-4e84-958f-5c689a59c97b",
              "title": "Provision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "5747a3db-e1bb-4ffe-bf28-1eb3a7fd741a",
                  "parentUUID": "f1dc4844-d709-4e84-958f-5c689a59c97b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Provision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "683a5a85-2a55-4425-841e-a49f0e75b6ea",
                  "parentUUID": "f1dc4844-d709-4e84-958f-5c689a59c97b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Provision Key: ",
                  "fullTitle": "Identity Provision Key Provision Key: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.provisionKeyType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"to\": names1.address,\n         \"identityID\":data.clasificationID + '|' + data.hashID\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.provisionKeyPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "16283f84-843d-4f6b-b60e-7c8229901687",
                  "parentUUID": "f1dc4844-d709-4e84-958f-5c689a59c97b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Provision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "17ad7501-fd22-48c8-8aa0-7dedcc0afaef",
                  "parentUUID": "f1dc4844-d709-4e84-958f-5c689a59c97b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "683a5a85-2a55-4425-841e-a49f0e75b6ea",
                "16283f84-843d-4f6b-b60e-7c8229901687",
                "17ad7501-fd22-48c8-8aa0-7dedcc0afaef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "410d14a9-84ff-4ada-947a-0fa3e89c75bf",
              "title": "Unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "6a9a1d81-5da6-422d-9d33-7fc5c427a1d4",
                  "parentUUID": "410d14a9-84ff-4ada-947a-0fa3e89c75bf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Unprovision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "8e26d4a1-80ac-422d-8121-fc1cff0e1b72",
                  "parentUUID": "410d14a9-84ff-4ada-947a-0fa3e89c75bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Unprovision Key: ",
                  "fullTitle": "Identity Unprovision Key Unprovision Key: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.unprovisionKeyType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"to\": names1.address,\n         \"identityID\":data.clasificationID + '|' + data.hashID\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.unprovisionKeyPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "7da3294a-96f3-47e8-b204-6ffe81ca6e8e",
                  "parentUUID": "410d14a9-84ff-4ada-947a-0fa3e89c75bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Unprovision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "8e3e2b57-9456-4077-84c4-d0fbd1ca50b8",
                  "parentUUID": "410d14a9-84ff-4ada-947a-0fa3e89c75bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e26d4a1-80ac-422d-8121-fc1cff0e1b72",
                "7da3294a-96f3-47e8-b204-6ffe81ca6e8e",
                "8e3e2b57-9456-4077-84c4-d0fbd1ca50b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00fa2477-dd53-4506-ab2e-997a722378dc",
              "title": "Provision an unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision an unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "b2fd0541-38c8-4cae-b9bd-1d8e89fc55d7",
                  "parentUUID": "00fa2477-dd53-4506-ab2e-997a722378dc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Provision an unprovision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "f679011d-3d5e-4b5e-87e9-a48208e573a8",
                  "parentUUID": "00fa2477-dd53-4506-ab2e-997a722378dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Provision an unprovision Key: ",
                  "fullTitle": "Identity Provision an unprovision Key Provision an unprovision Key: ",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.provisionKeyType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"to\": names1.address,\n         \"identityID\":data.clasificationID + '|' + data.hashID\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.provisionKeyPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "81e2399d-5923-4572-8db8-a73da9748de4",
                  "parentUUID": "00fa2477-dd53-4506-ab2e-997a722378dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Provision an unprovision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "62f36266-459d-4a79-a556-9d3240f0bc58",
                  "parentUUID": "00fa2477-dd53-4506-ab2e-997a722378dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f679011d-3d5e-4b5e-87e9-a48208e573a8",
                "81e2399d-5923-4572-8db8-a73da9748de4",
                "62f36266-459d-4a79-a556-9d3240f0bc58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63862651-8d5d-41cd-adbf-e52cc93480bd",
              "title": "Issue Identity 2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "5ecf0d51-fb5d-4b00-82aa-9c64416b5c8c",
                  "parentUUID": "63862651-8d5d-41cd-adbf-e52cc93480bd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "08c737e2-bb70-4796-8b8e-8e1a2df75871",
                  "parentUUID": "63862651-8d5d-41cd-adbf-e52cc93480bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Define Identity: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineIdentityType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"mutableTraits2:S|num1\" + num,\n         \"immutableTraits\":\"immutableTraits2:S|\",\n         \"mutableMetaTraits\": \"mutableMetaTraits2:S|num3\" + num,\n         \"immutableMetaTraits\": \"immutableMetaTraits2:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineIdentityPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "5299c103-5f4a-4aac-8237-aa31062e43b7",
                  "parentUUID": "63862651-8d5d-41cd-adbf-e52cc93480bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 2 Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "fa55127d-8e7f-4da9-aff3-0f4db7867ff1",
                  "parentUUID": "63862651-8d5d-41cd-adbf-e52cc93480bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 2 Query Classification: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }\n\n      });",
                  "err": {},
                  "uuid": "0022983d-e95a-46d5-aeba-2bca34121aaa",
                  "parentUUID": "63862651-8d5d-41cd-adbf-e52cc93480bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 2: ",
                  "fullTitle": "Identity Issue Identity 2 Issue Identity 2: ",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.issuedentityType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"to\": config.testAccountAddress,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"mutableTraits2:S|num1\" + num,\n       \"immutableProperties\": \"immutableTraits2:S|\",\n       \"mutableMetaProperties\": \"mutableMetaTraits2:S|num3\" + num,\n       \"immutableMetaProperties\": \"immutableMetaTraits2:S|num4\" + num    \n     }\n   }   \n   \n  \n var err,res = await chai.request(server)\n .post(config.issueIdentityPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "cb882d4c-d480-413a-a626-1e92e02e017e",
                  "parentUUID": "63862651-8d5d-41cd-adbf-e52cc93480bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 2 Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "873dc178-8020-4692-bb1f-bd9e9fb0157b",
                  "parentUUID": "63862651-8d5d-41cd-adbf-e52cc93480bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08c737e2-bb70-4796-8b8e-8e1a2df75871",
                "5299c103-5f4a-4aac-8237-aa31062e43b7",
                "fa55127d-8e7f-4da9-aff3-0f4db7867ff1",
                "0022983d-e95a-46d5-aeba-2bca34121aaa",
                "cb882d4c-d480-413a-a626-1e92e02e017e",
                "873dc178-8020-4692-bb1f-bd9e9fb0157b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 98,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50d8534d-f02f-4677-b473-9404b62b5d3c",
              "title": "Issue Identity 3",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 3 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "06ef8a52-7f75-40bb-9d14-d32090138059",
                  "parentUUID": "50d8534d-f02f-4677-b473-9404b62b5d3c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "165836ed-604d-4f40-a4dd-cb3b65273a92",
                  "parentUUID": "50d8534d-f02f-4677-b473-9404b62b5d3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Define Identity: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineIdentityType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"mutableTraits3:S|num1\" + num,\n         \"immutableTraits\":\"immutableTraits3:S|\",\n         \"mutableMetaTraits\": \"mutableMetaTraits3:S|num3\" + num,\n         \"immutableMetaTraits\": \"immutableMetaTraits3:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineIdentityPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "2512269d-03b4-485d-bccf-81c5116b409f",
                  "parentUUID": "50d8534d-f02f-4677-b473-9404b62b5d3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 3 Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "7d848d75-f451-4c48-9476-c1678873886b",
                  "parentUUID": "50d8534d-f02f-4677-b473-9404b62b5d3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 3 Query Classification: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }\n\n      });",
                  "err": {},
                  "uuid": "db1321b3-2e83-4504-977e-ee317a61dfd8",
                  "parentUUID": "50d8534d-f02f-4677-b473-9404b62b5d3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 3: ",
                  "fullTitle": "Identity Issue Identity 3 Issue Identity 3: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.issuedentityType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"to\": config.testAccountAddress,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"mutableTraits3:S|num1\" + num,\n       \"immutableProperties\": \"immutableTraits3:S|\",\n       \"mutableMetaProperties\": \"mutableMetaTraits3:S|num3\" + num,\n       \"immutableMetaProperties\": \"immutableMetaTraits3:S|num4\" + num    \n     }\n   }   \n   \n  \n var err,res = await chai.request(server)\n .post(config.issueIdentityPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f77d4dc5-a459-4c0f-8ed4-8623ac82dd9b",
                  "parentUUID": "50d8534d-f02f-4677-b473-9404b62b5d3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 3 Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "88ae88c4-281c-4b33-bb2e-058572ad21c7",
                  "parentUUID": "50d8534d-f02f-4677-b473-9404b62b5d3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "165836ed-604d-4f40-a4dd-cb3b65273a92",
                "2512269d-03b4-485d-bccf-81c5116b409f",
                "7d848d75-f451-4c48-9476-c1678873886b",
                "db1321b3-2e83-4504-977e-ee317a61dfd8",
                "f77d4dc5-a459-4c0f-8ed4-8623ac82dd9b",
                "88ae88c4-281c-4b33-bb2e-058572ad21c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9ded73b8-b5a5-4f78-be89-3c97898fbf4a",
          "title": "Assets",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e7ba6d87-07b6-4e94-9761-ad0b2390c7ab",
              "title": "Mint Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "0d30289a-e03a-4d5b-96f3-551680c8527a",
                  "parentUUID": "e7ba6d87-07b6-4e94-9761-ad0b2390c7ab",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "f7dffab7-5d27-4503-a852-c46c57bd3ea7",
                  "parentUUID": "e7ba6d87-07b6-4e94-9761-ad0b2390c7ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSET1:S|num1\" + num + \",burn:H|1\",\n         \"immutableTraits\":\"ASSET2:S|\",\n         \"mutableMetaTraits\": \"ASSET3:S|num3\" + num,\n         \"immutableMetaTraits\": \"ASSET4:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "8a7630be-1d43-44c1-a061-d2814aca29a3",
                  "parentUUID": "e7ba6d87-07b6-4e94-9761-ad0b2390c7ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "44c59099-07bb-4174-aa72-c4008883a5ea",
                  "parentUUID": "e7ba6d87-07b6-4e94-9761-ad0b2390c7ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "bdc0b804-da2e-432a-9d29-0dcc301ab7a0",
                  "parentUUID": "e7ba6d87-07b6-4e94-9761-ad0b2390c7ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"ASSET1:S|num1\" + num + \",burn:H|1\",\n       \"immutableProperties\": \"ASSET2:S|num2\" + num,\n       \"mutableMetaProperties\": \"ASSET3:S|num3\" + num,\n       \"immutableMetaProperties\": \"ASSET4:S|num4\" + num\n   \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "8f6f93ce-75f6-48bc-8288-4bd0ac6fd30f",
                  "parentUUID": "e7ba6d87-07b6-4e94-9761-ad0b2390c7ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "dd7ac3e7-a254-4e16-850d-0c08a9c6fb12",
                  "parentUUID": "e7ba6d87-07b6-4e94-9761-ad0b2390c7ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7dffab7-5d27-4503-a852-c46c57bd3ea7",
                "8a7630be-1d43-44c1-a061-d2814aca29a3",
                "44c59099-07bb-4174-aa72-c4008883a5ea",
                "bdc0b804-da2e-432a-9d29-0dcc301ab7a0",
                "8f6f93ce-75f6-48bc-8288-4bd0ac6fd30f",
                "dd7ac3e7-a254-4e16-850d-0c08a9c6fb12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b18a9880-5187-41e1-a83d-51958d8b9584",
              "title": "Mutate Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "b52c8ba1-0420-48d9-9819-40bcec4e4aca",
                  "parentUUID": "b18a9880-5187-41e1-a83d-51958d8b9584",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "2e880066-bd5e-4c26-bd08-2da9a554fd4c",
                  "parentUUID": "b18a9880-5187-41e1-a83d-51958d8b9584",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate Asset Query Asset: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "76ac0d44-b2f9-4e73-830a-e7f5855f6479",
                  "parentUUID": "b18a9880-5187-41e1-a83d-51958d8b9584",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mutate Asset Mutate Asset: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mutateAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID,\n       \"mutableProperties\":\"ASSET1:S|\",\n       \"mutableMetaProperties\": \"ASSET3:S|num3\" + num\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.mutateAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b2d021e3-4d79-4d2d-961a-60d1ef3cb2bf",
                  "parentUUID": "b18a9880-5187-41e1-a83d-51958d8b9584",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "eac5bf78-7c7f-4d1d-a338-79625fed7c37",
                  "parentUUID": "b18a9880-5187-41e1-a83d-51958d8b9584",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e880066-bd5e-4c26-bd08-2da9a554fd4c",
                "76ac0d44-b2f9-4e73-830a-e7f5855f6479",
                "b2d021e3-4d79-4d2d-961a-60d1ef3cb2bf",
                "eac5bf78-7c7f-4d1d-a338-79625fed7c37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e968d8ce-68cf-4574-9f6c-9ce300186009",
              "title": "Mint Asset with meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "a84eb1ff-3a7c-4bad-bd45-7b0ecdaa9dff",
                  "parentUUID": "e968d8ce-68cf-4574-9f6c-9ce300186009",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Identity: ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "1947b285-dd6c-4dda-9fe3-57e776bee983",
                  "parentUUID": "e968d8ce-68cf-4574-9f6c-9ce300186009",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "288c7179-c3c1-44d5-8e84-1bf2af4b6729",
                  "parentUUID": "e968d8ce-68cf-4574-9f6c-9ce300186009",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset with meta properties: ",
                  "fullTitle": "Assets Mint Asset with meta properties Mint Asset with meta properties: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"ASSET1:S|num5\" + num + \",burn:H|1\",\n       \"immutableProperties\": \"ASSET2:S|num6\" + num,\n       \"mutableMetaProperties\": \"ASSET3:S|num7\" + num,\n       \"immutableMetaProperties\": \"ASSET4:S|num8\" + num\n   \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6c28264a-db7a-4b9d-822a-e2f5ab519575",
                  "parentUUID": "e968d8ce-68cf-4574-9f6c-9ce300186009",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "c8fb4c12-4e70-4551-b2c3-4da18d3310f7",
                  "parentUUID": "e968d8ce-68cf-4574-9f6c-9ce300186009",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1947b285-dd6c-4dda-9fe3-57e776bee983",
                "288c7179-c3c1-44d5-8e84-1bf2af4b6729",
                "6c28264a-db7a-4b9d-822a-e2f5ab519575",
                "c8fb4c12-4e70-4551-b2c3-4da18d3310f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "556fbbbd-42ff-41d3-bf29-a43e98484953",
              "title": "Mutate asset non meta properteies to meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "b6b8e002-fd2f-475b-8478-a3465ac18076",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "ed5f5c40-8899-4315-89f0-2a3357abfb54",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Define Asset: ",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSETS1:S|num1\" + num + \",burn:H|1\",\n         \"immutableTraits\":\"ASSETS2:S|\",\n         \"mutableMetaTraits\": \"ASSETS3:S|num3\" + num,\n         \"immutableMetaTraits\": \"ASSETS4:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0741fea9-3c3a-49a2-9d75-33949a0847d1",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "7f0c24e3-70c0-433d-9a57-412dfe5d7578",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "99330774-2970-45fb-993d-c06edb7ff9e5",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mintAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"toID\": data.clasificationID + '|' + data.hashID,\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"mutableProperties\": \"ASSETS1:S|num5\" + \",burn:H|1\",\n         \"immutableProperties\": \"ASSETS2:S|num6\" + num,\n         \"mutableMetaProperties\": \"ASSETS3:S|num7\" + num,\n         \"immutableMetaProperties\": \"ASSETS4:S|num8\" + num\n     \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.mintAssetPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f12d0ab6-3b94-4e99-bb55-cc7e44f7e680",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "2a973111-8e73-4cc6-bb23-ed219942ea72",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Asset: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "d31b92a0-eb0b-4fae-b24a-fa321f406275",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n   \"type\": config.metaRevealType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"metaFact\": \"S|num5\"\n     }\n   }\n    \n var err,res = await chai.request(server)\n .post(config.metaRevealPath)\n .send(obj)\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "c99a0824-ffa1-4a7c-b41f-6cae1dca0d40",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset non meta properties to meta properties: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Mutate Asset non meta properties to meta properties: ",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mutateAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID,\n       \"mutableProperties\":\"ASSETS1:S|\",\n       \"mutableMetaProperties\": \"ASSETS3:S|num3\" + num\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.mutateAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "835ac2e2-7e66-4a1e-a90e-c0a73799a9a7",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "83d3274d-e6f0-449f-bc29-fb39fa03422b",
                  "parentUUID": "556fbbbd-42ff-41d3-bf29-a43e98484953",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed5f5c40-8899-4315-89f0-2a3357abfb54",
                "0741fea9-3c3a-49a2-9d75-33949a0847d1",
                "7f0c24e3-70c0-433d-9a57-412dfe5d7578",
                "99330774-2970-45fb-993d-c06edb7ff9e5",
                "f12d0ab6-3b94-4e99-bb55-cc7e44f7e680",
                "2a973111-8e73-4cc6-bb23-ed219942ea72",
                "d31b92a0-eb0b-4fae-b24a-fa321f406275",
                "c99a0824-ffa1-4a7c-b41f-6cae1dca0d40",
                "835ac2e2-7e66-4a1e-a90e-c0a73799a9a7",
                "83d3274d-e6f0-449f-bc29-fb39fa03422b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 198,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3448bac4-a96d-44ef-9bd4-2ef3176ebf1b",
              "title": "Mint Asset with 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "38180cab-25d7-4846-b699-c2eee2c6b78d",
                  "parentUUID": "3448bac4-a96d-44ef-9bd4-2ef3176ebf1b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "f29480ab-e64d-42bc-b7dc-eee4f052f585",
                  "parentUUID": "3448bac4-a96d-44ef-9bd4-2ef3176ebf1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n         \"immutableTraits\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n         \"mutableMetaTraits\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n         \"immutableMetaTraits\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "94fad51d-7d6a-4511-bde0-ebb3b629f08f",
                  "parentUUID": "3448bac4-a96d-44ef-9bd4-2ef3176ebf1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "5cd6e9e7-8fe5-48fd-b6e0-bf2863dbf22e",
                  "parentUUID": "3448bac4-a96d-44ef-9bd4-2ef3176ebf1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Classification: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETP4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "37582f04-a086-423f-b50b-66c16946853c",
                  "parentUUID": "3448bac4-a96d-44ef-9bd4-2ef3176ebf1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n       \"immutableProperties\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n       \"mutableMetaProperties\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n       \"immutableMetaProperties\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n   \n     }\n   }\n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0fa8b0e3-a937-4352-8022-2a16a14e5aca",
                  "parentUUID": "3448bac4-a96d-44ef-9bd4-2ef3176ebf1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "ccf792cb-2da1-429b-8f93-e68e6abb9fc7",
                  "parentUUID": "3448bac4-a96d-44ef-9bd4-2ef3176ebf1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f29480ab-e64d-42bc-b7dc-eee4f052f585",
                "94fad51d-7d6a-4511-bde0-ebb3b629f08f",
                "5cd6e9e7-8fe5-48fd-b6e0-bf2863dbf22e",
                "37582f04-a086-423f-b50b-66c16946853c",
                "0fa8b0e3-a937-4352-8022-2a16a14e5aca",
                "ccf792cb-2da1-429b-8f93-e68e6abb9fc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 113,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
              "title": "Add asset properties on mutation",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Add asset properties on mutation \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "31e1b23f-16e4-4552-971f-10b006600281",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "da3b274e-cb28-4eba-bf92-1ff312331aac",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Define Asset: ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSET_A5:S|, burn:H|1\",\n         \"immutableTraits\": \"ASSET_A6:S|\",\n         \"mutableMetaTraits\": \"ASSET_A7:S|\",\n         \"immutableMetaTraits\": \"ASSET_A8:S|\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "91f4b5f4-f4cf-412e-a8f0-749500431ca8",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "3ad30674-e52d-4edb-8f54-db966d5d9111",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "0519efa5-3d94-4b16-a2ff-f622554ff40e",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Mint Asset: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mintAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"toID\": data.clasificationID + '|' + data.hashID,\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"mutableProperties\": \"ASSET_A5:S|A, burn:H|1\",\n         \"immutableProperties\": \"ASSET_A6:S|B\",\n         \"mutableMetaProperties\": \"ASSET_A7:S|C\",\n         \"immutableMetaProperties\": \"ASSET_A8:S|D\"\n     \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.mintAssetPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "7d89ad56-3edf-458a-917f-6bcaa593f260",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "cb621866-a9a7-4f83-a2f5-21f2576649bf",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Asset: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "74feee8d-7c9a-431a-aa16-5cbbd6b73053",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add asset properties on mutation: ",
                  "fullTitle": "Assets Add asset properties on mutation Add asset properties on mutation: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mutateAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID,\n       \"mutableProperties\": \"ASSET_A5:S|A\",\n       \"mutableMetaProperties\": \"ASSET_A7:S|C\"\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.mutateAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "84d81d1b-2c60-4db7-8a43-615b3b37fb27",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "0511fb00-b731-4d81-ba6a-6e427419a499",
                  "parentUUID": "3207a075-3104-4523-a6a1-e2ef21fb3d75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da3b274e-cb28-4eba-bf92-1ff312331aac",
                "91f4b5f4-f4cf-412e-a8f0-749500431ca8",
                "3ad30674-e52d-4edb-8f54-db966d5d9111",
                "0519efa5-3d94-4b16-a2ff-f622554ff40e",
                "7d89ad56-3edf-458a-917f-6bcaa593f260",
                "cb621866-a9a7-4f83-a2f5-21f2576649bf",
                "74feee8d-7c9a-431a-aa16-5cbbd6b73053",
                "84d81d1b-2c60-4db7-8a43-615b3b37fb27",
                "0511fb00-b731-4d81-ba6a-6e427419a499"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 139,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a42c79c-e723-454c-826f-a8ec1c427ba9",
              "title": "Mint Asset with more than 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with more than 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "427f355c-09d4-47eb-bd62-415ca6b76e21",
                  "parentUUID": "1a42c79c-e723-454c-826f-a8ec1c427ba9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "b91b4bc7-409b-4576-8d94-36902310fa6f",
                  "parentUUID": "1a42c79c-e723-454c-826f-a8ec1c427ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n         \"immutableTraits\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n         \"mutableMetaTraits\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n         \"immutableMetaTraits\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "9b317363-bbaf-4e78-904a-cc8aa00e28fb",
                  "parentUUID": "1a42c79c-e723-454c-826f-a8ec1c427ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "ebcd7376-e0de-4e28-824c-927eb136bace",
                  "parentUUID": "1a42c79c-e723-454c-826f-a8ec1c427ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Classification: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"P4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "dd80738a-ed70-4376-aa78-e13005631cb5",
                  "parentUUID": "1a42c79c-e723-454c-826f-a8ec1c427ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset with more than 22 properties: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Mint Asset with more than 22 properties: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n       \"immutableProperties\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n       \"mutableMetaProperties\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n       \"immutableMetaProperties\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n   \n     }\n   }\n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "5dfb786e-cb1b-4ed3-855c-64bba7ec4498",
                  "parentUUID": "1a42c79c-e723-454c-826f-a8ec1c427ba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "0338dd5e-517d-4202-8c74-f0d9d9eb1314",
                  "parentUUID": "1a42c79c-e723-454c-826f-a8ec1c427ba9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b91b4bc7-409b-4576-8d94-36902310fa6f",
                "9b317363-bbaf-4e78-904a-cc8aa00e28fb",
                "ebcd7376-e0de-4e28-824c-927eb136bace",
                "dd80738a-ed70-4376-aa78-e13005631cb5",
                "5dfb786e-cb1b-4ed3-855c-64bba7ec4498",
                "0338dd5e-517d-4202-8c74-f0d9d9eb1314"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b45d16e-36c1-4f01-9850-4a77a7d83d41",
              "title": "Mutate Asset to add more that 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "bed3c3c9-bc5a-481c-9f65-acccfeb094c0",
                  "parentUUID": "9b45d16e-36c1-4f01-9850-4a77a7d83d41",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "af4ec27b-a2d1-40b7-8974-9e82625685f8",
                  "parentUUID": "9b45d16e-36c1-4f01-9850-4a77a7d83d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "db340a10-875d-4647-989e-97be75e3adac",
                  "parentUUID": "9b45d16e-36c1-4f01-9850-4a77a7d83d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset to add more that 22 properties: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Mutate Asset to add more that 22 properties: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mutateAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID,\n       \"mutableProperties\": \"ASSET_A5:S|A,ASSET_A5:S|B,ASSET_A5:S|C,ASSET_A5:S|D,ASSET_A5:S|E,ASSET_A5:S|F,ASSET_A5:S|G,ASSET_A5:S|H,ASSET_A5:S|I,ASSET_A5:S|J,ASSET_A5:S|K,ASSET_A5:S|L,ASSET_A5:S|M,ASSET_A5:S|N\",\n       \"mutableMetaProperties\": \"ASSET_A7:S|O,ASSET_A7:S|P,ASSET_A7:S|Q,ASSET_A7:S|R,ASSET_A7:S|S,ASSET_A7:S|T,ASSET_A7:S|U,ASSET_A7:S|V,ASSET_A7:S|W\"\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.mutateAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f9c02de0-03ed-4801-adc4-2f1290ced2b6",
                  "parentUUID": "9b45d16e-36c1-4f01-9850-4a77a7d83d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "975e7cc8-9a73-4faa-a2f4-24c1f6a6e3b1",
                  "parentUUID": "9b45d16e-36c1-4f01-9850-4a77a7d83d41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af4ec27b-a2d1-40b7-8974-9e82625685f8",
                "db340a10-875d-4647-989e-97be75e3adac",
                "f9c02de0-03ed-4801-adc4-2f1290ced2b6",
                "975e7cc8-9a73-4faa-a2f4-24c1f6a6e3b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55496f0d-9beb-49fd-80c2-2cb4264d6a0e",
              "title": "Burn Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Burn Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "1abdf8f5-0708-4128-b6f5-0b1e33884cc0",
                  "parentUUID": "55496f0d-9beb-49fd-80c2-2cb4264d6a0e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Burn Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "b5097561-5f24-4061-b5a5-5fb038361b55",
                  "parentUUID": "55496f0d-9beb-49fd-80c2-2cb4264d6a0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Burn Asset Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_P4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "686ffec0-34e0-46a9-bd1b-5c4050d02366",
                  "parentUUID": "55496f0d-9beb-49fd-80c2-2cb4264d6a0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Burn Asset Meta Reveal: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n   \"type\": config.metaRevealType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"metaFact\": \"H|1\"\n     }\n   }\n    \n var err,res = await chai.request(server)\n .post(config.metaRevealPath)\n .send(obj)\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "05bc63df-1dcd-4fa0-8849-81320bc783eb",
                  "parentUUID": "55496f0d-9beb-49fd-80c2-2cb4264d6a0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Burn Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n.get('/txs/'+txHash) \nvar data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "27855977-1c96-4f87-83a3-35924cbfa001",
                  "parentUUID": "55496f0d-9beb-49fd-80c2-2cb4264d6a0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Burn Asset Burn Asset",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.burnAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.burnAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a46fe361-bbe5-4743-8693-cd41f15d2119",
                  "parentUUID": "55496f0d-9beb-49fd-80c2-2cb4264d6a0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Burn Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "c60415ef-30e8-4f31-a692-356e3acfbd6f",
                  "parentUUID": "55496f0d-9beb-49fd-80c2-2cb4264d6a0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5097561-5f24-4061-b5a5-5fb038361b55",
                "686ffec0-34e0-46a9-bd1b-5c4050d02366",
                "05bc63df-1dcd-4fa0-8849-81320bc783eb",
                "27855977-1c96-4f87-83a3-35924cbfa001",
                "a46fe361-bbe5-4743-8693-cd41f15d2119",
                "c60415ef-30e8-4f31-a692-356e3acfbd6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 110,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
              "title": "Mint Asset with burn greater than forseeable block height",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "6ab249e2-4ecb-4843-ad93-92b1a164bfd0",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "5c255ca7-e768-4091-8b3c-ca4f3734eaa2",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Define Asset: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID + '|' + data.ihashID,\n         \"mutableTraits\":\"AssetA:S|num1\" + num + \",burn:H|1\",\n         \"immutableTraits\":\"AssetB:S|\",\n         \"mutableMetaTraits\": \"AssetC:S|num3\" + num,\n         \"immutableMetaTraits\": \"AssetD:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "58dbd519-741c-4454-94ef-e0540f51c9d5",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "4ed6cd93-1b81-4e39-9bad-36d27df208cc",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Classification: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "461bfec3-4a94-4647-84a4-29d85f0a672b",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mint Asset: ",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.iclasificationID + '|' + data.ihashID,\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"AssetA:S|num1\" + num + \",burn:H|100000000\",\n       \"immutableProperties\": \"AssetB:S|num2\" + num,\n       \"mutableMetaProperties\": \"AssetC:S|num3\" + num,\n       \"immutableMetaProperties\": \"AssetD:S|num4\" + num\n   \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "d0f6afa7-4f49-4e6c-aac9-51f1e23b008a",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "56110836-8c86-4a03-b018-33d32aa2ac42",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Asset: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "25f4b833-cf93-4a9c-9564-44ca539adf39",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"H|100000000\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "ae83d1ad-238a-4f17-8fb9-1e3c70b5417a",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "0e7c0f04-6807-4cf2-b8ef-527d5e5d5308",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.burnAssetType,\n       \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID + '|' + data.ihashID,\n         \"assetID\": data.aclasificationID + '|' + data.ahashID\n       }\n     }\n     \n     \n   var err,res = await chai.request(server)\n   .post(config.burnAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "c504814b-ec03-4b34-be81-f3f9c168bf97",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "a4105ab8-4eeb-49b0-9529-dd20069f94ed",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"H|100\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "29471776-7ced-445f-a949-7389866bb1d8",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "87e6739a-a514-47ad-87d1-2dd854aabe6a",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mutate Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mutateAssetType,\n       \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID + '|' + data.ihashID,\n         \"assetID\": data.aclasificationID + '|' + data.ahashID,\n         \"mutableProperties\":\"AssetA:S|ABCd,burn:H|100\",\n         \"mutableMetaProperties\": \"AssetC:S|num3\" + num\n       }\n     }\n     \n     \n   var err,res = await chai.request(server)\n   .post(config.mutateAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "df7a8f09-5f97-4041-94ae-29ffe05399ee",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "95116505-fdcf-44c1-8261-016b3557494c",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n     \n     let obj = {\n       \"type\": config.burnAssetType,\n         \"value\": {\n           \"baseReq\": {\n             \"from\": config.testAccountAddress,\n             \"chain_id\": config.chain_id\n           },\n           \"fromID\": data.iclasificationID + '|' + data.ihashID,\n           \"assetID\": data.aclasificationID + '|' + data.ahashID\n         }\n       }\n       \n       \n     var err,res = await chai.request(server)\n     .post(config.burnAssetPath)\n     .send(obj)\n \n     res.should.have.status(200);\n     res.body.should.be.a('object');\n     expect(res.body.txhash).to.not.equal(null)\n     expect(res.body.txhash).to.not.equal('')\n \n     txHash = res.body.txhash",
                  "err": {},
                  "uuid": "24113ce8-f523-4e0a-a3db-711625f6c30c",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "0a62e4fb-8a09-4390-b424-2ad0ac150d38",
                  "parentUUID": "bce677f4-f88e-4f59-8e03-e44db5fe6e59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c255ca7-e768-4091-8b3c-ca4f3734eaa2",
                "58dbd519-741c-4454-94ef-e0540f51c9d5",
                "4ed6cd93-1b81-4e39-9bad-36d27df208cc",
                "461bfec3-4a94-4647-84a4-29d85f0a672b",
                "d0f6afa7-4f49-4e6c-aac9-51f1e23b008a",
                "56110836-8c86-4a03-b018-33d32aa2ac42",
                "25f4b833-cf93-4a9c-9564-44ca539adf39",
                "ae83d1ad-238a-4f17-8fb9-1e3c70b5417a",
                "0e7c0f04-6807-4cf2-b8ef-527d5e5d5308",
                "c504814b-ec03-4b34-be81-f3f9c168bf97",
                "a4105ab8-4eeb-49b0-9529-dd20069f94ed",
                "29471776-7ced-445f-a949-7389866bb1d8",
                "87e6739a-a514-47ad-87d1-2dd854aabe6a",
                "df7a8f09-5f97-4041-94ae-29ffe05399ee",
                "95116505-fdcf-44c1-8261-016b3557494c",
                "24113ce8-f523-4e0a-a3db-711625f6c30c",
                "0a62e4fb-8a09-4390-b424-2ad0ac150d38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a526c6e-5fa3-40bb-9847-45d58a921f27",
              "title": "Mint Asset with extra properties when mutable trait is not defined",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "33a61009-35ac-4941-91a6-0e7e3a224afb",
                  "parentUUID": "3a526c6e-5fa3-40bb-9847-45d58a921f27",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "aa5c27a2-9a7b-46af-9c4b-01cb18d75e73",
                  "parentUUID": "3a526c6e-5fa3-40bb-9847-45d58a921f27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Define Asset: ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSETA1:S|,burn:H|1\",\n         \"immutableTraits\": \"ASSETA2:S|G\",\n         \"mutableMetaTraits\": \"ASSETA3:S|L\",\n         \"immutableMetaTraits\": \"ASSETA4:S|Q\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "79077ad0-e311-442e-b375-ecca5e68bee7",
                  "parentUUID": "3a526c6e-5fa3-40bb-9847-45d58a921f27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "2f9df8c0-cd13-4b02-9f95-c6994b7dfe95",
                  "parentUUID": "3a526c6e-5fa3-40bb-9847-45d58a921f27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Classification: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "4ac19351-2323-4e15-9e52-345a5e2aee09",
                  "parentUUID": "3a526c6e-5fa3-40bb-9847-45d58a921f27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Mint Asset: ",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"ASSETA1:S|A,burn:H|1,ASSETA1:S|B,ASSETA1:S|C\",\n       \"immutableProperties\": \"ASSETA2:S|G\",\n       \"mutableMetaProperties\": \"ASSETA3:S|L\",\n       \"immutableMetaProperties\": \"ASSETA4:S|Q\"      \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "260e7581-322c-4855-9e30-df1efe026669",
                  "parentUUID": "3a526c6e-5fa3-40bb-9847-45d58a921f27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "12d63388-117e-4f63-8f51-1ea9bb9b6583",
                  "parentUUID": "3a526c6e-5fa3-40bb-9847-45d58a921f27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa5c27a2-9a7b-46af-9c4b-01cb18d75e73",
                "79077ad0-e311-442e-b375-ecca5e68bee7",
                "2f9df8c0-cd13-4b02-9f95-c6994b7dfe95",
                "4ac19351-2323-4e15-9e52-345a5e2aee09",
                "260e7581-322c-4855-9e30-df1efe026669",
                "12d63388-117e-4f63-8f51-1ea9bb9b6583"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c5d94b27-4928-4ed3-9aad-03bbbf940d59",
          "title": "Splits",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a117ce4-06a8-4d81-85ae-6ef38fd6ef43",
              "title": "send split of an asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "373e974a-a238-41d4-aad7-944fa5623594",
                  "parentUUID": "6a117ce4-06a8-4d81-85ae-6ef38fd6ef43",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Splits send split of an asset Query Identity 1: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "03746bce-29ba-4b69-a26a-e36acb2d4c79",
                  "parentUUID": "6a117ce4-06a8-4d81-85ae-6ef38fd6ef43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Splits send split of an asset Query Identity 2: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n   data.iclasificationID2 = value.value.id.value.classificationID.value.idString\n   data.ihashID2 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "f3e81610-46f5-4fa0-a832-56a302237a52",
                  "parentUUID": "6a117ce4-06a8-4d81-85ae-6ef38fd6ef43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits send split of an asset Query Asset: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \" \"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "2fff9639-6b83-4c6a-9a03-c6a195cd9058",
                  "parentUUID": "6a117ce4-06a8-4d81-85ae-6ef38fd6ef43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an asset: ",
                  "fullTitle": "Splits send split of an asset Send split of an asset: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.sendSplitType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n       \"toID\": data.iclasificationID2 + '|' + data.ihashID2,\n       \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n       \"split\": config.splitval      \n     }\n   }\n \n   console.log(\"Send split of an asset obj : \" + JSON.stringify(obj))\n var err,res = await chai.request(server)\n .post(config.sendSplitPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "6550d15c-c1b8-4f93-8204-361d9533c1c3",
                  "parentUUID": "6a117ce4-06a8-4d81-85ae-6ef38fd6ef43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits send split of an asset Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "4d3c58b1-ca42-40d5-9d8b-d2f88cae455f",
                  "parentUUID": "6a117ce4-06a8-4d81-85ae-6ef38fd6ef43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03746bce-29ba-4b69-a26a-e36acb2d4c79",
                "f3e81610-46f5-4fa0-a832-56a302237a52",
                "2fff9639-6b83-4c6a-9a03-c6a195cd9058",
                "6550d15c-c1b8-4f93-8204-361d9533c1c3",
                "4d3c58b1-ca42-40d5-9d8b-d2f88cae455f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "edc2d0be-cf4d-470d-9172-8945b83153ab",
              "title": "Unwrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Unwrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "4f4553b9-ceec-4186-8c77-412ffd15f001",
                  "parentUUID": "edc2d0be-cf4d-470d-9172-8945b83153ab",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Splits Unwrap a coin Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "e63460aa-f116-4ed6-b415-0f7a18693e71",
                  "parentUUID": "edc2d0be-cf4d-470d-9172-8945b83153ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits Unwrap a coin Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "a48112c9-bc72-48e1-a51d-8972502aa3cf",
                  "parentUUID": "edc2d0be-cf4d-470d-9172-8945b83153ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Unwrap a coin: ",
                  "fullTitle": "Splits Unwrap a coin Unwrap a coin: ",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n   \"type\": config.unwrapCoinType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n       \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n       \"split\": config.splitval      \n     }\n   }\n \n   console.log(\"Send split of an coin obj : \" + JSON.stringify(obj))\n var err,res = await chai.request(server)\n .post(config.unwrapCoinPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "4356d4a9-9b1c-42ae-9d64-5017aa3f7e9a",
                  "parentUUID": "edc2d0be-cf4d-470d-9172-8945b83153ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits Unwrap a coin Query Tx: ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "910eca0e-468a-487e-8dc8-c8f1b08260d4",
                  "parentUUID": "edc2d0be-cf4d-470d-9172-8945b83153ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e63460aa-f116-4ed6-b415-0f7a18693e71",
                "a48112c9-bc72-48e1-a51d-8972502aa3cf",
                "4356d4a9-9b1c-42ae-9d64-5017aa3f7e9a",
                "910eca0e-468a-487e-8dc8-c8f1b08260d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 73,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64d29c2a-80a3-4d9e-9a6f-20eb424a9f74",
              "title": "Wrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Wrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "7185f9a6-b357-49b1-84fb-5d16c5900e90",
                  "parentUUID": "64d29c2a-80a3-4d9e-9a6f-20eb424a9f74",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Splits Wrap a coin Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "fb496139-e726-45d3-8bc6-858632c24788",
                  "parentUUID": "64d29c2a-80a3-4d9e-9a6f-20eb424a9f74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Splits Wrap a coin Wrap a coin: ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n   \"type\": config.wrapCoinType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n       \"coins\": config.coins\n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.wrapCoinPath)\n .send(obj)\n console.log(\"wrap a coing obj: \" + JSON.stringify(obj))\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "c1e09de3-8005-478b-9ea4-d401574ba410",
                  "parentUUID": "64d29c2a-80a3-4d9e-9a6f-20eb424a9f74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits Wrap a coin Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "df128346-7c4d-44cc-81ee-2fee70e6b7a6",
                  "parentUUID": "64d29c2a-80a3-4d9e-9a6f-20eb424a9f74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb496139-e726-45d3-8bc6-858632c24788",
                "c1e09de3-8005-478b-9ea4-d401574ba410",
                "df128346-7c4d-44cc-81ee-2fee70e6b7a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a07216f-01d8-4dee-bb13-9ee3825a2499",
              "title": "send split of an coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "02b5f0ce-1210-4e9e-b29a-a042c04b2afa",
                  "parentUUID": "6a07216f-01d8-4dee-bb13-9ee3825a2499",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Splits send split of an coin Query Identity 1: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "cb7a9006-f7e4-4580-b5a0-962cb48b468e",
                  "parentUUID": "6a07216f-01d8-4dee-bb13-9ee3825a2499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Splits send split of an coin Query Identity 2: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n   data.iclasificationID2 = value.value.id.value.classificationID.value.idString\n   data.ihashID2 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "cb9ff6e5-71bd-46b2-aeed-2b9b0ad002b1",
                  "parentUUID": "6a07216f-01d8-4dee-bb13-9ee3825a2499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits send split of an coin Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "4aa2b928-cbc3-4217-b02a-c415b507748c",
                  "parentUUID": "6a07216f-01d8-4dee-bb13-9ee3825a2499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an coin: ",
                  "fullTitle": "Splits send split of an coin Send split of an coin: ",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.sendSplitType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n       \"toID\": data.iclasificationID2 + '|' + data.ihashID2,\n       \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n       \"split\": config.splitval      \n     }\n   }\n   console.log(\"Send split of an coin obj : \" + JSON.stringify(obj))\n  \n var err,res = await chai.request(server)\n .post(config.sendSplitPath)\n .send(obj)\n  \n console.log(\"send split of a coin obj: \" + JSON.stringify(obj))\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "f2db315d-34ca-4c46-911a-8bd58618736b",
                  "parentUUID": "6a07216f-01d8-4dee-bb13-9ee3825a2499",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits send split of an coin Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "4ebf32cd-7ce4-4335-8707-ee4df76d3f57",
                  "parentUUID": "6a07216f-01d8-4dee-bb13-9ee3825a2499",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb7a9006-f7e4-4580-b5a0-962cb48b468e",
                "cb9ff6e5-71bd-46b2-aeed-2b9b0ad002b1",
                "4aa2b928-cbc3-4217-b02a-c415b507748c",
                "f2db315d-34ca-4c46-911a-8bd58618736b",
                "4ebf32cd-7ce4-4335-8707-ee4df76d3f57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6bc1b201-1ebb-4908-8ebb-3f3cc5c7c694",
          "title": "Metas",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c61ea429-8857-4b73-9004-593cf8dae0f5",
              "title": "Reveal a meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "2a75962a-d79b-4dae-bc76-365f105d1d95",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Metas Reveal a meta Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "d8c56bf1-2398-4bc7-98f4-0fd4695bae9c",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Metas Reveal a meta Define Asset: ",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n         \"mutableTraits\":\"ASSET_PA:S|AAA, burn:H|4\",\n         \"immutableTraits\": \"ASSET_PB:D|0.344\",\n         \"mutableMetaTraits\": \"ASSET_PC:I|ID\",\n         \"immutableMetaTraits\": \"ASSET_PD:S|A\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0ac2250b-a04c-4f8d-a6f9-ec66e2ac7e59",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "f00e89e3-4c67-4047-8592-bd163dd4fb55",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Metas Reveal a meta Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "d0aa89a3-47bf-455d-8a71-ba8c67fd3255",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Metas Reveal a meta Mint Asset: ",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mintAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"toID\": data.iclasificationID1 + '|' + data.ihashID1,\n         \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"mutableProperties\": \"ASSET_PA:S|AAA, burn:H|4\",\n         \"immutableProperties\": \"ASSET_PB:D|0.344\",\n         \"mutableMetaProperties\": \"ASSET_PC:I|ID\",\n         \"immutableMetaProperties\": \"ASSET_PD:S|A\"\n     \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.mintAssetPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {},
                  "uuid": "9bc895a7-ace0-4df9-ad5d-a69d3684d55a",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "897f32c4-ad48-41ec-b47c-84e6c0a232af",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Metas Reveal a meta Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qAsset)\n  \nvar list = res.body.result.value.assets.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\"){\n    data.aclasificationID = value.value.id.value.classificationID.value.idString\n    data.ahashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "d71e2a61-5d09-4178-8fbf-1e0f6fb7fe37",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"S|AAA\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0d7174c3-f0a0-4265-911a-04d5f4d68591",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n.get('/txs/'+txHash) \nvar data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "f33978b9-fc53-4827-ad91-c15c696ba972",
                  "parentUUID": "c61ea429-8857-4b73-9004-593cf8dae0f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8c56bf1-2398-4bc7-98f4-0fd4695bae9c",
                "0ac2250b-a04c-4f8d-a6f9-ec66e2ac7e59",
                "f00e89e3-4c67-4047-8592-bd163dd4fb55",
                "d0aa89a3-47bf-455d-8a71-ba8c67fd3255",
                "9bc895a7-ace0-4df9-ad5d-a69d3684d55a",
                "897f32c4-ad48-41ec-b47c-84e6c0a232af",
                "d71e2a61-5d09-4178-8fbf-1e0f6fb7fe37",
                "0d7174c3-f0a0-4265-911a-04d5f4d68591",
                "f33978b9-fc53-4827-ad91-c15c696ba972"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 137,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d11cf81-649d-4480-9d8e-15cc5e647347",
              "title": "Reveal a meta of id type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of id type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "1a1649b0-cfe3-4bb0-9f65-f1c6f3b11ac1",
                  "parentUUID": "9d11cf81-649d-4480-9d8e-15cc5e647347",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of id type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"I|ID\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "549153f5-3872-405d-ae76-d231d4c0913c",
                  "parentUUID": "9d11cf81-649d-4480-9d8e-15cc5e647347",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of id type Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "038bcf70-5355-4a97-9b28-520a2beb483a",
                  "parentUUID": "9d11cf81-649d-4480-9d8e-15cc5e647347",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "549153f5-3872-405d-ae76-d231d4c0913c",
                "038bcf70-5355-4a97-9b28-520a2beb483a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 37,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ebf7603-b1a8-43f1-bac7-79baa54225c6",
              "title": "Reveal a meta of string type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of string type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "1924bef7-67b4-42af-8460-fb968a2e4a85",
                  "parentUUID": "3ebf7603-b1a8-43f1-bac7-79baa54225c6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of string type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"S|AAA\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "8b898faa-a8d3-4af9-8b85-3237df872ac6",
                  "parentUUID": "3ebf7603-b1a8-43f1-bac7-79baa54225c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of string type Query Tx: ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "7a9b4c12-c777-4899-b043-9f71c35c1e4c",
                  "parentUUID": "3ebf7603-b1a8-43f1-bac7-79baa54225c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b898faa-a8d3-4af9-8b85-3237df872ac6",
                "7a9b4c12-c777-4899-b043-9f71c35c1e4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eea54e31-1b16-44c6-94cc-09739019a05c",
              "title": "Reveal a meta of dec type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of dec type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "d99e661f-83cf-4c93-bc55-21fa2ebe8915",
                  "parentUUID": "eea54e31-1b16-44c6-94cc-09739019a05c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of dec type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"D|0.344\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "86e0c970-9937-462e-9e80-45c819c33048",
                  "parentUUID": "eea54e31-1b16-44c6-94cc-09739019a05c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of dec type Query Tx: ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "539aab6f-56e8-4e26-a7c2-35b88861664d",
                  "parentUUID": "eea54e31-1b16-44c6-94cc-09739019a05c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86e0c970-9937-462e-9e80-45c819c33048",
                "539aab6f-56e8-4e26-a7c2-35b88861664d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "066ccccb-8df0-46a9-b55e-d58fa15f4443",
              "title": "Reveal a meta of height type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of height type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "350de346-4f46-41e1-9710-05339fed7603",
                  "parentUUID": "066ccccb-8df0-46a9-b55e-d58fa15f4443",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of height type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"H|4\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a8e1a56a-11ba-4be0-924f-bba175d89fdb",
                  "parentUUID": "066ccccb-8df0-46a9-b55e-d58fa15f4443",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of height type Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "180fa218-bf1d-4b9f-841a-f433cf94a682",
                  "parentUUID": "066ccccb-8df0-46a9-b55e-d58fa15f4443",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8e1a56a-11ba-4be0-924f-bba175d89fdb",
                "180fa218-bf1d-4b9f-841a-f433cf94a682"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e7975e4-add9-4f63-aec4-594b7b537008",
              "title": "Reveal an already revealed meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal an already revealed meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "cb43b6df-7a51-48cd-9187-4c82706f9c6d",
                  "parentUUID": "2e7975e4-add9-4f63-aec4-594b7b537008",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal an already revealed meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"H|4\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "31151d1c-892d-4edd-8b3a-aa9366d5a602",
                  "parentUUID": "2e7975e4-add9-4f63-aec4-594b7b537008",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal an already revealed meta Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "26a3c8e1-0a33-4303-b0e0-5974bf3ec4c6",
                  "parentUUID": "2e7975e4-add9-4f63-aec4-594b7b537008",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31151d1c-892d-4edd-8b3a-aa9366d5a602",
                "26a3c8e1-0a33-4303-b0e0-5974bf3ec4c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "791aecde-6c44-463b-9b3f-613bf6ce2537",
          "title": "Orders",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
              "title": "Create an asset make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an asset make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "7d95d8b6-e85a-43b8-bb46-cc8707551bff",
                  "parentUUID": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create an asset make order Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n     if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "4f011c66-7691-4a65-98fe-34733ae6969d",
                  "parentUUID": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an asset make order Define Order: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ORDER_MUTABLE2:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableTraits\":\"ORDER_IMMUTABLE2:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaTraits\": \"ORDER_MUTABLE_META2:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerOwnableSplit:D|\"+config.makerownablesplit+\",expiry:H|\"+config.expiry+\",makerSplit:D|\"+config.makerownablesplit+\",takerID:S|\",\n         \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META2:S|num4\" + num\n       }\n     }\n            \n   var err,res = await chai.request(server)\n   .post(config.defineOrderPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:4238:23)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "e1e12f19-972d-4c06-a1f0-5edc3295a5b1",
                  "parentUUID": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an asset make order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "4116f7ea-0338-4e2b-8c61-4e217ac179ae",
                  "parentUUID": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an asset make order Query Classification: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "05a9b971-6a3a-4a6d-b72d-1c5a74de25ed",
                  "parentUUID": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an asset make order Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "eaeb7f61-4858-4f80-a2de-00ad4dc11f52",
                  "parentUUID": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an asset make order Asset Make Order: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"makerOwnableID\":data.aclasificationID + '|' + data.ahashID,\n         \"takerOwnableID\": config.makerownableid,\n         \"expiresIn\":config.expiry,\n         \"makerOwnableSplit\":config.makerownablesplit,\n         \"mutableProperties\": \"ORDER_MUTABLE2:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableProperties\": \"ORDER_IMMUTABLE2:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaProperties\": \"ORDER_MUTABLE_META2:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerSplit:D|\"+config.makerownablesplit,\n         \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META2:S|num4\" + num        \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "bb1731f0-a1f1-4976-88a3-2dab48bd65c5",
                  "parentUUID": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an asset make order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "c086f630-8f86-4c6b-81e1-d70c9070a59c",
                  "parentUUID": "2c4cd68a-ecbb-4d22-b773-4a5647b7c48b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f011c66-7691-4a65-98fe-34733ae6969d",
                "4116f7ea-0338-4e2b-8c61-4e217ac179ae",
                "05a9b971-6a3a-4a6d-b72d-1c5a74de25ed",
                "eaeb7f61-4858-4f80-a2de-00ad4dc11f52",
                "c086f630-8f86-4c6b-81e1-d70c9070a59c"
              ],
              "failures": [
                "e1e12f19-972d-4c06-a1f0-5edc3295a5b1",
                "bb1731f0-a1f1-4976-88a3-2dab48bd65c5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 84,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4dcfbbe3-d642-4870-ab09-7981cd825b2c",
              "title": "Take an asset take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an asset take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "9602c458-9c89-44aa-b479-1bcb815825d6",
                  "parentUUID": "4dcfbbe3-d642-4870-ab09-7981cd825b2c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Take an asset take order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n     if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "18e381fe-09cf-420d-8a90-fe53938aecd0",
                  "parentUUID": "4dcfbbe3-d642-4870-ab09-7981cd825b2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Take an asset take order Query Orders: ",
                  "timedOut": false,
                  "duration": 27,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.orders.value.list\n      list.forEach(function(value){\n \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\"){\n  data.oclassificationID = value.value.id.value.classificationID.value.idString\n  data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n  data.takerownableid = value.value.id.value.takerOwnableID.value.idString\n  data.omakerid = value.value.id.value.makerID.value.idString\n  data.ohashid = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {
                    "message": "TypeError: Cannot read property 'value' of undefined",
                    "estack": "TypeError: Cannot read property 'value' of undefined\n    at Context.it (test/keys.js:4404:47)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": null
                  },
                  "uuid": "a77f6eb2-b149-4325-a2c1-2e4997cdee9a",
                  "parentUUID": "4dcfbbe3-d642-4870-ab09-7981cd825b2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an asset take order Take Order: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.takeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"takerOwnableSplit\": config.makerownablesplit,\n         \"orderID\": data.oclassificationID+'*'+data.omakerownableid+'*'+data.takerownableid+'*'+data.omakerid+'*'+data.ohashid   \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.takeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 101",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 101\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "b08c3795-c533-4407-95df-456d7b7b6c74",
                  "parentUUID": "4dcfbbe3-d642-4870-ab09-7981cd825b2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Take an asset take order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "7e746214-f95f-4c39-a2a4-8a511675a1c8",
                  "parentUUID": "4dcfbbe3-d642-4870-ab09-7981cd825b2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18e381fe-09cf-420d-8a90-fe53938aecd0",
                "7e746214-f95f-4c39-a2a4-8a511675a1c8"
              ],
              "failures": [
                "a77f6eb2-b149-4325-a2c1-2e4997cdee9a",
                "b08c3795-c533-4407-95df-456d7b7b6c74"
              ],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
              "title": "Cancel an asset order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel an asset order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "f58e0691-817c-4e9d-a6c7-bd4466212d3a",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Cancel an asset order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n     if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "dc2ac485-8e5e-4258-8701-ee6e591f4ce7",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Cancel an asset order Define Order: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ORDER_MUTABLE3:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableTraits\":\"ORDER_IMMUTABLE3:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaTraits\": \"ORDER_MUTABLE_META3:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerOwnableSplit:D|\"+config.makerownablesplit+\",expiry:H|\"+config.expiry+\",makerSplit:D|\"+config.makerownablesplit+\",takerID:S|ID\",\n         \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META3:S|num4\" + num\n       }\n     }\n            \n   var err,res = await chai.request(server)\n   .post(config.defineOrderPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:4533:23)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "c2857e33-dc9f-4cd1-8f7e-2e57673990af",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "9df73751-5b3e-40ae-882f-7c9def1e3578",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Cancel an asset order Query Classification: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META3\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "154f713b-dda0-4a3b-b739-e6e6b1f16f97",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Cancel an asset order Query Asset: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETD\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "eaec11a6-d66f-48b9-b305-65082d0c5843",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Cancel an asset order Make Order: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.makeOrderType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"makerOwnableID\":data.aclasificationID + '|' + data.ahashID,\n       \"takerOwnableID\": config.makerownableid,\n       \"expiresIn\":config.expiry,\n       \"makerOwnableSplit\":config.makerownablesplit,\n       \"mutableProperties\": \"ORDER_MUTABLE3:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n       \"immutableProperties\": \"ORDER_IMMUTABLE3:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n       \"mutableMetaProperties\": \"ORDER_MUTABLE_META3:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerSplit:D|\"+config.makerownablesplit,\n       \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META3:S|num4\" + num        \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.makeOrderPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "545ec3eb-561f-451c-9756-84dae507e126",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "cd132d46-f4e8-4556-bf6f-b0f79c52c79e",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Cancel an asset order Query Orders: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n    .get(config.qClassification)\n\n    var list = res.body.result.value.orders.value.list\n    list.forEach(function(value){\n       \n      if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META3\"){\ndata.oclassificationID = value.value.id.value.classificationID.value.idString\ndata.omakerownableid = value.value.id.value.makerOwnableID.value.idString\ndata.takerownableid = value.value.id.value.takerOwnableID.value.idString\ndata.omakerid = value.value.id.value.makerID.value.idString\ndata.ohashid = value.value.id.value.hashID.value.idString\n      }        \n    });",
                  "err": {
                    "message": "TypeError: Cannot read property 'value' of undefined",
                    "estack": "TypeError: Cannot read property 'value' of undefined\n    at Context.it (test/keys.js:4660:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": null
                  },
                  "uuid": "8064509b-f9eb-4266-bd3b-a897d343fc47",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel an asset order Cancel Order: ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"orderID\": data.oclassificationID+'*'+data.omakerownableid+'*'+data.takerownableid+'*'+data.omakerid+'*'+data.ohashid      \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:4694:23)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "e8992c6c-9460-4f7f-b727-f8ebff6424fb",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "429bc32f-3e9e-4a4e-b9fd-61cbe02d6952",
                  "parentUUID": "fab5728b-3408-4c34-9ce0-ae54c662ca97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc2ac485-8e5e-4258-8701-ee6e591f4ce7",
                "9df73751-5b3e-40ae-882f-7c9def1e3578",
                "154f713b-dda0-4a3b-b739-e6e6b1f16f97",
                "eaec11a6-d66f-48b9-b305-65082d0c5843",
                "cd132d46-f4e8-4556-bf6f-b0f79c52c79e",
                "429bc32f-3e9e-4a4e-b9fd-61cbe02d6952"
              ],
              "failures": [
                "c2857e33-dc9f-4cd1-8f7e-2e57673990af",
                "545ec3eb-561f-451c-9756-84dae507e126",
                "8064509b-f9eb-4266-bd3b-a897d343fc47",
                "e8992c6c-9460-4f7f-b727-f8ebff6424fb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
              "title": "Create an coin make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an coin make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "e0abc3cc-a529-476c-be28-2a522670de29",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create an coin make order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n     if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "8561fdef-fe04-4ee4-954e-a7735aaeb339",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an coin make order Define Order: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ORDER_MUTABLE4:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableTraits\":\"ORDER_IMMUTABLE4:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaTraits\": \"ORDER_MUTABLE_META4:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerOwnableSplit:D|\"+config.makerownablesplit+\",expiry:H|\"+config.expiry+\",makerSplit:D|\"+config.makerownablesplit+\",takerID:S|ID\",\n         \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META4:S|num4\" + num\n       }\n     }\n            \n   var err,res = await chai.request(server)\n   .post(config.defineOrderPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:4783:23)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "8e23384a-5f4d-4f44-a161-cc6ee81e93d6",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "03b27802-93bf-4ff1-888e-9fd766bdb4f2",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an coin make order Query Classification: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "ffb9d0d1-ee9c-49ba-a6f0-90cc9b2107eb",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Orders Create an coin make order Wrap a coin: ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.wrapCoinType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n         \"coins\": config.coins\n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.wrapCoinPath)\n   .send(obj)\n  \n   console.log(\"wrap a coing obj: \" + JSON.stringify(obj))\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {},
                  "uuid": "63270232-3614-4a66-b430-ca7ec8b247f8",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "ae36e199-877e-46e9-b58c-1a81e4daa2c7",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Create an coin make order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"makerOwnableID\":config.makerownableid,\n         \"takerOwnableID\": config.takerownableid,\n         \"expiresIn\":config.expiry,\n         \"makerOwnableSplit\":config.makerownablesplit,\n         \"mutableProperties\": \"ORDER_MUTABLE4:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableProperties\": \"ORDER_IMMUTABLE4:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaProperties\": \"ORDER_MUTABLE_META4:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate,\n         \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META4:S|num4\" + num        \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "783ed32a-d5ce-455c-9321-e2cfb07f2add",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "aa2909c5-41a7-47ee-86dd-32d8dd93a8f5",
                  "parentUUID": "c4a572d6-5e98-484f-80e6-c7249ac4c684",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8561fdef-fe04-4ee4-954e-a7735aaeb339",
                "03b27802-93bf-4ff1-888e-9fd766bdb4f2",
                "ffb9d0d1-ee9c-49ba-a6f0-90cc9b2107eb",
                "63270232-3614-4a66-b430-ca7ec8b247f8",
                "ae36e199-877e-46e9-b58c-1a81e4daa2c7",
                "aa2909c5-41a7-47ee-86dd-32d8dd93a8f5"
              ],
              "failures": [
                "8e23384a-5f4d-4f44-a161-cc6ee81e93d6",
                "783ed32a-d5ce-455c-9321-e2cfb07f2add"
              ],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2dbd8292-8e0f-42e3-b74d-17bffd6cdba6",
              "title": "Take an coin take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an coin take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "c6f11868-d4f5-4d89-9d79-f6277a4453bf",
                  "parentUUID": "2dbd8292-8e0f-42e3-b74d-17bffd6cdba6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Take an coin take order Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n     if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "175d10b0-bcba-4668-a47f-40f2a59cfebe",
                  "parentUUID": "2dbd8292-8e0f-42e3-b74d-17bffd6cdba6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Take an coin take order Query Orders: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.orders.value.list\n      list.forEach(function(value){\n \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META4\"){\n  data.oclassificationID = value.value.id.value.classificationID.value.idString\n  data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n  data.takerownableid = value.value.id.value.takerOwnableID.value.idString\n  data.omakerid = value.value.id.value.makerID.value.idString\n  data.ohashid = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {
                    "message": "TypeError: Cannot read property 'value' of undefined",
                    "estack": "TypeError: Cannot read property 'value' of undefined\n    at Context.it (test/keys.js:4987:47)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": null
                  },
                  "uuid": "6e820ce3-08c3-4359-ac3a-9596a3da5bea",
                  "parentUUID": "2dbd8292-8e0f-42e3-b74d-17bffd6cdba6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an coin take order Take Order: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.takeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"takerOwnableSplit\": config.makerownablesplit,\n         \"orderID\": data.oclassificationID+'*'+data.omakerownableid+'*'+data.takerownableid+'*'+data.omakerid+'*'+data.ohashid   \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.takeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 101",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 101\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "1c3a29df-7926-408b-9bfb-b0a8d3edd11c",
                  "parentUUID": "2dbd8292-8e0f-42e3-b74d-17bffd6cdba6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Take an coin take order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "21cac883-fb44-4584-b27d-ca96512e17ef",
                  "parentUUID": "2dbd8292-8e0f-42e3-b74d-17bffd6cdba6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "175d10b0-bcba-4668-a47f-40f2a59cfebe",
                "21cac883-fb44-4584-b27d-ca96512e17ef"
              ],
              "failures": [
                "6e820ce3-08c3-4359-ac3a-9596a3da5bea",
                "1c3a29df-7926-408b-9bfb-b0a8d3edd11c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4491492c-3623-49d3-93d4-ee399d82f720",
              "title": "Cancel a coin order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel a coin order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "d51cabbe-2ab0-4a42-b822-ac2700e02ecb",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Cancel a coin order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n     if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "7a29aad7-18ac-433f-8e7a-f7f97a8af2ee",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Cancel a coin order Define Order: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ORDER_MUTABLE5:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableTraits\":\"ORDER_IMMUTABLE5:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaTraits\": \"ORDER_MUTABLE_META5:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerOwnableSplit:D|\"+config.makerownablesplit+\",expiry:H|\"+config.expiry+\",makerSplit:D|\"+config.makerownablesplit+\",takerID:S|ID\",\n         \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META5:S|num4\" + num\n       }\n     }\n            \n   var err,res = await chai.request(server)\n   .post(config.defineOrderPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:5116:23)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "ca57c090-02d3-4b89-bca2-fde86dee9395",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "aebf7cbe-1994-4810-bcfb-6a72039d5ae0",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Cancel a coin order Query Classification: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META5\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "91ad7096-35b9-4772-a50a-e77af550be2d",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Cancel a coin order Query Asset: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETD\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "83cc12f0-57ba-422f-8051-f45e4a66213b",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Coin Order: ",
                  "fullTitle": "Orders Cancel a coin order Make Coin Order: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.makeOrderType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"makerOwnableID\":config.makerownableid,\n       \"takerOwnableID\": config.makerownableid,\n       \"expiresIn\":config.expiry,\n       \"makerOwnableSplit\":config.makerownablesplit,\n       \"mutableProperties\": \"ORDER_MUTABLE5:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n       \"immutableProperties\": \"ORDER_IMMUTABLE5:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n       \"mutableMetaProperties\": \"ORDER_MUTABLE_META5:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerSplit:D|\"+config.makerownablesplit,\n       \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META5:S|num4\" + num        \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.makeOrderPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "6a699a06-ff00-4269-9192-f304143e5a88",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "6453f3d5-3782-41c8-8124-063e44345d5e",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Cancel a coin order Query Orders: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n    .get(config.qClassification)\n\n    var list = res.body.result.value.orders.value.list\n    list.forEach(function(value){\n       \n      if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\"){\ndata.oclassificationID = value.value.id.value.classificationID.value.idString\ndata.omakerownableid = value.value.id.value.makerOwnableID.value.idString\ndata.takerownableid = value.value.id.value.takerOwnableID.value.idString\ndata.omakerid = value.value.id.value.makerID.value.idString\ndata.ohashid = value.value.id.value.hashID.value.idString\n      }        \n    });",
                  "err": {
                    "message": "TypeError: Cannot read property 'value' of undefined",
                    "estack": "TypeError: Cannot read property 'value' of undefined\n    at Context.it (test/keys.js:5243:45)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": null
                  },
                  "uuid": "aa76095a-846c-4d51-a438-4d9ff99a0ff6",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel a coin order Cancel Order: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"orderID\": data.oclassificationID+'*'+data.omakerownableid+'*'+data.takerownableid+'*'+data.omakerid+'*'+data.ohashid      \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:5277:23)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "aedde13a-7b86-4b3c-ac21-00d78a13e487",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "59076443-d7fd-4d20-a918-cac322711503",
                  "parentUUID": "4491492c-3623-49d3-93d4-ee399d82f720",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a29aad7-18ac-433f-8e7a-f7f97a8af2ee",
                "aebf7cbe-1994-4810-bcfb-6a72039d5ae0",
                "91ad7096-35b9-4772-a50a-e77af550be2d",
                "83cc12f0-57ba-422f-8051-f45e4a66213b",
                "6453f3d5-3782-41c8-8124-063e44345d5e",
                "59076443-d7fd-4d20-a918-cac322711503"
              ],
              "failures": [
                "ca57c090-02d3-4b89-bca2-fde86dee9395",
                "6a699a06-ff00-4269-9192-f304143e5a88",
                "aa76095a-846c-4d51-a438-4d9ff99a0ff6",
                "aedde13a-7b86-4b3c-ac21-00d78a13e487"
              ],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
              "title": "Create an order with correct takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with correct takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "45b43cd2-aa11-4bf7-8453-af99513da4d1",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Identity 1: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID1 = value.value.id.value.classificationID.value.idString\n   data.hashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "0ff61db6-f2d1-44d6-9da1-ab1d669477a3",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Identity 2: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n   data.clasificationID2 = value.value.id.value.classificationID.value.idString\n   data.hashID2 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "437bb198-9b20-4110-974e-055b95a53025",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Order: ",
                  "timedOut": false,
                  "duration": 20,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n         \"mutableTraits\":\"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableTraits\":\"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaTraits\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerOwnableSplit:D|\"+config.makerownablesplit+\",expiry:H|\"+config.expiry+\",makerSplit:D|\"+config.makerownablesplit+\",takerID:S|ID\",\n         \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META6:S|num4\" + num\n       }\n     }\n            \n   var err,res = await chai.request(server)\n   .post(config.defineOrderPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:5384:23)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "5ea1c53d-6cda-4bcc-9a40-c96be2c71d6c",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "813131e3-e9b3-47f4-8207-a211f4dc5f5d",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META6\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "2cfe88e8-d5e9-4318-a4d2-0420db2d411c",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "b40392e9-3c71-451b-a753-391411ba6ef9",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"makerOwnableID\":data.aclasificationID + '|' + data.ahashID,\n         \"takerOwnableID\": config.makerownableid,\n         \"expiresIn\":config.expiry,\n         \"makerOwnableSplit\":config.makerownablesplit,\n         \"mutableProperties\": \"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableProperties\": \"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaProperties\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerSplit:D|\"+config.makerownablesplit,\n         \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META6:S|num4\" + num        \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "832ced3a-55ce-4881-a2ef-87f7590bff9c",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "0dbb6f56-b3c8-42d1-913c-b5d5c5885dc0",
                  "parentUUID": "b19cbffa-1843-4c9e-8d5e-1c6a8f4b0858",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ff61db6-f2d1-44d6-9da1-ab1d669477a3",
                "437bb198-9b20-4110-974e-055b95a53025",
                "813131e3-e9b3-47f4-8207-a211f4dc5f5d",
                "2cfe88e8-d5e9-4318-a4d2-0420db2d411c",
                "b40392e9-3c71-451b-a753-391411ba6ef9",
                "0dbb6f56-b3c8-42d1-913c-b5d5c5885dc0"
              ],
              "failures": [
                "5ea1c53d-6cda-4bcc-9a40-c96be2c71d6c",
                "832ced3a-55ce-4881-a2ef-87f7590bff9c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cec51528-127b-42fd-8167-c2724c9c5da3",
              "title": "Create an order with other takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with other takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "49f28afc-5d40-4ce5-8a7b-15137fe168dd",
                  "parentUUID": "cec51528-127b-42fd-8167-c2724c9c5da3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 1: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID1 = value.value.id.value.classificationID.value.idString\n   data.hashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "9e5833dc-3b45-4197-ab83-9cfcc4bcbbb8",
                  "parentUUID": "cec51528-127b-42fd-8167-c2724c9c5da3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 2: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n   data.clasificationID2 = value.value.id.value.classificationID.value.idString\n   data.hashID2 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "865d54f2-859c-40e5-ba65-f3c130e325bf",
                  "parentUUID": "cec51528-127b-42fd-8167-c2724c9c5da3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 3: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\"){\n   data.clasificationID3 = value.value.id.value.classificationID.value.idString\n   data.hashID3 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "a32a43fd-8054-4710-b682-88a58d415b0e",
                  "parentUUID": "cec51528-127b-42fd-8167-c2724c9c5da3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an order with other takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "87e62e5c-9b04-4fc0-9a83-c51f191c67ef",
                  "parentUUID": "cec51528-127b-42fd-8167-c2724c9c5da3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an order with other takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "9d173e80-ac03-4adb-b31d-c060bad2a3cb",
                  "parentUUID": "cec51528-127b-42fd-8167-c2724c9c5da3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with other takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"makerOwnableID\":data.aclasificationID + '|' + data.ahashID,\n         \"takerOwnableID\": config.makerownableid,\n         \"expiresIn\":config.expiry,\n         \"makerOwnableSplit\":config.makerownablesplit,\n         \"mutableProperties\": \"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableProperties\": \"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaProperties\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerSplit:D|\"+config.makerownablesplit+ \",takerID:S|\"+data.clasificationID3*data.hashID3,\n         \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META6:S|num4\" + num        \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "0fdac5c4-d056-4429-9a1b-f77a44929ca0",
                  "parentUUID": "cec51528-127b-42fd-8167-c2724c9c5da3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with other takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "91fdcac7-cda0-4bc6-997d-e0242f09a72e",
                  "parentUUID": "cec51528-127b-42fd-8167-c2724c9c5da3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e5833dc-3b45-4197-ab83-9cfcc4bcbbb8",
                "865d54f2-859c-40e5-ba65-f3c130e325bf",
                "a32a43fd-8054-4710-b682-88a58d415b0e",
                "87e62e5c-9b04-4fc0-9a83-c51f191c67ef",
                "9d173e80-ac03-4adb-b31d-c060bad2a3cb",
                "91fdcac7-cda0-4bc6-997d-e0242f09a72e"
              ],
              "failures": [
                "0fdac5c4-d056-4429-9a1b-f77a44929ca0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 73,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8407a881-4150-4055-8563-7aa056ca7845",
              "title": "Create order with takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create order with takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "65dd320b-798d-4538-8ade-f5d63a59cf09",
                  "parentUUID": "8407a881-4150-4055-8563-7aa056ca7845",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create order with takerID Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n     if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "45cd76ca-26ef-46de-af75-fa30013ce1bf",
                  "parentUUID": "8407a881-4150-4055-8563-7aa056ca7845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create order with takerID Define Order: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ORDER_MUTABLE7:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableTraits\":\"ORDER_IMMUTABLE7:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaTraits\": \"ORDER_MUTABLE_META7:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerOwnableSplit:D|\"+config.makerownablesplit+\",expiry:H|\"+config.expiry+\",makerSplit:D|\"+config.makerownablesplit+\",takerID:S|\",\n         \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META7:S|num4\" + num\n       }\n     }\n            \n   var err,res = await chai.request(server)\n   .post(config.defineOrderPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:5723:23)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "d2dd8c4f-74dc-426b-a113-1e1eecdd4317",
                  "parentUUID": "8407a881-4150-4055-8563-7aa056ca7845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create order with takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "8e82ba5b-fb84-478f-b338-8852a3d63f3a",
                  "parentUUID": "8407a881-4150-4055-8563-7aa056ca7845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create order with takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META7\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "68025235-1474-422e-8b48-69569bae5192",
                  "parentUUID": "8407a881-4150-4055-8563-7aa056ca7845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create order with takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "eb959a11-3a73-440c-9a8a-b615b453e89b",
                  "parentUUID": "8407a881-4150-4055-8563-7aa056ca7845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create order with takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"makerOwnableID\":data.aclasificationID + '|' + data.ahashID,\n         \"takerOwnableID\": config.makerownableid,\n         \"expiresIn\":config.expiry,\n         \"makerOwnableSplit\":config.makerownablesplit,\n         \"mutableProperties\": \"ORDER_MUTABLE7:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableProperties\": \"ORDER_IMMUTABLE7:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaProperties\": \"ORDER_MUTABLE_META7:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerSplit:D|\"+config.makerownablesplit+\",takerID:S|\"+ data.clasificationID*data.hashID,\n         \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META7:S|num4\" + num        \n       }\n     }\n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "8cd3a008-b2af-4f40-902c-31328f9abf93",
                  "parentUUID": "8407a881-4150-4055-8563-7aa056ca7845",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create order with takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "bed33129-979c-45e9-a608-ddfe398c3171",
                  "parentUUID": "8407a881-4150-4055-8563-7aa056ca7845",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45cd76ca-26ef-46de-af75-fa30013ce1bf",
                "8e82ba5b-fb84-478f-b338-8852a3d63f3a",
                "68025235-1474-422e-8b48-69569bae5192",
                "eb959a11-3a73-440c-9a8a-b615b453e89b",
                "bed33129-979c-45e9-a608-ddfe398c3171"
              ],
              "failures": [
                "d2dd8c4f-74dc-426b-a113-1e1eecdd4317",
                "8cd3a008-b2af-4f40-902c-31328f9abf93"
              ],
              "pending": [],
              "skipped": [],
              "duration": 60,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
              "title": "Sell assets with splits, where taker gives more splits than he is supposed to",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "eb4668c4-d4ee-4fe3-9a97-349deadf8a2f",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 1: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID1 = value.value.id.value.classificationID.value.idString\n   data.hashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "b2c5c4df-d05f-4248-b0e4-a8d1d0784bf6",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 2: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n   data.clasificationID2 = value.value.id.value.classificationID.value.idString\n   data.hashID2 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "9968e5b1-58b9-4fb9-80bf-9fae726f6ef2",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 3: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\"){\n   data.clasificationID3 = value.value.id.value.classificationID.value.idString\n   data.hashID3 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "8141730b-da05-4295-93c7-ceaee916239a",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Asset: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSETS10:S|num1\" + num + \",burn:H|1\",\n         \"immutableTraits\":\"ASSETS11:S|\",\n         \"mutableMetaTraits\": \"ASSETS12:S|num3\" + num,\n         \"immutableMetaTraits\": \"ASSETS13:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "891d7488-6a03-469d-a460-04bf441bf939",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "c6c2fdba-01d1-47c8-91f9-feb892e42dca",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS13\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "f6479efd-c20a-4b01-bd98-501acd84deed",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Mint Asset: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mintAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"toID\": data.clasificationID1 + '|' + data.hashID1,\n         \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"mutableProperties\": \"ASSETS10:S|num1\" + num + \",burn:H|1\",\n         \"immutableProperties\": \"ASSETS11:S|abc\",\n         \"mutableMetaProperties\": \"ASSETS12:S|num3\" + num,\n         \"immutableMetaProperties\": \"ASSETS13:S|num4\" + num        \n       }\n     }\n    \n   var err,res = await chai.request(server)\n   .post(config.mintAssetPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {},
                  "uuid": "fb6ee902-f35f-40d1-8e73-a24690704f50",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "52447750-eb57-4a71-97cc-13c1dddc167b",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Asset: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS13\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "65af04ac-e18f-4f98-b1fe-8d26dadccd79",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Order: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.defineOrderType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n       \"mutableTraits\":\"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n       \"immutableTraits\":\"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n       \"mutableMetaTraits\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerOwnableSplit:D|\"+config.makerownablesplit+\",expiry:H|\"+config.expiry+\",makerSplit:D|\"+config.makerownablesplit+\",takerSplit:D|,takerID:S|\",\n       \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META24:S|num4\" + num\n     }\n   }\n          \n var err,res = await chai.request(server)\n .post(config.defineOrderPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:6081:21)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "705e0dc2-ba2c-40ac-a2eb-0ad392022b1b",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "02a62919-bd49-4d8b-a13e-af863826d699",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n    .get(config.qClassification)\n\n    var list = res.body.result.value.classifications.value.list\n    list.forEach(function(value){\n       \n      if(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META24\"){\ndata.chainID = value.value.id.value.chainID.value.idString\ndata.clshashID = value.value.id.value.hashID.value.idString\n }        \n    });",
                  "err": {},
                  "uuid": "a458a9d4-c561-45de-90f5-689873fb1527",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Asset Make Order: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"makerOwnableID\":data.aclasificationID + '|' + data.ahashID,\n         \"takerOwnableID\": config.makerownableid,\n         \"expiresIn\":config.expiry,\n         \"makerOwnableSplit\":config.makerownablesplit,\n         \"mutableProperties\": \"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableProperties\": \"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaProperties\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerSplit:D|\"+config.makerownablesplit+ \",takerID:S|,makerID:S|\"+data.clasificationID3*data.hashID3,\n         \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META24:S|num4\" + num        \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "df3ca0a9-da46-4840-90ff-616d8cc8e29e",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "338c5c3f-2a45-493f-b50a-378f66e144fa",
                  "parentUUID": "77dfc0fb-fa6f-400b-bc6f-483ce2cc5fcf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2c5c4df-d05f-4248-b0e4-a8d1d0784bf6",
                "9968e5b1-58b9-4fb9-80bf-9fae726f6ef2",
                "8141730b-da05-4295-93c7-ceaee916239a",
                "891d7488-6a03-469d-a460-04bf441bf939",
                "c6c2fdba-01d1-47c8-91f9-feb892e42dca",
                "f6479efd-c20a-4b01-bd98-501acd84deed",
                "fb6ee902-f35f-40d1-8e73-a24690704f50",
                "52447750-eb57-4a71-97cc-13c1dddc167b",
                "65af04ac-e18f-4f98-b1fe-8d26dadccd79",
                "02a62919-bd49-4d8b-a13e-af863826d699",
                "a458a9d4-c561-45de-90f5-689873fb1527",
                "338c5c3f-2a45-493f-b50a-378f66e144fa"
              ],
              "failures": [
                "705e0dc2-ba2c-40ac-a2eb-0ad392022b1b",
                "df3ca0a9-da46-4840-90ff-616d8cc8e29e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 164,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
              "title": "Orders (splits) with exchange value other than smallest dec",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "099783ec-1d34-435d-9c1d-1c5263a3ea32",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 1: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID1 = value.value.id.value.classificationID.value.idString\n   data.hashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "46a92ece-6d54-4809-bd94-b878a60cc0ee",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 2: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n   data.clasificationID2 = value.value.id.value.classificationID.value.idString\n   data.hashID2 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "9cc62270-5a0f-43d1-a012-ae89de1c0587",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 3: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\"){\n   data.clasificationID3 = value.value.id.value.classificationID.value.idString\n   data.hashID3 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "3567c170-d470-4fbe-b71d-5df905e519e4",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Define Asset: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSETS101:S|num1\" + num + \",burn:H|1\",\n         \"immutableTraits\":\"ASSETS111:S|\",\n         \"mutableMetaTraits\": \"ASSETS121:S|num3\" + num,\n         \"immutableMetaTraits\": \"ASSETS131:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "9da0f9e2-96c0-490d-b868-c96a51371a66",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "7bec59f2-79ec-46d0-b7e5-4801bc949fad",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS131\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }        \n      });",
                  "err": {},
                  "uuid": "5047f1ce-755f-4aa2-ad96-29391e88c4fb",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Mint Asset: ",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mintAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"toID\": data.clasificationID1 + '|' + data.hashID1,\n         \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"mutableProperties\": \"ASSETS101:S|num1\" + num + \",burn:H|1\",\n         \"immutableProperties\": \"ASSETS111:S|abc\",\n         \"mutableMetaProperties\": \"ASSETS121:S|num3\" + num,\n         \"immutableMetaProperties\": \"ASSETS131:S|num4\" + num        \n       }\n     }\n    \n   var err,res = await chai.request(server)\n   .post(config.mintAssetPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {},
                  "uuid": "22d2c7d2-884a-4496-af8e-1a9419c5b7f8",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "cc805a7f-0cb0-423a-a138-e6d669217f99",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS131\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "16c4d316-8bba-4a25-8849-28e0105d380a",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Define Order: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.defineOrderType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n       \"mutableTraits\":\"ORDER_MUTABLE211:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n       \"immutableTraits\":\"ORDER_IMMUTABLE222:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n       \"mutableMetaTraits\": \"ORDER_MUTABLE_META233:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerOwnableSplit:D|100\"+\",expiry:H|\"+config.expiry+\",makerSplit:D|\"+config.makerownablesplit+\",takerSplit:D|,takerID:S|\",\n       \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META244:S|num4\" + num\n     }\n   }\n          \n var err,res = await chai.request(server)\n .post(config.defineOrderPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:6425:21)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "72f9222e-b36a-45f4-bf02-eba06bbc2aef",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "177b909c-e07b-4930-a93e-e35994680da8",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Classification: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n    .get(config.qClassification)\n\n    var list = res.body.result.value.classifications.value.list\n    list.forEach(function(value){\n       \n      if(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META244\"){\ndata.chainID = value.value.id.value.chainID.value.idString\ndata.clshashID = value.value.id.value.hashID.value.idString\n }        \n    });",
                  "err": {},
                  "uuid": "e9f7d23c-6f9f-468b-a898-e0f694b2835b",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Asset Make Order: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.makeOrderType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"makerOwnableID\":data.aclasificationID + '|' + data.ahashID,\n         \"takerOwnableID\": config.makerownableid,\n         \"expiresIn\":config.expiry,\n         \"makerOwnableSplit\":config.makerownablesplit,\n         \"mutableProperties\": \"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\" + num,\n         \"immutableProperties\": \"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n         \"mutableMetaProperties\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\"+config.exchangeRate+\",makerSplit:D|100\",\n         \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META24:S|num4\" + num        \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.makeOrderPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "SyntaxError: Unexpected token { in JSON at position 164",
                    "estack": "SyntaxError: Unexpected token { in JSON at position 164\n    at JSON.parse (<anonymous>)\n    at IncomingMessage.res.on (node_modules/superagent/lib/node/parsers/json.js:11:35)\n    at endReadableNT (_stream_readable.js:1145:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                    "diff": null
                  },
                  "uuid": "5ef8b802-6158-4ec2-a2c9-d08a1e0b5b2e",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "07372d5c-70c7-4bfb-bf6d-93e3a274a9cb",
                  "parentUUID": "844a286b-8b9c-4a67-b3f8-bc01f29e8c9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46a92ece-6d54-4809-bd94-b878a60cc0ee",
                "9cc62270-5a0f-43d1-a012-ae89de1c0587",
                "3567c170-d470-4fbe-b71d-5df905e519e4",
                "9da0f9e2-96c0-490d-b868-c96a51371a66",
                "7bec59f2-79ec-46d0-b7e5-4801bc949fad",
                "5047f1ce-755f-4aa2-ad96-29391e88c4fb",
                "22d2c7d2-884a-4496-af8e-1a9419c5b7f8",
                "cc805a7f-0cb0-423a-a138-e6d669217f99",
                "16c4d316-8bba-4a25-8849-28e0105d380a",
                "177b909c-e07b-4930-a93e-e35994680da8",
                "e9f7d23c-6f9f-468b-a898-e0f694b2835b",
                "07372d5c-70c7-4bfb-bf6d-93e3a274a9cb"
              ],
              "failures": [
                "72f9222e-b36a-45f4-bf02-eba06bbc2aef",
                "5ef8b802-6158-4ec2-a2c9-d08a1e0b5b2e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 168,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b5a6f85-1332-4ec4-bc7d-fb5afb18f2e2",
          "title": "Maintainer",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3f45eeef-a8f7-401b-83cd-cca5fb72d7e2",
              "title": "Deputize",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Maintainer Deputize \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "b39b01fc-931d-4b63-bfbc-c943f8e4344d",
                  "parentUUID": "3f45eeef-a8f7-401b-83cd-cca5fb72d7e2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Maintainer Deputize Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "b37559d2-6867-41cc-aefa-cf8dddce3315",
                  "parentUUID": "3f45eeef-a8f7-401b-83cd-cca5fb72d7e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Maintainer Deputize Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "8d6e9914-585b-4335-87f4-aa465e839dd3",
                  "parentUUID": "3f45eeef-a8f7-401b-83cd-cca5fb72d7e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Maintainer Deputize: ",
                  "fullTitle": "Maintainer Deputize Maintainer Deputize: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.deputizeType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"toID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"maintainedTraits\":\"maintainerTraits:S|maintainerTraits\",\n         \"addMaintainer\": true,\n         \"removeMaintainer\":false,\n         \"mutateMaintainer\":false     \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.deputizePath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {
                    "message": "Error: connect ECONNREFUSED 127.0.0.1:80",
                    "estack": "Error: connect ECONNREFUSED 127.0.0.1:80\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
                    "diff": null
                  },
                  "uuid": "14b81cf1-bb16-42f6-9ec6-969e7d2d849c",
                  "parentUUID": "3f45eeef-a8f7-401b-83cd-cca5fb72d7e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Maintainer Deputize Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "e58a4c52-a3e4-4bb2-85cb-096384ed362f",
                  "parentUUID": "3f45eeef-a8f7-401b-83cd-cca5fb72d7e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b37559d2-6867-41cc-aefa-cf8dddce3315",
                "8d6e9914-585b-4335-87f4-aa465e839dd3",
                "e58a4c52-a3e4-4bb2-85cb-096384ed362f"
              ],
              "failures": [
                "14b81cf1-bb16-42f6-9ec6-969e7d2d849c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}