{
  "stats": {
    "suites": 32,
    "tests": 143,
    "passes": 142,
    "pending": 0,
    "failures": 1,
    "start": "2020-09-14T09:29:00.748Z",
    "end": "2020-09-14T09:36:12.725Z",
    "duration": 431977,
    "testsRegistered": 143,
    "passPercent": 99.3006993006993,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "762265be-e167-489a-8fb6-d03082a65fcb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "933824d3-e46e-494a-8395-47727ee7c06d",
          "title": "Nub Tx",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Nub Tx \"before each\" hook",
              "timedOut": false,
              "duration": 3001,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
              "err": {},
              "uuid": "5bea37f3-a7fe-4ffa-8175-20e4e9f4c818",
              "parentUUID": "933824d3-e46e-494a-8395-47727ee7c06d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "nubTx: ",
              "fullTitle": "Nub Tx nubTx: ",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n        \"type\": config.nubType,\n         \"value\": {\n  \"baseReq\": {\n    \"from\": config.testAccountAddress,\n    \"chain_id\": config.chain_id\n  },\n  \"nubID\":config.nubID\n}\n        }\n        \n     \n      var err,res = await chai.request(server)\n      .post(config.nubPath)\n      .send(obj)\n  \n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n\n      txHash = res.body.txhash",
              "err": {},
              "uuid": "7a5f518d-47f8-479a-bbac-7eda034cc786",
              "parentUUID": "933824d3-e46e-494a-8395-47727ee7c06d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Query nubTx: ",
              "fullTitle": "Nub Tx Query nubTx: ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n      var err,res = await chai.request(server)\n     .get('/txs/'+txHash) \n     var data1 = res.body    \n      if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n        console.log(\"RETRY\")\n        callbackretry('failed')\n      }else{\n        callbackretry(null, 'true ')\n      }\n    }, function(err, response){\n      if(err){\n        console.log(\"failed to send txHash query\")\n      }else{\n        console.log(\"send txHash query successfull\")\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error') \n      }\n    })\n    console.log(\"txHash: \" + txHash)",
              "err": {},
              "uuid": "54dd9995-1d7b-44b6-af0a-c50b1620d2dc",
              "parentUUID": "933824d3-e46e-494a-8395-47727ee7c06d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a5f518d-47f8-479a-bbac-7eda034cc786",
            "54dd9995-1d7b-44b6-af0a-c50b1620d2dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 58,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bed329a8-c8dd-42a2-ae58-f5ef8d5fe83d",
          "title": "Identity",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "934046e7-2a66-4260-b611-6d5ba13dfff7",
              "title": "Issue Identity 1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "27e06dde-123f-434c-9cc9-d291fe1144d1",
                  "parentUUID": "934046e7-2a66-4260-b611-6d5ba13dfff7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Query Identity: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "1e77a1ff-b122-4616-ba64-497e0e99b7e0",
                  "parentUUID": "934046e7-2a66-4260-b611-6d5ba13dfff7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Define Identity: ",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineIdentityType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"mutableTraits1:S|num1\" + num,\n         \"immutableTraits\":\"immutableTraits1:S|\",\n         \"mutableMetaTraits\": \"mutableMetaTraits1:S|num3\" + num,\n         \"immutableMetaTraits\": \"immutableMetaTraits1:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineIdentityPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "17c79401-7d78-4c12-8930-68862da6af43",
                  "parentUUID": "934046e7-2a66-4260-b611-6d5ba13dfff7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 1 Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "5b0128fb-01fc-4ca7-8189-c6e06bd91e3a",
                  "parentUUID": "934046e7-2a66-4260-b611-6d5ba13dfff7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 1 Query Classification: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }\n\n      });",
                  "err": {},
                  "uuid": "f6e5b8bc-8398-493b-9e01-e441a2c97706",
                  "parentUUID": "934046e7-2a66-4260-b611-6d5ba13dfff7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Issue Identity: ",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.issuedentityType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"to\": config.testAccountAddress,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"mutableTraits1:S|num1\" + num,\n       \"immutableProperties\": \"immutableTraits1:S|\",\n       \"mutableMetaProperties\": \"mutableMetaTraits1:S|num3\" + num,\n       \"immutableMetaProperties\": \"immutableMetaTraits1:S|num4\" + num    \n     }\n   }   \n   \n  \n var err,res = await chai.request(server)\n .post(config.issueIdentityPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "484b856f-8e8e-48c1-a157-ad150cc68228",
                  "parentUUID": "934046e7-2a66-4260-b611-6d5ba13dfff7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 1 Query Tx: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "a3cdb5a9-cc3c-49e9-b18c-fa4606b289dc",
                  "parentUUID": "934046e7-2a66-4260-b611-6d5ba13dfff7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e77a1ff-b122-4616-ba64-497e0e99b7e0",
                "17c79401-7d78-4c12-8930-68862da6af43",
                "5b0128fb-01fc-4ca7-8189-c6e06bd91e3a",
                "f6e5b8bc-8398-493b-9e01-e441a2c97706",
                "484b856f-8e8e-48c1-a157-ad150cc68228",
                "a3cdb5a9-cc3c-49e9-b18c-fa4606b289dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 120,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab6e88ac-6943-45f6-91ce-628e3435d62c",
              "title": "Provision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "6625c93f-0ef6-4ef1-a027-2a39551a676b",
                  "parentUUID": "ab6e88ac-6943-45f6-91ce-628e3435d62c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Provision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "b421a3db-50a4-4574-802e-d6df49687aa3",
                  "parentUUID": "ab6e88ac-6943-45f6-91ce-628e3435d62c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Provision Key: ",
                  "fullTitle": "Identity Provision Key Provision Key: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.provisionKeyType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"to\": names1.address,\n         \"identityID\":data.clasificationID + '|' + data.hashID\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.provisionKeyPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "9d8d0ec3-8509-4d20-bd4d-4804bd1e4439",
                  "parentUUID": "ab6e88ac-6943-45f6-91ce-628e3435d62c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Provision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "09aec725-1109-45ba-a036-66e06cd051c0",
                  "parentUUID": "ab6e88ac-6943-45f6-91ce-628e3435d62c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b421a3db-50a4-4574-802e-d6df49687aa3",
                "9d8d0ec3-8509-4d20-bd4d-4804bd1e4439",
                "09aec725-1109-45ba-a036-66e06cd051c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb7c0e5f-2a1d-42b6-9ad4-e88b1ddec1e8",
              "title": "Unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "e3a1e512-fd0b-484a-9160-0af05de9fce9",
                  "parentUUID": "eb7c0e5f-2a1d-42b6-9ad4-e88b1ddec1e8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Unprovision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "690df64f-8109-4dc8-bee9-e97e032443b3",
                  "parentUUID": "eb7c0e5f-2a1d-42b6-9ad4-e88b1ddec1e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Unprovision Key: ",
                  "fullTitle": "Identity Unprovision Key Unprovision Key: ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.unprovisionKeyType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"to\": names1.address,\n         \"identityID\":data.clasificationID + '|' + data.hashID\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.unprovisionKeyPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "c5a52d48-33a9-4f1b-bb2f-4a02ed3f116d",
                  "parentUUID": "eb7c0e5f-2a1d-42b6-9ad4-e88b1ddec1e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Unprovision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "fac12afc-146c-4678-bb61-d3cf951f2aa6",
                  "parentUUID": "eb7c0e5f-2a1d-42b6-9ad4-e88b1ddec1e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "690df64f-8109-4dc8-bee9-e97e032443b3",
                "c5a52d48-33a9-4f1b-bb2f-4a02ed3f116d",
                "fac12afc-146c-4678-bb61-d3cf951f2aa6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29b12a7a-aa3e-4b12-a57c-6f08e1349986",
              "title": "Provision an unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision an unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "c044a972-6cc2-44fd-9c18-634e490268bd",
                  "parentUUID": "29b12a7a-aa3e-4b12-a57c-6f08e1349986",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Provision an unprovision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "98aeaff2-2aa5-4cc4-8648-b39f5d012771",
                  "parentUUID": "29b12a7a-aa3e-4b12-a57c-6f08e1349986",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Provision an unprovision Key: ",
                  "fullTitle": "Identity Provision an unprovision Key Provision an unprovision Key: ",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.provisionKeyType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"to\": names1.address,\n         \"identityID\":data.clasificationID + '|' + data.hashID\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.provisionKeyPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "9a2d557c-9553-46cc-b474-8ea92fa40d46",
                  "parentUUID": "29b12a7a-aa3e-4b12-a57c-6f08e1349986",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Provision an unprovision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "7ec6b4e5-2e16-4548-87f4-2e8e945e9bdd",
                  "parentUUID": "29b12a7a-aa3e-4b12-a57c-6f08e1349986",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98aeaff2-2aa5-4cc4-8648-b39f5d012771",
                "9a2d557c-9553-46cc-b474-8ea92fa40d46",
                "7ec6b4e5-2e16-4548-87f4-2e8e945e9bdd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f65969dd-46ab-4e4b-931b-26d6da3bef5b",
              "title": "Issue Identity 2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "c5f0df77-354a-4c49-8a98-f4076cbe1d42",
                  "parentUUID": "f65969dd-46ab-4e4b-931b-26d6da3bef5b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Query Identity: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "a8cf0cdc-4ae6-4b3b-8502-8de30d03d647",
                  "parentUUID": "f65969dd-46ab-4e4b-931b-26d6da3bef5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Define Identity: ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineIdentityType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"mutableTraits2:S|num1\" + num,\n         \"immutableTraits\":\"immutableTraits2:S|\",\n         \"mutableMetaTraits\": \"mutableMetaTraits2:S|num3\" + num,\n         \"immutableMetaTraits\": \"immutableMetaTraits2:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineIdentityPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "3a89895d-184f-4ea7-8069-dbdfe84472d0",
                  "parentUUID": "f65969dd-46ab-4e4b-931b-26d6da3bef5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 2 Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "e1209ec7-16f8-4cf6-a4ec-b39b2c4c1275",
                  "parentUUID": "f65969dd-46ab-4e4b-931b-26d6da3bef5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 2 Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }\n\n      });",
                  "err": {},
                  "uuid": "a9b4ebb0-e4c7-4d1e-af61-83b20c9b3bbb",
                  "parentUUID": "f65969dd-46ab-4e4b-931b-26d6da3bef5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 2: ",
                  "fullTitle": "Identity Issue Identity 2 Issue Identity 2: ",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.issuedentityType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"to\": config.testAccountAddress,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"mutableTraits2:S|num1\" + num,\n       \"immutableProperties\": \"immutableTraits2:S|\",\n       \"mutableMetaProperties\": \"mutableMetaTraits2:S|num3\" + num,\n       \"immutableMetaProperties\": \"immutableMetaTraits2:S|num4\" + num    \n     }\n   }   \n   \n  \n var err,res = await chai.request(server)\n .post(config.issueIdentityPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "455bbe8a-e00a-4f7d-b6ea-f898042067f5",
                  "parentUUID": "f65969dd-46ab-4e4b-931b-26d6da3bef5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 2 Query Tx: ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "1fa67b7e-c9d8-42b0-87fc-7cffc982566b",
                  "parentUUID": "f65969dd-46ab-4e4b-931b-26d6da3bef5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8cf0cdc-4ae6-4b3b-8502-8de30d03d647",
                "3a89895d-184f-4ea7-8069-dbdfe84472d0",
                "e1209ec7-16f8-4cf6-a4ec-b39b2c4c1275",
                "a9b4ebb0-e4c7-4d1e-af61-83b20c9b3bbb",
                "455bbe8a-e00a-4f7d-b6ea-f898042067f5",
                "1fa67b7e-c9d8-42b0-87fc-7cffc982566b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd1f9338-33c2-47cf-8f6a-6cb1acf1d107",
              "title": "Issue Identity 3",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 3 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "614c2c80-e435-4a29-b131-e336e32adbe6",
                  "parentUUID": "cd1f9338-33c2-47cf-8f6a-6cb1acf1d107",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID){\n   data.clasificationID = value.value.id.value.classificationID.value.idString\n   data.hashID = value.value.id.value.hashID.value.idString\n    \n }\n      \n      });",
                  "err": {},
                  "uuid": "c0a7ca9c-6d37-42b4-8d78-076b2fa00352",
                  "parentUUID": "cd1f9338-33c2-47cf-8f6a-6cb1acf1d107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Define Identity: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineIdentityType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"mutableTraits3:S|num1\" + num,\n         \"immutableTraits\":\"immutableTraits3:S|\",\n         \"mutableMetaTraits\": \"mutableMetaTraits3:S|num3\" + num,\n         \"immutableMetaTraits\": \"immutableMetaTraits3:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineIdentityPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "cb51ade9-94f0-43a7-ae9e-ad7520774e12",
                  "parentUUID": "cd1f9338-33c2-47cf-8f6a-6cb1acf1d107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 3 Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "658dfdbb-f1a8-4da4-b940-4d8b45a4eac7",
                  "parentUUID": "cd1f9338-33c2-47cf-8f6a-6cb1acf1d107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 3 Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){\n \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString\n   }\n\n      });",
                  "err": {},
                  "uuid": "790da0f5-b848-47a8-bc48-9c9f7c596621",
                  "parentUUID": "cd1f9338-33c2-47cf-8f6a-6cb1acf1d107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 3: ",
                  "fullTitle": "Identity Issue Identity 3 Issue Identity 3: ",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.issuedentityType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"to\": config.testAccountAddress,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"mutableTraits3:S|num1\" + num,\n       \"immutableProperties\": \"immutableTraits3:S|\",\n       \"mutableMetaProperties\": \"mutableMetaTraits3:S|num3\" + num,\n       \"immutableMetaProperties\": \"immutableMetaTraits3:S|num4\" + num    \n     }\n   }   \n   \n  \n var err,res = await chai.request(server)\n .post(config.issueIdentityPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "459958c9-84fe-480c-b581-915b5aff361c",
                  "parentUUID": "cd1f9338-33c2-47cf-8f6a-6cb1acf1d107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 3 Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "1ce9354a-f336-42a2-828a-a8ce58334f5d",
                  "parentUUID": "cd1f9338-33c2-47cf-8f6a-6cb1acf1d107",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0a7ca9c-6d37-42b4-8d78-076b2fa00352",
                "cb51ade9-94f0-43a7-ae9e-ad7520774e12",
                "658dfdbb-f1a8-4da4-b940-4d8b45a4eac7",
                "790da0f5-b848-47a8-bc48-9c9f7c596621",
                "459958c9-84fe-480c-b581-915b5aff361c",
                "1ce9354a-f336-42a2-828a-a8ce58334f5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56c5e5ae-82c5-4d56-9388-22bee68e3c5c",
          "title": "Assets",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "18211a69-c2af-43a7-b1ba-50e72f55fee8",
              "title": "Mint Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "01cea2ed-cd84-48f0-b591-af8efda906b9",
                  "parentUUID": "18211a69-c2af-43a7-b1ba-50e72f55fee8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "cd42c508-e206-4e1c-8573-08e8154bd280",
                  "parentUUID": "18211a69-c2af-43a7-b1ba-50e72f55fee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSET1:S|num1\" + num + \",burn:H|1\",\n         \"immutableTraits\":\"ASSET2:S|\",\n         \"mutableMetaTraits\": \"ASSET3:S|num3\" + num,\n         \"immutableMetaTraits\": \"ASSET4:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "012a9159-212a-44e7-bc2e-d6a6f5681728",
                  "parentUUID": "18211a69-c2af-43a7-b1ba-50e72f55fee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "1a40944f-3b5f-430a-8e09-a874d6b05bcf",
                  "parentUUID": "18211a69-c2af-43a7-b1ba-50e72f55fee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "72d5a4db-8c9c-4000-98cb-1b0fab91a7f3",
                  "parentUUID": "18211a69-c2af-43a7-b1ba-50e72f55fee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"ASSET1:S|num1\" + num + \",burn:H|1\",\n       \"immutableProperties\": \"ASSET2:S|num2\" + num,\n       \"mutableMetaProperties\": \"ASSET3:S|num3\" + num,\n       \"immutableMetaProperties\": \"ASSET4:S|num4\" + num\n   \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "b104f5ed-4518-480a-86f7-e33b8789de39",
                  "parentUUID": "18211a69-c2af-43a7-b1ba-50e72f55fee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "347512be-9cba-4b8e-8399-d04f9159a064",
                  "parentUUID": "18211a69-c2af-43a7-b1ba-50e72f55fee8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd42c508-e206-4e1c-8573-08e8154bd280",
                "012a9159-212a-44e7-bc2e-d6a6f5681728",
                "1a40944f-3b5f-430a-8e09-a874d6b05bcf",
                "72d5a4db-8c9c-4000-98cb-1b0fab91a7f3",
                "b104f5ed-4518-480a-86f7-e33b8789de39",
                "347512be-9cba-4b8e-8399-d04f9159a064"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5824b79c-d62a-4729-8dc8-d304c6551e5c",
              "title": "Mutate Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "a0031e75-462e-4817-a63e-8b40b4f4c12e",
                  "parentUUID": "5824b79c-d62a-4729-8dc8-d304c6551e5c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "ae835f13-6f71-4cdb-99c4-7a9f5424659b",
                  "parentUUID": "5824b79c-d62a-4729-8dc8-d304c6551e5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate Asset Query Asset: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "c87534e1-61df-49eb-a94e-80b09e291290",
                  "parentUUID": "5824b79c-d62a-4729-8dc8-d304c6551e5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mutate Asset Mutate Asset: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mutateAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID,\n       \"mutableProperties\":\"ASSET1:S|\",\n       \"mutableMetaProperties\": \"ASSET3:S|num3\" + num\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.mutateAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a94ca7ef-c240-4afa-904f-5e5def462ba5",
                  "parentUUID": "5824b79c-d62a-4729-8dc8-d304c6551e5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "38a8be8f-27a6-4017-8863-983dc775ea27",
                  "parentUUID": "5824b79c-d62a-4729-8dc8-d304c6551e5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae835f13-6f71-4cdb-99c4-7a9f5424659b",
                "c87534e1-61df-49eb-a94e-80b09e291290",
                "a94ca7ef-c240-4afa-904f-5e5def462ba5",
                "38a8be8f-27a6-4017-8863-983dc775ea27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1caa6e6d-2a67-4037-8db0-cb33447f3f43",
              "title": "Mint Asset with meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "8c363a49-fc1b-4b1e-a527-420b268220bb",
                  "parentUUID": "1caa6e6d-2a67-4037-8db0-cb33447f3f43",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "b4384c4a-8051-4617-8466-71d682467b23",
                  "parentUUID": "1caa6e6d-2a67-4037-8db0-cb33447f3f43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "e2f63f93-7df1-4d8a-91ab-5cd3de41a580",
                  "parentUUID": "1caa6e6d-2a67-4037-8db0-cb33447f3f43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset with meta properties: ",
                  "fullTitle": "Assets Mint Asset with meta properties Mint Asset with meta properties: ",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"ASSET1:S|num5\" + num + \",burn:H|1\",\n       \"immutableProperties\": \"ASSET2:S|num6\" + num,\n       \"mutableMetaProperties\": \"ASSET3:S|num7\" + num,\n       \"immutableMetaProperties\": \"ASSET4:S|num8\" + num\n   \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "790677d8-1c26-4112-863f-93f48aa707f9",
                  "parentUUID": "1caa6e6d-2a67-4037-8db0-cb33447f3f43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "4baa461d-277c-4d8a-9554-d54894d7aa78",
                  "parentUUID": "1caa6e6d-2a67-4037-8db0-cb33447f3f43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4384c4a-8051-4617-8466-71d682467b23",
                "e2f63f93-7df1-4d8a-91ab-5cd3de41a580",
                "790677d8-1c26-4112-863f-93f48aa707f9",
                "4baa461d-277c-4d8a-9554-d54894d7aa78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
              "title": "Mutate asset non meta properteies to meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "33f7b971-4bad-4709-8897-a625c96258ac",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "e6c1c494-7024-47a2-be98-c6380409d12a",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Define Asset: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSETS1:S|num1\" + num + \",burn:H|1\",\n         \"immutableTraits\":\"ASSETS2:S|\",\n         \"mutableMetaTraits\": \"ASSETS3:S|num3\" + num,\n         \"immutableMetaTraits\": \"ASSETS4:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "4d6157ba-1bd4-4218-acb8-7f0455ac92f9",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "ba51da65-5cb8-4129-a91a-918162861efa",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "095422a5-d36f-4d7b-969b-1266c19c61a7",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mintAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"toID\": data.clasificationID + '|' + data.hashID,\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"mutableProperties\": \"ASSETS1:S|num5\" + \",burn:H|1\",\n         \"immutableProperties\": \"ASSETS2:S|num6\" + num,\n         \"mutableMetaProperties\": \"ASSETS3:S|num7\" + num,\n         \"immutableMetaProperties\": \"ASSETS4:S|num8\" + num\n     \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.mintAssetPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0afbb33c-5b90-4d03-895c-e90efa01f2a7",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "08230440-b14e-401a-9b3e-995743177071",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Asset: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "187c3d9b-0a01-46a0-8be4-df9d3798ba4f",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Meta Reveal: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n   \"type\": config.metaRevealType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"metaFact\": \"S|num5\"\n     }\n   }\n    \n var err,res = await chai.request(server)\n .post(config.metaRevealPath)\n .send(obj)\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f2bf2489-998b-4b76-b84c-73f7caa4e6c0",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset non meta properties to meta properties: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Mutate Asset non meta properties to meta properties: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mutateAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID,\n       \"mutableProperties\":\"ASSETS1:S|\",\n       \"mutableMetaProperties\": \"ASSETS3:S|num3\" + num\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.mutateAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "727bab16-8845-4037-bc7d-ec8aba550359",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "910160b6-bf5d-406e-adbe-89205f0c788d",
                  "parentUUID": "a9f470a4-dc9a-4ff4-83b3-8cc336e53e6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6c1c494-7024-47a2-be98-c6380409d12a",
                "4d6157ba-1bd4-4218-acb8-7f0455ac92f9",
                "ba51da65-5cb8-4129-a91a-918162861efa",
                "095422a5-d36f-4d7b-969b-1266c19c61a7",
                "0afbb33c-5b90-4d03-895c-e90efa01f2a7",
                "08230440-b14e-401a-9b3e-995743177071",
                "187c3d9b-0a01-46a0-8be4-df9d3798ba4f",
                "f2bf2489-998b-4b76-b84c-73f7caa4e6c0",
                "727bab16-8845-4037-bc7d-ec8aba550359",
                "910160b6-bf5d-406e-adbe-89205f0c788d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 185,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "593e95a1-e33a-4b07-8de8-ecb5e4ebcbb5",
              "title": "Mint Asset with 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "507bfdb1-1d02-4031-b802-7fbb36bfcaeb",
                  "parentUUID": "593e95a1-e33a-4b07-8de8-ecb5e4ebcbb5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "e8dabcc8-e863-41dc-92e4-c145c347290d",
                  "parentUUID": "593e95a1-e33a-4b07-8de8-ecb5e4ebcbb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n         \"immutableTraits\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n         \"mutableMetaTraits\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n         \"immutableMetaTraits\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "aba1d6ff-0d30-4010-94aa-164faffea912",
                  "parentUUID": "593e95a1-e33a-4b07-8de8-ecb5e4ebcbb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "f3a96800-b6d1-4d36-bf78-7b861252eb86",
                  "parentUUID": "593e95a1-e33a-4b07-8de8-ecb5e4ebcbb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Classification: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETP4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "a9c152fd-55a2-4806-8460-2dc451b4975a",
                  "parentUUID": "593e95a1-e33a-4b07-8de8-ecb5e4ebcbb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n       \"immutableProperties\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n       \"mutableMetaProperties\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n       \"immutableMetaProperties\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n   \n     }\n   }\n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "d58a7499-087a-4147-8534-c5f3a8a40939",
                  "parentUUID": "593e95a1-e33a-4b07-8de8-ecb5e4ebcbb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "1cbb16e3-3002-422b-aa0d-b7157b329d4f",
                  "parentUUID": "593e95a1-e33a-4b07-8de8-ecb5e4ebcbb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8dabcc8-e863-41dc-92e4-c145c347290d",
                "aba1d6ff-0d30-4010-94aa-164faffea912",
                "f3a96800-b6d1-4d36-bf78-7b861252eb86",
                "a9c152fd-55a2-4806-8460-2dc451b4975a",
                "d58a7499-087a-4147-8534-c5f3a8a40939",
                "1cbb16e3-3002-422b-aa0d-b7157b329d4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4076718d-c45f-464a-8c61-c67237bff747",
              "title": "Add asset properties on mutation",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Add asset properties on mutation \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "f8651225-001c-4552-932d-e64f060fefef",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "16c51b91-4db1-4664-bb10-811057543268",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Define Asset: ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSET_A5:S|, burn:H|1\",\n         \"immutableTraits\": \"ASSET_A6:S|\",\n         \"mutableMetaTraits\": \"ASSET_A7:S|\",\n         \"immutableMetaTraits\": \"ASSET_A8:S|\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "1d9926e5-0d86-454e-8254-66e65f7f7b76",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "fac35ec3-46d1-4a78-a35e-3baf7a9ba64a",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Classification: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "d40d6c70-fd28-4ec6-8bb5-e304d4c95183",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Mint Asset: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mintAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"toID\": data.clasificationID + '|' + data.hashID,\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"mutableProperties\": \"ASSET_A5:S|A, burn:H|1\",\n         \"immutableProperties\": \"ASSET_A6:S|B\",\n         \"mutableMetaProperties\": \"ASSET_A7:S|C\",\n         \"immutableMetaProperties\": \"ASSET_A8:S|D\"\n     \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.mintAssetPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "55049f7c-1a1f-4007-bb6d-2f88b05437d4",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "e7e5ae14-d284-4520-8ef0-14b3c67b6687",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Asset: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "87da0cea-031c-4a16-be49-3bbbdf1c2797",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add asset properties on mutation: ",
                  "fullTitle": "Assets Add asset properties on mutation Add asset properties on mutation: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mutateAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID,\n       \"mutableProperties\": \"ASSET_A5:S|A\",\n       \"mutableMetaProperties\": \"ASSET_A7:S|C\"\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.mutateAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "17d25f61-5048-4eeb-841f-0c74e6eef35a",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "711f0489-754b-47dd-8cdc-ccb6c65e4ed7",
                  "parentUUID": "4076718d-c45f-464a-8c61-c67237bff747",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16c51b91-4db1-4664-bb10-811057543268",
                "1d9926e5-0d86-454e-8254-66e65f7f7b76",
                "fac35ec3-46d1-4a78-a35e-3baf7a9ba64a",
                "d40d6c70-fd28-4ec6-8bb5-e304d4c95183",
                "55049f7c-1a1f-4007-bb6d-2f88b05437d4",
                "e7e5ae14-d284-4520-8ef0-14b3c67b6687",
                "87da0cea-031c-4a16-be49-3bbbdf1c2797",
                "17d25f61-5048-4eeb-841f-0c74e6eef35a",
                "711f0489-754b-47dd-8cdc-ccb6c65e4ed7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 143,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "12592b49-8619-4d19-b446-05544296bab9",
              "title": "Mint Asset with more than 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with more than 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "5a9372b3-f46c-4f02-acdd-8e896f208442",
                  "parentUUID": "12592b49-8619-4d19-b446-05544296bab9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "f9dec365-1c49-4a41-9b8f-96283efde608",
                  "parentUUID": "12592b49-8619-4d19-b446-05544296bab9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n         \"immutableTraits\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n         \"mutableMetaTraits\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n         \"immutableMetaTraits\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "79da4228-3a2e-4801-a286-c8cde288a793",
                  "parentUUID": "12592b49-8619-4d19-b446-05544296bab9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "85cf254a-6361-4d62-a405-51a145be405c",
                  "parentUUID": "12592b49-8619-4d19-b446-05544296bab9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Classification: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"P4\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "3ccb67e0-9fa9-44a7-8e14-d8d0eb0c1b76",
                  "parentUUID": "12592b49-8619-4d19-b446-05544296bab9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset with more than 22 properties: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Mint Asset with more than 22 properties: ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n       \"immutableProperties\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n       \"mutableMetaProperties\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n       \"immutableMetaProperties\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n   \n     }\n   }\n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "13ac310d-e4b3-413b-8e17-fcb2c0922fae",
                  "parentUUID": "12592b49-8619-4d19-b446-05544296bab9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "798c2806-bae0-4ed5-8612-98e1b15454a4",
                  "parentUUID": "12592b49-8619-4d19-b446-05544296bab9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9dec365-1c49-4a41-9b8f-96283efde608",
                "79da4228-3a2e-4801-a286-c8cde288a793",
                "85cf254a-6361-4d62-a405-51a145be405c",
                "3ccb67e0-9fa9-44a7-8e14-d8d0eb0c1b76",
                "13ac310d-e4b3-413b-8e17-fcb2c0922fae",
                "798c2806-bae0-4ed5-8612-98e1b15454a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75d8e303-0b98-4ee8-b037-29297a57ea3e",
              "title": "Mutate Asset to add more that 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "87c9e0f1-e40e-4526-b131-8a10024e39ae",
                  "parentUUID": "75d8e303-0b98-4ee8-b037-29297a57ea3e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "3bafb4a6-8b39-4067-a322-eee2b4846131",
                  "parentUUID": "75d8e303-0b98-4ee8-b037-29297a57ea3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "23fe7a95-fec4-49cd-83cc-62c9c5f7c443",
                  "parentUUID": "75d8e303-0b98-4ee8-b037-29297a57ea3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset to add more that 22 properties: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Mutate Asset to add more that 22 properties: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mutateAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID,\n       \"mutableProperties\": \"ASSET_A5:S|A,ASSET_A5:S|B,ASSET_A5:S|C,ASSET_A5:S|D,ASSET_A5:S|E,ASSET_A5:S|F,ASSET_A5:S|G,ASSET_A5:S|H,ASSET_A5:S|I,ASSET_A5:S|J,ASSET_A5:S|K,ASSET_A5:S|L,ASSET_A5:S|M,ASSET_A5:S|N\",\n       \"mutableMetaProperties\": \"ASSET_A7:S|O,ASSET_A7:S|P,ASSET_A7:S|Q,ASSET_A7:S|R,ASSET_A7:S|S,ASSET_A7:S|T,ASSET_A7:S|U,ASSET_A7:S|V,ASSET_A7:S|W\"\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.mutateAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "1aa9382c-82b1-4d3f-b813-c3a06349adaf",
                  "parentUUID": "75d8e303-0b98-4ee8-b037-29297a57ea3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "2fbec341-fad8-4e8c-8b9f-a369cc512fdf",
                  "parentUUID": "75d8e303-0b98-4ee8-b037-29297a57ea3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bafb4a6-8b39-4067-a322-eee2b4846131",
                "23fe7a95-fec4-49cd-83cc-62c9c5f7c443",
                "1aa9382c-82b1-4d3f-b813-c3a06349adaf",
                "2fbec341-fad8-4e8c-8b9f-a369cc512fdf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 62,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a7e2aa8-d991-4213-bcfb-b0e1b54bc0f4",
              "title": "Burn Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Burn Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "0f2a4e63-3d9c-416c-bf1e-6db6d6318cda",
                  "parentUUID": "0a7e2aa8-d991-4213-bcfb-b0e1b54bc0f4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Burn Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "268b0ea9-1e00-4d6a-98e8-dd6465088bc4",
                  "parentUUID": "0a7e2aa8-d991-4213-bcfb-b0e1b54bc0f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Burn Asset Query Asset: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_P4\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "b88da5b3-b507-4f50-b64c-e8474fc25c0e",
                  "parentUUID": "0a7e2aa8-d991-4213-bcfb-b0e1b54bc0f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Burn Asset Meta Reveal: ",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n   \"type\": config.metaRevealType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"metaFact\": \"H|1\"\n     }\n   }\n    \n var err,res = await chai.request(server)\n .post(config.metaRevealPath)\n .send(obj)\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "fb2a3975-02bb-4a8d-a818-f69091b10044",
                  "parentUUID": "0a7e2aa8-d991-4213-bcfb-b0e1b54bc0f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Burn Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n.get('/txs/'+txHash) \nvar data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "31a6f812-d5cb-4e2b-a1ff-3dcefd9fe2a4",
                  "parentUUID": "0a7e2aa8-d991-4213-bcfb-b0e1b54bc0f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Burn Asset Burn Asset",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.burnAssetType,\n     \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"assetID\": data.aclasificationID + '|' + data.ahashID\n     }\n   }\n   \n   \n var err,res = await chai.request(server)\n .post(config.burnAssetPath)\n .send(obj)\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n txHash = res.body.txhash",
                  "err": {},
                  "uuid": "c20aa4a6-7973-405d-828d-d262651e1299",
                  "parentUUID": "0a7e2aa8-d991-4213-bcfb-b0e1b54bc0f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Burn Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "5a063d51-7289-49e1-ad29-88fbd6113236",
                  "parentUUID": "0a7e2aa8-d991-4213-bcfb-b0e1b54bc0f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "268b0ea9-1e00-4d6a-98e8-dd6465088bc4",
                "b88da5b3-b507-4f50-b64c-e8474fc25c0e",
                "fb2a3975-02bb-4a8d-a818-f69091b10044",
                "31a6f812-d5cb-4e2b-a1ff-3dcefd9fe2a4",
                "c20aa4a6-7973-405d-828d-d262651e1299",
                "5a063d51-7289-49e1-ad29-88fbd6113236"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
              "title": "Mint Asset with burn greater than forseeable block height",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "2b6de1fc-bccd-4894-9281-b9b8b493db27",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.iclasificationID = value.value.id.value.classificationID.value.idString\n    data.ihashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "17c334ee-6676-426d-b24c-d137f6cad757",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Define Asset: ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID + '|' + data.ihashID,\n         \"mutableTraits\":\"AssetA:S|num1\" + num + \",burn:H|1\",\n         \"immutableTraits\":\"AssetB:S|\",\n         \"mutableMetaTraits\": \"AssetC:S|num3\" + num,\n         \"immutableMetaTraits\": \"AssetD:S|num4\" + num\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "eeadcc13-fe69-431b-a392-62b69afdd778",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "7e662194-4916-4568-8590-49c7062c9168",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "6cccab8d-c2bf-4cf7-8ec3-f3e77304a7a7",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mint Asset: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.iclasificationID + '|' + data.ihashID,\n       \"fromID\": data.iclasificationID + '|' + data.ihashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"AssetA:S|num1\" + num + \",burn:H|100000000\",\n       \"immutableProperties\": \"AssetB:S|num2\" + num,\n       \"mutableMetaProperties\": \"AssetC:S|num3\" + num,\n       \"immutableMetaProperties\": \"AssetD:S|num4\" + num\n   \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "3ece90ba-32f3-4cfa-886d-22e56fdd0d85",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "d16b4a66-48b7-4906-9e08-7a62bcd583d5",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "8c6d21d6-d0d2-405a-a228-5b589d7ca035",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"H|100000000\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "63aca090-1f56-4839-b38d-8a9ecec15d19",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "ff76655d-5359-40b1-a5a6-8fab359a7b06",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.burnAssetType,\n       \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID + '|' + data.ihashID,\n         \"assetID\": data.aclasificationID + '|' + data.ahashID\n       }\n     }\n     \n     \n   var err,res = await chai.request(server)\n   .post(config.burnAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "5e0635e2-099c-4b01-8f21-f063c284f147",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "873ca76f-272a-4b00-bc41-979a274d55af",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"H|100\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b1a6ccee-fcc2-491a-9baa-20e385c7fff9",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "a29af58e-f5b7-4221-9832-e44c16181c26",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mutate Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mutateAssetType,\n       \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID + '|' + data.ihashID,\n         \"assetID\": data.aclasificationID + '|' + data.ahashID,\n         \"mutableProperties\":\"AssetA:S|ABCd,burn:H|100\",\n         \"mutableMetaProperties\": \"AssetC:S|num3\" + num\n       }\n     }\n     \n     \n   var err,res = await chai.request(server)\n   .post(config.mutateAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "fcaea545-323d-4893-be46-6e27c7a4564f",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "29da46d7-be93-49b8-be58-f4cea59f3113",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n     \n     let obj = {\n       \"type\": config.burnAssetType,\n         \"value\": {\n           \"baseReq\": {\n             \"from\": config.testAccountAddress,\n             \"chain_id\": config.chain_id\n           },\n           \"fromID\": data.iclasificationID + '|' + data.ihashID,\n           \"assetID\": data.aclasificationID + '|' + data.ahashID\n         }\n       }\n       \n       \n     var err,res = await chai.request(server)\n     .post(config.burnAssetPath)\n     .send(obj)\n \n     res.should.have.status(200);\n     res.body.should.be.a('object');\n     expect(res.body.txhash).to.not.equal(null)\n     expect(res.body.txhash).to.not.equal('')\n \n     txHash = res.body.txhash",
                  "err": {},
                  "uuid": "ba06573c-7dd1-44bb-9e4c-b28aae10c66a",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "1569cfca-c49b-4276-84e8-d4d16d31b8f5",
                  "parentUUID": "7d7b6c71-67c3-44f6-86cf-75dc86d72812",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17c334ee-6676-426d-b24c-d137f6cad757",
                "eeadcc13-fe69-431b-a392-62b69afdd778",
                "7e662194-4916-4568-8590-49c7062c9168",
                "6cccab8d-c2bf-4cf7-8ec3-f3e77304a7a7",
                "3ece90ba-32f3-4cfa-886d-22e56fdd0d85",
                "d16b4a66-48b7-4906-9e08-7a62bcd583d5",
                "8c6d21d6-d0d2-405a-a228-5b589d7ca035",
                "63aca090-1f56-4839-b38d-8a9ecec15d19",
                "ff76655d-5359-40b1-a5a6-8fab359a7b06",
                "5e0635e2-099c-4b01-8f21-f063c284f147",
                "873ca76f-272a-4b00-bc41-979a274d55af",
                "b1a6ccee-fcc2-491a-9baa-20e385c7fff9",
                "a29af58e-f5b7-4221-9832-e44c16181c26",
                "fcaea545-323d-4893-be46-6e27c7a4564f",
                "29da46d7-be93-49b8-be58-f4cea59f3113",
                "ba06573c-7dd1-44bb-9e4c-b28aae10c66a",
                "1569cfca-c49b-4276-84e8-d4d16d31b8f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 301,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5026bf55-5a4f-416c-adae-f1ce66323193",
              "title": "Mint Asset with extra properties when mutable trait is not defined",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "9129bdce-51e5-48ef-a4e1-f3bfd5400ca0",
                  "parentUUID": "5026bf55-5a4f-416c-adae-f1ce66323193",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qIdentity)\n  \nvar list = res.body.result.value.identities.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n    data.clasificationID = value.value.id.value.classificationID.value.idString\n    data.hashID = value.value.id.value.hashID.value.idString    \n  }\n\n});",
                  "err": {},
                  "uuid": "eb1225bf-e78c-4d53-b648-9b3dbce050f9",
                  "parentUUID": "5026bf55-5a4f-416c-adae-f1ce66323193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Define Asset: ",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.clasificationID + '|' + data.hashID,\n         \"mutableTraits\":\"ASSETA1:S|,burn:H|1\",\n         \"immutableTraits\": \"ASSETA2:S|G\",\n         \"mutableMetaTraits\": \"ASSETA3:S|L\",\n         \"immutableMetaTraits\": \"ASSETA4:S|Q\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "540b51c8-0363-41ff-b5c0-79a2e91804ca",
                  "parentUUID": "5026bf55-5a4f-416c-adae-f1ce66323193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "6449da70-f2d1-4de9-96a7-f937f25d98d1",
                  "parentUUID": "5026bf55-5a4f-416c-adae-f1ce66323193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Classification: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "877acf15-725f-4f3e-8bd6-9f4e1bcac70e",
                  "parentUUID": "5026bf55-5a4f-416c-adae-f1ce66323193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Mint Asset: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.mintAssetType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"toID\": data.clasificationID + '|' + data.hashID,\n       \"fromID\": data.clasificationID + '|' + data.hashID,\n       \"classificationID\": data.chainID + '.' + data.clshashID,\n       \"mutableProperties\": \"ASSETA1:S|A,burn:H|1,ASSETA1:S|B,ASSETA1:S|C\",\n       \"immutableProperties\": \"ASSETA2:S|G\",\n       \"mutableMetaProperties\": \"ASSETA3:S|L\",\n       \"immutableMetaProperties\": \"ASSETA4:S|Q\"      \n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.mintAssetPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "cbdd497e-fa55-4885-b23c-6558958e3f61",
                  "parentUUID": "5026bf55-5a4f-416c-adae-f1ce66323193",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "0a1cad16-dcdd-4833-86db-8f9c82b54fbc",
                  "parentUUID": "5026bf55-5a4f-416c-adae-f1ce66323193",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb1225bf-e78c-4d53-b648-9b3dbce050f9",
                "540b51c8-0363-41ff-b5c0-79a2e91804ca",
                "6449da70-f2d1-4de9-96a7-f937f25d98d1",
                "877acf15-725f-4f3e-8bd6-9f4e1bcac70e",
                "cbdd497e-fa55-4885-b23c-6558958e3f61",
                "0a1cad16-dcdd-4833-86db-8f9c82b54fbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 113,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7f3f9ad9-e36d-41ec-9673-90e53cd7e7dc",
          "title": "Splits",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3182044b-227a-41f8-9f79-68fc6570d9de",
              "title": "send split of an asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "49224306-553b-4537-b1a6-a8d9c487c94f",
                  "parentUUID": "3182044b-227a-41f8-9f79-68fc6570d9de",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Splits send split of an asset Query Identity 1: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "93734563-fb24-4084-90cd-296c904bc6ad",
                  "parentUUID": "3182044b-227a-41f8-9f79-68fc6570d9de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Splits send split of an asset Query Identity 2: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n   data.iclasificationID2 = value.value.id.value.classificationID.value.idString\n   data.ihashID2 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "c533500f-351e-4147-a3f9-3b7e542130f0",
                  "parentUUID": "3182044b-227a-41f8-9f79-68fc6570d9de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits send split of an asset Query Asset: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \" \"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "f38f33c4-a357-4029-8e6d-6eb04e1560a6",
                  "parentUUID": "3182044b-227a-41f8-9f79-68fc6570d9de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an asset: ",
                  "fullTitle": "Splits send split of an asset Send split of an asset: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.sendSplitType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n       \"toID\": data.iclasificationID2 + '|' + data.ihashID2,\n       \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n       \"split\": config.splitval      \n     }\n   }\n \n   console.log(\"Send split of an asset obj : \" + JSON.stringify(obj))\n var err,res = await chai.request(server)\n .post(config.sendSplitPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "1a819998-3747-48f2-9666-947b7866a821",
                  "parentUUID": "3182044b-227a-41f8-9f79-68fc6570d9de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits send split of an asset Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "f73829e4-8862-4b70-be4b-e1c4620ef9f7",
                  "parentUUID": "3182044b-227a-41f8-9f79-68fc6570d9de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93734563-fb24-4084-90cd-296c904bc6ad",
                "c533500f-351e-4147-a3f9-3b7e542130f0",
                "f38f33c4-a357-4029-8e6d-6eb04e1560a6",
                "1a819998-3747-48f2-9666-947b7866a821",
                "f73829e4-8862-4b70-be4b-e1c4620ef9f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 74,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ecfe498-f734-48ba-9239-e996ab067400",
              "title": "Unwrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Unwrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "eb7e5052-0507-4708-99de-e175288c2fd1",
                  "parentUUID": "1ecfe498-f734-48ba-9239-e996ab067400",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Splits Unwrap a coin Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "794507b4-1303-428b-af39-36ff7e5a38de",
                  "parentUUID": "1ecfe498-f734-48ba-9239-e996ab067400",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits Unwrap a coin Query Asset: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "f24324ce-e2b7-427f-936e-8d84d80afdc6",
                  "parentUUID": "1ecfe498-f734-48ba-9239-e996ab067400",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Unwrap a coin: ",
                  "fullTitle": "Splits Unwrap a coin Unwrap a coin: ",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n   \"type\": config.unwrapCoinType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n       \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n       \"split\": config.splitval      \n     }\n   }\n \n   console.log(\"Send split of an coin obj : \" + JSON.stringify(obj))\n var err,res = await chai.request(server)\n .post(config.unwrapCoinPath)\n .send(obj)\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "155c31dd-2bc4-4979-b85d-4ea59e1ce1b2",
                  "parentUUID": "1ecfe498-f734-48ba-9239-e996ab067400",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits Unwrap a coin Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "f010f683-b0d8-430b-919d-5b32433e4de1",
                  "parentUUID": "1ecfe498-f734-48ba-9239-e996ab067400",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "794507b4-1303-428b-af39-36ff7e5a38de",
                "f24324ce-e2b7-427f-936e-8d84d80afdc6",
                "155c31dd-2bc4-4979-b85d-4ea59e1ce1b2",
                "f010f683-b0d8-430b-919d-5b32433e4de1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 87,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f59d4098-299b-435c-9e62-e1afe4836686",
              "title": "Wrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Wrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "6bab9936-621a-40f9-9a25-1b23ea9b4ab4",
                  "parentUUID": "f59d4098-299b-435c-9e62-e1afe4836686",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Splits Wrap a coin Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "f9729eb1-ff55-425e-b216-852acb75ebb2",
                  "parentUUID": "f59d4098-299b-435c-9e62-e1afe4836686",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Splits Wrap a coin Wrap a coin: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n   \"type\": config.unwrapCoinType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n       \"coins\": config.coins\n     }\n   }\n \n  \n var err,res = await chai.request(server)\n .post(config.unwrapCoinPath)\n .send(obj)\n console.log(\"wrap a coing obj: \" + JSON.stringify(obj))\n  \n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/keys.js:3501:21)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "30a66b91-1c5b-4a96-8e17-278ad9657476",
                  "parentUUID": "f59d4098-299b-435c-9e62-e1afe4836686",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits Wrap a coin Query Tx: ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "c0e95a0a-2152-4ed6-9d4b-885af64001cb",
                  "parentUUID": "f59d4098-299b-435c-9e62-e1afe4836686",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9729eb1-ff55-425e-b216-852acb75ebb2",
                "c0e95a0a-2152-4ed6-9d4b-885af64001cb"
              ],
              "failures": [
                "30a66b91-1c5b-4a96-8e17-278ad9657476"
              ],
              "pending": [],
              "skipped": [],
              "duration": 30,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57fb9ac4-ea47-447e-aacd-c1572742a69c",
              "title": "send split of an coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "3b6973f2-fad3-4fcb-92c6-b5abc2384ddd",
                  "parentUUID": "57fb9ac4-ea47-447e-aacd-c1572742a69c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Splits send split of an coin Query Identity 1: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "541faa8b-ba11-47ff-a09c-c683cf9d3b35",
                  "parentUUID": "57fb9ac4-ea47-447e-aacd-c1572742a69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Splits send split of an coin Query Identity 2: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\"){\n   data.iclasificationID2 = value.value.id.value.classificationID.value.idString\n   data.ihashID2 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "b562b1c1-9326-42c3-830a-339b50b88f48",
                  "parentUUID": "57fb9ac4-ea47-447e-aacd-c1572742a69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits send split of an coin Query Asset: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qAsset)\n\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function(value){\n    \nif(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\"){\n  data.aclasificationID = value.value.id.value.classificationID.value.idString\n  data.ahashID = value.value.id.value.hashID.value.idString    \n}        \n      });",
                  "err": {},
                  "uuid": "077aa0d1-d1b9-438d-86f5-ac743c8442e6",
                  "parentUUID": "57fb9ac4-ea47-447e-aacd-c1572742a69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an coin: ",
                  "fullTitle": "Splits send split of an coin Send split of an coin: ",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n \n let obj = {\n   \"type\": config.sendSplitType,\n    \"value\": {\n       \"baseReq\": {\n         \"from\": config.testAccountAddress,\n         \"chain_id\": config.chain_id\n       },\n       \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n       \"toID\": data.iclasificationID2 + '|' + data.ihashID2,\n       \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n       \"split\": config.splitval      \n     }\n   }\n   console.log(\"Send split of an coin obj : \" + JSON.stringify(obj))\n  \n var err,res = await chai.request(server)\n .post(config.sendSplitPath)\n .send(obj)\n  \n console.log(\"send split of a coin obj: \" + JSON.stringify(obj))\n res.should.have.status(200);\n res.body.should.be.a('object');\n expect(res.body.txhash).to.not.equal(null)\n expect(res.body.txhash).to.not.equal('')\n  \ntxHash = res.body.txhash",
                  "err": {},
                  "uuid": "a19be68c-f53e-43f5-bf55-c06498995962",
                  "parentUUID": "57fb9ac4-ea47-447e-aacd-c1572742a69c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits send split of an coin Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "a1199e9a-bb92-46b4-9542-c7b0a2ad9a47",
                  "parentUUID": "57fb9ac4-ea47-447e-aacd-c1572742a69c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "541faa8b-ba11-47ff-a09c-c683cf9d3b35",
                "b562b1c1-9326-42c3-830a-339b50b88f48",
                "077aa0d1-d1b9-438d-86f5-ac743c8442e6",
                "a19be68c-f53e-43f5-bf55-c06498995962",
                "a1199e9a-bb92-46b4-9542-c7b0a2ad9a47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "25552ed8-962d-4b08-b13c-84b85fe8b038",
          "title": "Metas",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
          "file": "/test/keys.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
              "title": "Reveal a meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "ef8260b3-8ad4-4b12-9c16-2648413a667c",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Metas Reveal a meta Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qIdentity)\n  \n      var list = res.body.result.value.identities.value.list\n      list.forEach(function(value){\n    \n if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\"){\n   data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n   data.ihashID1 = value.value.id.value.hashID.value.idString    \n }      \n      });",
                  "err": {},
                  "uuid": "7739061b-f190-4b30-98c1-32be7e696e23",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Metas Reveal a meta Define Asset: ",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.defineAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n         \"mutableTraits\":\"ASSET_PA:S|AAA, burn:H|4\",\n         \"immutableTraits\": \"ASSET_PB:D|0.344\",\n         \"mutableMetaTraits\": \"ASSET_PC:I|ID\",\n         \"immutableMetaTraits\": \"ASSET_PD:S|A\"\n       }\n     }\n     \n    \n   var err,res = await chai.request(server)\n   .post(config.defineAssetPath)\n   .send(obj)\n  \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "863127bf-4879-483b-b394-22d6817fa1c0",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "ed5cd37d-1ed0-4f80-9054-fcf82b6a1c68",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Metas Reveal a meta Query Classification: ",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n      .get(config.qClassification)\n  \n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function(value){     \n    \nif(value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\"){\n  data.chainID = value.value.id.value.chainID.value.idString\n  data.clshashID = value.value.id.value.hashID.value.idString   \n}      \n      });",
                  "err": {},
                  "uuid": "0e17906b-6b98-476e-be51-e70c3978d2ba",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Metas Reveal a meta Mint Asset: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0,10000)\n   \n   let obj = {\n     \"type\": config.mintAssetType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"toID\": data.iclasificationID1 + '|' + data.ihashID1,\n         \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n         \"classificationID\": data.chainID + '.' + data.clshashID,\n         \"mutableProperties\": \"ASSET_PA:S|AAA, burn:H|4\",\n         \"immutableProperties\": \"ASSET_PB:D|0.344\",\n         \"mutableMetaProperties\": \"ASSET_PC:I|ID\",\n         \"immutableMetaProperties\": \"ASSET_PD:S|A\"\n     \n       }\n     }\n   \n    \n   var err,res = await chai.request(server)\n   .post(config.mintAssetPath)\n   .send(obj)\n \n   res.should.have.status(200);\n   res.body.should.be.a('object');\n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n \n  txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6258ae1a-4f48-46ce-9055-45589263b82d",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "c59d9b65-3867-47fd-a577-650738ff0a0f",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Metas Reveal a meta Query Asset: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err,res = await chai.request(server)\n.get(config.qAsset)\n  \nvar list = res.body.result.value.assets.value.list\nlist.forEach(function(value){\n      \n  if(value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\"){\n    data.aclasificationID = value.value.id.value.classificationID.value.idString\n    data.ahashID = value.value.id.value.hashID.value.idString    \n  }        \n});",
                  "err": {},
                  "uuid": "c25d0510-fa6f-4455-bf64-b74ceec3ba9b",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"S|AAA\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "8987a419-2c3f-4fca-9c67-f9c54e4da8b0",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n.get('/txs/'+txHash) \nvar data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "907132cb-5384-495c-9077-c76ebe474644",
                  "parentUUID": "8255a0ec-6c2a-4255-8db8-257046bd58ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7739061b-f190-4b30-98c1-32be7e696e23",
                "863127bf-4879-483b-b394-22d6817fa1c0",
                "ed5cd37d-1ed0-4f80-9054-fcf82b6a1c68",
                "0e17906b-6b98-476e-be51-e70c3978d2ba",
                "6258ae1a-4f48-46ce-9055-45589263b82d",
                "c59d9b65-3867-47fd-a577-650738ff0a0f",
                "c25d0510-fa6f-4455-bf64-b74ceec3ba9b",
                "8987a419-2c3f-4fca-9c67-f9c54e4da8b0",
                "907132cb-5384-495c-9077-c76ebe474644"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "186c04ed-2588-4e30-a53e-3c6955573da1",
              "title": "Reveal a meta of id type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of id type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "c5a298ff-b7d2-4d48-9147-2fd51e6c5c82",
                  "parentUUID": "186c04ed-2588-4e30-a53e-3c6955573da1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of id type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"I|ID\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "60476252-b23d-4a31-b6d3-a98f3face993",
                  "parentUUID": "186c04ed-2588-4e30-a53e-3c6955573da1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of id type Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "718621cc-d116-4832-aeb1-1ba57c046edc",
                  "parentUUID": "186c04ed-2588-4e30-a53e-3c6955573da1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60476252-b23d-4a31-b6d3-a98f3face993",
                "718621cc-d116-4832-aeb1-1ba57c046edc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 33,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1e29ba4-40dc-4586-90fb-835815f0a9d1",
              "title": "Reveal a meta of string type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of string type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "8723c976-ef59-42eb-8ba3-5c80512ef12b",
                  "parentUUID": "c1e29ba4-40dc-4586-90fb-835815f0a9d1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of string type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"S|AAA\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f3d962bc-cd2a-4f89-b65a-fab145d8ec7b",
                  "parentUUID": "c1e29ba4-40dc-4586-90fb-835815f0a9d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of string type Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "e37c9b11-af33-4083-86f6-bfc9d6e0789d",
                  "parentUUID": "c1e29ba4-40dc-4586-90fb-835815f0a9d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3d962bc-cd2a-4f89-b65a-fab145d8ec7b",
                "e37c9b11-af33-4083-86f6-bfc9d6e0789d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a08cbfcd-e3ea-49fd-b302-cd5c07e52bde",
              "title": "Reveal a meta of dec type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of dec type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "20393c8c-d3d5-46fa-b956-dad4874c7945",
                  "parentUUID": "a08cbfcd-e3ea-49fd-b302-cd5c07e52bde",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of dec type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"D|0.344\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "19f57b51-b7d6-427f-a14e-ed1330175639",
                  "parentUUID": "a08cbfcd-e3ea-49fd-b302-cd5c07e52bde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of dec type Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "ca0abc7a-ff50-4b7e-a0c3-0750f8e26ec4",
                  "parentUUID": "a08cbfcd-e3ea-49fd-b302-cd5c07e52bde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19f57b51-b7d6-427f-a14e-ed1330175639",
                "ca0abc7a-ff50-4b7e-a0c3-0750f8e26ec4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ad3f57e-3747-4930-bd7a-bfe279fc217d",
              "title": "Reveal a meta of height type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of height type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "9dbe4f8b-bddf-45ea-85a9-c6e15cd7e9e3",
                  "parentUUID": "7ad3f57e-3747-4930-bd7a-bfe279fc217d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of height type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"H|4\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "8b0bd4aa-a9b0-4333-b39b-3a6d603760a3",
                  "parentUUID": "7ad3f57e-3747-4930-bd7a-bfe279fc217d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of height type Query Tx: ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "22eda0bf-535d-4c40-a8f0-98ceb09a5db6",
                  "parentUUID": "7ad3f57e-3747-4930-bd7a-bfe279fc217d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b0bd4aa-a9b0-4333-b39b-3a6d603760a3",
                "22eda0bf-535d-4c40-a8f0-98ceb09a5db6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "708bcf04-2930-4433-a57f-69ed2ce22dd1",
              "title": "Reveal an already revealed meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/tests/mocha-awesome/test/keys.js",
              "file": "/test/keys.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal an already revealed meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function() {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "28b507c3-f795-4b7a-b26a-e351330be859",
                  "parentUUID": "708bcf04-2930-4433-a57f-69ed2ce22dd1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal an already revealed meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n     \"type\": config.metaRevealType,\n      \"value\": {\n         \"baseReq\": {\n           \"from\": config.testAccountAddress,\n           \"chain_id\": config.chain_id\n         },\n         \"metaFact\": \"H|4\"\n       }\n     }\n      \n   var err,res = await chai.request(server)\n   .post(config.metaRevealPath)\n   .send(obj)\n  \n   expect(res.body.txhash).to.not.equal(null)\n   expect(res.body.txhash).to.not.equal('')\n  \n   txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6c57eeec-07aa-4664-b33b-b300071a25c9",
                  "parentUUID": "708bcf04-2930-4433-a57f-69ed2ce22dd1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal an already revealed meta Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "async.retry({ times:config.retry_count, interval:config.timeout}, async function (callbackretry){\n  var err,res = await chai.request(server)\n .get('/txs/'+txHash) \n var data1 = res.body    \n  if((data1.indexOf('error') != -1) || (data1.indexOf('failed') != -1)){\n    console.log(\"RETRY\")\n    callbackretry('failed')\n  }else{\n    callbackretry(null, 'true ')\n  }\n}, function(err, response){\n  if(err){\n    console.log(\"failed to send txHash query\")\n  }else{\n    console.log(\"send txHash query successfull\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error') \n  }\n})\nconsole.log(\"txHash: \" + txHash)",
                  "err": {},
                  "uuid": "b5feabc8-da35-492c-b07c-4d4e87b4cf7a",
                  "parentUUID": "708bcf04-2930-4433-a57f-69ed2ce22dd1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c57eeec-07aa-4664-b33b-b300071a25c9",
                "b5feabc8-da35-492c-b07c-4d4e87b4cf7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}