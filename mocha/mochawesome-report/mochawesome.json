{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2020-09-17T08:30:40.099Z",
    "end": "2020-09-17T08:30:46.144Z",
    "duration": 6045,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "28b8ee4f-51ad-4c68-8e33-604e6eadec48",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "577c43a1-6b5f-4c35-a323-6c0d50b290ae",
          "title": "Nub Tx",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Nub Tx \"before each\" hook",
              "timedOut": false,
              "duration": 3003,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
              "err": {},
              "uuid": "3501b021-cb34-46cf-86c6-0ff0957fbeca",
              "parentUUID": "577c43a1-6b5f-4c35-a323-6c0d50b290ae",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "nubTx: ",
              "fullTitle": "Nub Tx nubTx: ",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n      \"type\": config.nubType,\n      \"value\": {\n        \"baseReq\": {\n          \"from\": config.testAccountAddress,\n          \"chain_id\": config.chain_id\n        },\n        \"nubID\": config.nubID\n      }\n    }\n    var err, res = await chai.request(server)\n      .post(config.nubPath)\n      .send(obj)\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.txhash).to.not.equal(null)\n    expect(res.body.txhash).to.not.equal('')\n    txHash = res.body.txhash",
              "err": {},
              "uuid": "31be9a64-28ec-4580-b99a-3cc287cc7002",
              "parentUUID": "577c43a1-6b5f-4c35-a323-6c0d50b290ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Query nubTx: ",
              "fullTitle": "Nub Tx Query nubTx: ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// var err, res = await chai.request(server)\n    //   .get('/txs/' + txHash)\n    // var data1 = JSON.stringify(res.body)\n    //var data1 = new String(res.body)\n    var capture = ''\n   \n    async.retry({ times: config.retry_count, interval: config.timeout }, async function (callbackretry) {\n      var err, res = await chai.request(server)\n      .get('/txs/' + txHash)\n      var data1 = JSON.stringify(res.body)\n      capture = res.body\n      console.log(\"data1: \" + data1)\n      console.log(\"data1.indexOf('error'): \" + data1.indexOf('error'))\n      console.log(\"data1.indexOf('failed'): \" + data1.indexOf('failed'))\n      if ((data1.indexOf('error') != -1)) {\n        console.log(\"err: \" )\n        callbackretry('failed')\n      } else {\n        //continue\n        console.log(\"no err: \" )\n        callbackretry(null)\n      }\n    }, function (err, response) {\n      if (err) {\n        console.log(\"err: \" + err)\n        console.log(\"response: \" + response)\n        console.log(\"failed to send txHash query\")\n      } else {\n        //expect(capture.raw_log).to.not.contain('failed')\n        //expect(capture).to.not.contain('error')\n        assert.notInclude(capture.raw_log, 'failed', \"string doesn't contain substring\");\n        assert.notInclude(capture, 'contain', \"string doesn't contain substring\");\n      }\n    })",
              "err": {},
              "uuid": "fa755565-e462-467c-b858-e13dd930fbfe",
              "parentUUID": "577c43a1-6b5f-4c35-a323-6c0d50b290ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31be9a64-28ec-4580-b99a-3cc287cc7002",
            "fa755565-e462-467c-b858-e13dd930fbfe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}