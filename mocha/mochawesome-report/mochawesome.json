{
  "stats": {
    "suites": 48,
    "tests": 248,
    "passes": 247,
    "pending": 0,
    "failures": 1,
    "start": "2020-09-21T07:06:24.257Z",
    "end": "2020-09-21T07:18:54.879Z",
    "duration": 750622,
    "testsRegistered": 248,
    "passPercent": 99.59677419354838,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e9fdebe7-afec-4a99-b58d-1c1c98e4c3d4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "18480de2-eaf1-4d16-aa96-a60d87bb7167",
          "title": "Account Creation, Sign and Broadcast for User1",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 \"before each\" hook",
              "timedOut": false,
              "duration": 3000,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
              "err": {},
              "uuid": "b8dfbbfd-2663-4645-ac36-4cfb11f274d3",
              "parentUUID": "18480de2-eaf1-4d16-aa96-a60d87bb7167",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should create an account for: e9c9be50f544dba74fef94c007dde2d1",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 it should create an account for: e9c9be50f544dba74fef94c007dde2d1",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let name = {\n      name: name1\n    }\n    var err, res = await chai.request(server)\n      .post(config.keysAdd)\n      .send(name)\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.result.success).to.be.true\n    expect(res.body.result.keyOutput.address).to.not.equal(null)\n    expect(res.body.result.keyOutput.address).to.not.equal('')\n    names1.address = res.body.result.keyOutput.address",
              "err": {},
              "uuid": "f8ebebf9-0c3d-4973-b6e5-ecc271c3a69a",
              "parentUUID": "18480de2-eaf1-4d16-aa96-a60d87bb7167",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "e9c9be50f544dba74fef94c007dde2d1 should be able to signTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 e9c9be50f544dba74fef94c007dde2d1 should be able to signTx ",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n      \"baseReq\": {\n        \"from\": config.testAccountAddress,\n        \"chain_id\": config.chain_id\n      },\n      \"type\": \"cosmos-sdk/StdTx\",\n      \"value\": {\n        \"msg\": [\n          {\n            \"type\": \"cosmos-sdk/MsgSend\",\n            \"value\": {\n              \"from_address\": config.testAccountAddress,\n              \"to_address\": names1.address,\n              \"amount\": [\n                {\n                  \"denom\": \"stake\",\n                  \"amount\": \"1000\"\n                }\n              ]\n            }\n          }\n        ],\n        \"fee\": {\n          \"amount\": [],\n          \"gas\": \"200000\"\n        },\n        \"signatures\": null,\n        \"memo\": \"\"\n      }\n    }\n    var err, res = await chai.request(server)\n      .post(config.signTx)\n      .send(obj)\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.result.success).to.be.true\n    names1.typekey = res.body.result.tx.signatures[0].pub_key.type\n    names1.value = res.body.result.tx.signatures[0].pub_key.value\n    names1.signature = res.body.result.tx.signatures[0].signature",
              "err": {},
              "uuid": "17b71952-e0b6-4ddc-bc81-c388cb3b46d8",
              "parentUUID": "18480de2-eaf1-4d16-aa96-a60d87bb7167",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "e9c9be50f544dba74fef94c007dde2d1 should be able to broadcastTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 e9c9be50f544dba74fef94c007dde2d1 should be able to broadcastTx ",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n      \"tx\": {\n        \"msg\": [\n          {\n            \"type\": \"cosmos-sdk/MsgSend\",\n            \"value\": {\n              \"from_address\": config.testAccountAddress,\n              \"to_address\": names1.address,\n              \"amount\": [\n                {\n                  \"denom\": \"stake\",\n                  \"amount\": \"1000\"\n                }\n              ]\n            }\n          }\n        ],\n        \"fee\": {\n          \"amount\": [],\n          \"gas\": \"200000\"\n        },\n        \"signatures\": [\n          {\n            \"pub_key\": {\n              \"type\": names1.typekey,\n              \"value\": names1.value\n            },\n            \"signature\": names1.signature\n          }\n        ],\n        \"memo\": \"\"\n      },\n      \"mode\": \"sync\"\n    }\n    var err, res = await chai.request(server)\n      .post(config.broadcastTx)\n      .send(obj)\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.txhash).to.not.equal(null)\n    expect(res.body.txhash).to.not.equal('')\n    var hash = res.body.txhash\n    var err, res = await chai.request(server)\n      .get('/txs/' + hash)",
              "err": {},
              "uuid": "2c97ff35-0a5e-4d09-b12b-865aceaf9431",
              "parentUUID": "18480de2-eaf1-4d16-aa96-a60d87bb7167",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8ebebf9-0c3d-4973-b6e5-ecc271c3a69a",
            "17b71952-e0b6-4ddc-bc81-c388cb3b46d8",
            "2c97ff35-0a5e-4d09-b12b-865aceaf9431"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 229,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b004cbc-f67c-490d-bf7c-c55151cd699a",
          "title": "Account Creation, Sign and Broadcast for User2",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 \"before each\" hook",
              "timedOut": false,
              "duration": 3003,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
              "err": {},
              "uuid": "22b49f97-1270-4822-bdfa-7dfc37f70164",
              "parentUUID": "9b004cbc-f67c-490d-bf7c-c55151cd699a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should create an account for: 2a9380d87e8eb6cfa3f49caeb7e2b207",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 it should create an account for: 2a9380d87e8eb6cfa3f49caeb7e2b207",
              "timedOut": false,
              "duration": 130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let name = {\n      name: name2\n    }\n    var err, res = await chai.request('http://localhost:1317')\n      .post(config.keysAdd)\n      .send(name)\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.result.success).to.be.true\n    expect(res.body.result.keyOutput.address).to.not.equal(null)\n    expect(res.body.result.keyOutput.address).to.not.equal('')\n    names2.address = res.body.result.keyOutput.address",
              "err": {},
              "uuid": "c261d8e0-374d-4f94-b4a8-ca6af021bcd2",
              "parentUUID": "9b004cbc-f67c-490d-bf7c-c55151cd699a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2a9380d87e8eb6cfa3f49caeb7e2b207 should be able to signTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 2a9380d87e8eb6cfa3f49caeb7e2b207 should be able to signTx ",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n      \"baseReq\": {\n        \"from\": config.testAccountAddress,\n        \"chain_id\": config.chain_id\n      },\n      \"type\": \"cosmos-sdk/StdTx\",\n      \"value\": {\n        \"msg\": [\n          {\n            \"type\": \"cosmos-sdk/MsgSend\",\n            \"value\": {\n              \"from_address\": config.testAccountAddress,\n              \"to_address\": names2.address,\n              \"amount\": [\n                {\n                  \"denom\": \"stake\",\n                  \"amount\": \"1000\"\n                }\n              ]\n            }\n          }\n        ],\n        \"fee\": {\n          \"amount\": [],\n          \"gas\": \"200000\"\n        },\n        \"signatures\": null,\n        \"memo\": \"\"\n      }\n    }\n    var err, res = await chai.request(server)\n      .post(config.signTx)\n      .send(obj)\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.result.success).to.be.true\n    names2.typekey = res.body.result.tx.signatures[0].pub_key.type\n    names2.value = res.body.result.tx.signatures[0].pub_key.value\n    names2.signature = res.body.result.tx.signatures[0].signature",
              "err": {},
              "uuid": "2c80b19e-9f5a-44ca-9e05-c0e331d6564b",
              "parentUUID": "9b004cbc-f67c-490d-bf7c-c55151cd699a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2a9380d87e8eb6cfa3f49caeb7e2b207 should be able to broadcastTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 2a9380d87e8eb6cfa3f49caeb7e2b207 should be able to broadcastTx ",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n      \"tx\": {\n        \"msg\": [\n          {\n            \"type\": \"cosmos-sdk/MsgSend\",\n            \"value\": {\n              \"from_address\": config.testAccountAddress,\n              \"to_address\": names2.address,\n              \"amount\": [\n                {\n                  \"denom\": \"stake\",\n                  \"amount\": \"1000\"\n                }\n              ]\n            }\n          }\n        ],\n        \"fee\": {\n          \"amount\": [],\n          \"gas\": \"200000\"\n        },\n        \"signatures\": [\n          {\n            \"pub_key\": {\n              \"type\": names2.typekey,\n              \"value\": names2.value\n            },\n            \"signature\": names2.signature\n          }\n        ],\n        \"memo\": \"\"\n      },\n      \"mode\": \"sync\"\n    }\n    var err, res = await chai.request(server)\n      .post(config.broadcastTx)\n      .send(obj)\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.txhash).to.not.equal(null)\n    expect(res.body.txhash).to.not.equal('')\n    var hash = res.body.txhash\n    var err, res = await chai.request(server)\n      .get('/txs/' + hash)",
              "err": {},
              "uuid": "726b8c92-ac06-4540-856b-e12bb65eaea2",
              "parentUUID": "9b004cbc-f67c-490d-bf7c-c55151cd699a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c261d8e0-374d-4f94-b4a8-ca6af021bcd2",
            "2c80b19e-9f5a-44ca-9e05-c0e331d6564b",
            "726b8c92-ac06-4540-856b-e12bb65eaea2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 191,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "09eb1f5d-1f09-4ba8-ae95-7a1b21c543d1",
          "title": "Nub Tx",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Nub Tx \"before each\" hook",
              "timedOut": false,
              "duration": 3004,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
              "err": {},
              "uuid": "4c4bbe73-cbe2-4732-805b-b37266c31c78",
              "parentUUID": "09eb1f5d-1f09-4ba8-ae95-7a1b21c543d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "nubTx: ",
              "fullTitle": "Nub Tx nubTx: ",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n      \"type\": config.nubType,\n      \"value\": {\n        \"baseReq\": {\n          \"from\": config.testAccountAddress,\n          \"chain_id\": config.chain_id\n        },\n        \"nubID\": config.nubID\n      }\n    }\n    var err, res = await chai.request(server)\n      .post(config.nubPath)\n      .send(obj)\n    res.should.have.status(200);\n    res.body.should.be.a('object');\n    expect(res.body.txhash).to.not.equal(null)\n    expect(res.body.txhash).to.not.equal('')\n    txHash = res.body.txhash",
              "err": {},
              "uuid": "7971b3d8-c25f-40d0-9228-1168375d6cef",
              "parentUUID": "09eb1f5d-1f09-4ba8-ae95-7a1b21c543d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Query Tx: ",
              "fullTitle": "Nub Tx Query Tx: ",
              "timedOut": false,
              "duration": 26,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n    callbackretry(null, 'true')\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
              "err": {
                "message": "AssertionError: object tested must be an array, a map, an object, a set, a string, or a weakset, but object given",
                "estack": "AssertionError: object tested must be an array, a map, an object, a set, a string, or a weakset, but object given\n    at /home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js:387:33\n    at args (node_modules/async/dist/async.js:3811:21)\n    at /home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js:380:9\n    at retryAttempt (node_modules/async/dist/async.js:3804:13)\n    at Object.retry (node_modules/async/dist/async.js:3816:9)\n    at Context.it (test/testCases.js:374:11)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                "diff": null
              },
              "uuid": "5c771c2e-b9ce-4f30-b1ce-7c6f0faa3289",
              "parentUUID": "09eb1f5d-1f09-4ba8-ae95-7a1b21c543d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7971b3d8-c25f-40d0-9228-1168375d6cef"
          ],
          "failures": [
            "5c771c2e-b9ce-4f30-b1ce-7c6f0faa3289"
          ],
          "pending": [],
          "skipped": [],
          "duration": 64,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "692e3249-b626-40f9-b475-473819e43b57",
          "title": "Identity",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "96dee8e6-e9e6-448e-876d-569dbaad109c",
              "title": "Issue Identity 1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "1f93873d-15ca-4128-b73b-d19d0aac72e0",
                  "parentUUID": "96dee8e6-e9e6-448e-876d-569dbaad109c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "ff000858-ae72-4e8b-95f7-eb40b8bc3d14",
                  "parentUUID": "96dee8e6-e9e6-448e-876d-569dbaad109c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Define Identity: ",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineIdentityType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"mutableTraits1:S|num1\",\n          \"immutableTraits\": \"immutableTraits1:S|\",\n          \"mutableMetaTraits\": \"mutableMetaTraits1:S|num3\",\n          \"immutableMetaTraits\": \"immutableMetaTraits1:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineIdentityPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "da14e7dc-8291-4a6a-a236-86df2cff227c",
                  "parentUUID": "96dee8e6-e9e6-448e-876d-569dbaad109c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 1 Query Tx: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n    callbackretry(null, 'true')\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "9cb79064-657e-4dd7-a005-50024d844f6a",
                  "parentUUID": "96dee8e6-e9e6-448e-876d-569dbaad109c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 1 Query Classification: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "d641d7fe-6fe3-4ddc-b7ef-238b9eb2808c",
                  "parentUUID": "96dee8e6-e9e6-448e-876d-569dbaad109c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Issue Identity: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.issuedentityType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"to\": config.testAccountAddress,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"mutableTraits1:S|num1\",\n          \"immutableProperties\": \"immutableTraits1:S|\",\n          \"mutableMetaProperties\": \"mutableMetaTraits1:S|num3\",\n          \"immutableMetaProperties\": \"immutableMetaTraits1:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.issueIdentityPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "380d8021-ceaa-4c7f-be22-3d555f6e4117",
                  "parentUUID": "96dee8e6-e9e6-448e-876d-569dbaad109c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 1 Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "f1e43391-406b-47ae-af9d-468a3c41cb59",
                  "parentUUID": "96dee8e6-e9e6-448e-876d-569dbaad109c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff000858-ae72-4e8b-95f7-eb40b8bc3d14",
                "da14e7dc-8291-4a6a-a236-86df2cff227c",
                "9cb79064-657e-4dd7-a005-50024d844f6a",
                "d641d7fe-6fe3-4ddc-b7ef-238b9eb2808c",
                "380d8021-ceaa-4c7f-be22-3d555f6e4117",
                "f1e43391-406b-47ae-af9d-468a3c41cb59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "63738124-26e8-4f53-9004-6f03f5d94b5a",
              "title": "Provision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "867f967e-0658-4c93-bb27-2cedebe413d2",
                  "parentUUID": "63738124-26e8-4f53-9004-6f03f5d94b5a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Provision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "bab64dce-bc78-42d9-9099-45c3a883dd6e",
                  "parentUUID": "63738124-26e8-4f53-9004-6f03f5d94b5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Provision Key: ",
                  "fullTitle": "Identity Provision Key Provision Key: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.provisionKeyType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"to\": names1.address,\n          \"identityID\": data.clasificationID + '|' + data.hashID\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.provisionKeyPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "4b261630-09f9-46c2-a2b3-26ff93b80736",
                  "parentUUID": "63738124-26e8-4f53-9004-6f03f5d94b5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Provision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "ab027aca-4c7d-4f4f-85b7-174770edce9d",
                  "parentUUID": "63738124-26e8-4f53-9004-6f03f5d94b5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bab64dce-bc78-42d9-9099-45c3a883dd6e",
                "4b261630-09f9-46c2-a2b3-26ff93b80736",
                "ab027aca-4c7d-4f4f-85b7-174770edce9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 69,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a9d07d4-08f7-4fde-b221-bef523d3a109",
              "title": "Unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "8cf3981e-d20d-407b-82f9-0ddf8919e6a8",
                  "parentUUID": "2a9d07d4-08f7-4fde-b221-bef523d3a109",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Unprovision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "42171884-41c9-43d8-b113-e37f56fdc3ee",
                  "parentUUID": "2a9d07d4-08f7-4fde-b221-bef523d3a109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Unprovision Key: ",
                  "fullTitle": "Identity Unprovision Key Unprovision Key: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.unprovisionKeyType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"to\": names1.address,\n          \"identityID\": data.clasificationID + '|' + data.hashID\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.unprovisionKeyPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "4768a57e-5b04-48e2-9dfd-0156c190ce28",
                  "parentUUID": "2a9d07d4-08f7-4fde-b221-bef523d3a109",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Unprovision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "39b4b08e-572c-47dc-94ce-a85ee69d1810",
                  "parentUUID": "2a9d07d4-08f7-4fde-b221-bef523d3a109",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42171884-41c9-43d8-b113-e37f56fdc3ee",
                "4768a57e-5b04-48e2-9dfd-0156c190ce28",
                "39b4b08e-572c-47dc-94ce-a85ee69d1810"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "42309a18-4754-418f-8e0b-781282f76f9c",
              "title": "Provision an unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision an unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "f507c102-c39f-48d4-9671-68d0600271b4",
                  "parentUUID": "42309a18-4754-418f-8e0b-781282f76f9c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Provision an unprovision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "92702495-6932-4b46-bdb0-e849d7aaf1f3",
                  "parentUUID": "42309a18-4754-418f-8e0b-781282f76f9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Provision an unprovision Key: ",
                  "fullTitle": "Identity Provision an unprovision Key Provision an unprovision Key: ",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.provisionKeyType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"to\": names1.address,\n          \"identityID\": data.clasificationID + '|' + data.hashID\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.provisionKeyPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "d2520d20-c729-416a-971f-a9a1ee55ee92",
                  "parentUUID": "42309a18-4754-418f-8e0b-781282f76f9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Provision an unprovision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "d4400f63-c1bb-49e3-93b4-d0f84d862e81",
                  "parentUUID": "42309a18-4754-418f-8e0b-781282f76f9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92702495-6932-4b46-bdb0-e849d7aaf1f3",
                "d2520d20-c729-416a-971f-a9a1ee55ee92",
                "d4400f63-c1bb-49e3-93b4-d0f84d862e81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "033dfa15-e701-465e-bc33-541a3f33ace0",
              "title": "Issue Identity 2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "cf6dee9a-9df2-44b2-bcc6-3c2cb41d8001",
                  "parentUUID": "033dfa15-e701-465e-bc33-541a3f33ace0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Query Identity: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "79dfccd4-df68-436b-9c1c-3ac32be3fd11",
                  "parentUUID": "033dfa15-e701-465e-bc33-541a3f33ace0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Define Identity: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineIdentityType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"mutableTraits2:S|num1\",\n          \"immutableTraits\": \"immutableTraits2:S|\",\n          \"mutableMetaTraits\": \"mutableMetaTraits2:S|num3\",\n          \"immutableMetaTraits\": \"immutableMetaTraits2:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineIdentityPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "420d8a29-1c75-42fe-9e55-f4e568ebfdfc",
                  "parentUUID": "033dfa15-e701-465e-bc33-541a3f33ace0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 2 Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "96bbc871-8345-4668-b158-8b43b3fa1e53",
                  "parentUUID": "033dfa15-e701-465e-bc33-541a3f33ace0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 2 Query Classification: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "24206ac8-7f16-46e5-95d2-cbf885d9ee9a",
                  "parentUUID": "033dfa15-e701-465e-bc33-541a3f33ace0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 2: ",
                  "fullTitle": "Identity Issue Identity 2 Issue Identity 2: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.issuedentityType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"to\": config.testAccountAddress,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"mutableTraits2:S|num1\",\n          \"immutableProperties\": \"immutableTraits2:S|\",\n          \"mutableMetaProperties\": \"mutableMetaTraits2:S|num3\",\n          \"immutableMetaProperties\": \"immutableMetaTraits2:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.issueIdentityPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "777d3f27-0fa5-4bf9-865d-75365bb25053",
                  "parentUUID": "033dfa15-e701-465e-bc33-541a3f33ace0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 2 Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "95fda8bd-fe56-4514-a8ed-b5aaf809bd17",
                  "parentUUID": "033dfa15-e701-465e-bc33-541a3f33ace0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79dfccd4-df68-436b-9c1c-3ac32be3fd11",
                "420d8a29-1c75-42fe-9e55-f4e568ebfdfc",
                "96bbc871-8345-4668-b158-8b43b3fa1e53",
                "24206ac8-7f16-46e5-95d2-cbf885d9ee9a",
                "777d3f27-0fa5-4bf9-865d-75365bb25053",
                "95fda8bd-fe56-4514-a8ed-b5aaf809bd17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e6add1e2-951a-4d7e-bd68-489069deb3c6",
              "title": "Issue Identity 3",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 3 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "940e7373-ee24-4f84-b6cc-cf1f35607c9c",
                  "parentUUID": "e6add1e2-951a-4d7e-bd68-489069deb3c6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "e287c555-f26c-42c0-9941-b0d274be279d",
                  "parentUUID": "e6add1e2-951a-4d7e-bd68-489069deb3c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Define Identity: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineIdentityType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"mutableTraits3:S|num1\",\n          \"immutableTraits\": \"immutableTraits3:S|\",\n          \"mutableMetaTraits\": \"mutableMetaTraits3:S|num3\",\n          \"immutableMetaTraits\": \"immutableMetaTraits3:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineIdentityPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "8f06c201-132c-477a-8904-41a2982b44c5",
                  "parentUUID": "e6add1e2-951a-4d7e-bd68-489069deb3c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 3 Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "10ed8f4c-305d-42b3-aac6-df769af8861e",
                  "parentUUID": "e6add1e2-951a-4d7e-bd68-489069deb3c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 3 Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "0b72b3c6-cd51-4a33-949d-797a8b930dd7",
                  "parentUUID": "e6add1e2-951a-4d7e-bd68-489069deb3c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 3: ",
                  "fullTitle": "Identity Issue Identity 3 Issue Identity 3: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.issuedentityType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"to\": config.testAccountAddress,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"mutableTraits3:S|num1\",\n          \"immutableProperties\": \"immutableTraits3:S|\",\n          \"mutableMetaProperties\": \"mutableMetaTraits3:S|num3\",\n          \"immutableMetaProperties\": \"immutableMetaTraits3:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.issueIdentityPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "863a0895-413a-4c7c-9f6f-62933339b2d8",
                  "parentUUID": "e6add1e2-951a-4d7e-bd68-489069deb3c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 3 Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "e07afafa-2425-47fd-83df-4843336dbbaf",
                  "parentUUID": "e6add1e2-951a-4d7e-bd68-489069deb3c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e287c555-f26c-42c0-9941-b0d274be279d",
                "8f06c201-132c-477a-8904-41a2982b44c5",
                "10ed8f4c-305d-42b3-aac6-df769af8861e",
                "0b72b3c6-cd51-4a33-949d-797a8b930dd7",
                "863a0895-413a-4c7c-9f6f-62933339b2d8",
                "e07afafa-2425-47fd-83df-4843336dbbaf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 151,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "000e2999-6d4c-4420-8d71-d4eeb2b8db95",
          "title": "Assets",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cdecd49e-eb43-408d-87ff-8dbbe1008298",
              "title": "Mint Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "af915ae1-074c-447b-93e6-37eeb95c8541",
                  "parentUUID": "cdecd49e-eb43-408d-87ff-8dbbe1008298",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "294ddd98-b5b6-4e55-9864-a6589e0b241d",
                  "parentUUID": "cdecd49e-eb43-408d-87ff-8dbbe1008298",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ASSET1:S|num1\" + \",burn:H|1\",\n          \"immutableTraits\": \"ASSET2:S|\",\n          \"mutableMetaTraits\": \"ASSET3:S|num3\",\n          \"immutableMetaTraits\": \"ASSET4:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "835b179b-f012-41fb-a148-5ca9f71b64b0",
                  "parentUUID": "cdecd49e-eb43-408d-87ff-8dbbe1008298",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "596df8b3-d59a-4631-ab52-70c082ac895b",
                  "parentUUID": "cdecd49e-eb43-408d-87ff-8dbbe1008298",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "269a8fbe-a5cb-446b-bb9c-216ddb4e1161",
                  "parentUUID": "cdecd49e-eb43-408d-87ff-8dbbe1008298",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID + '|' + data.hashID,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSET1:S|num1\" + \",burn:H|1\",\n          \"immutableProperties\": \"ASSET2:S|num2\",\n          \"mutableMetaProperties\": \"ASSET3:S|num3\",\n          \"immutableMetaProperties\": \"ASSET4:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "89323c51-0458-45e6-98c0-a8979556446a",
                  "parentUUID": "cdecd49e-eb43-408d-87ff-8dbbe1008298",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "8d1e2517-4b53-4e8d-86df-71e274099c42",
                  "parentUUID": "cdecd49e-eb43-408d-87ff-8dbbe1008298",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "294ddd98-b5b6-4e55-9864-a6589e0b241d",
                "835b179b-f012-41fb-a148-5ca9f71b64b0",
                "596df8b3-d59a-4631-ab52-70c082ac895b",
                "269a8fbe-a5cb-446b-bb9c-216ddb4e1161",
                "89323c51-0458-45e6-98c0-a8979556446a",
                "8d1e2517-4b53-4e8d-86df-71e274099c42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 147,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3fbef85-69cf-49bf-9a6d-9bba529e48d7",
              "title": "Mutate Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "0990b73e-b6c0-4a83-8fa6-eed971c41893",
                  "parentUUID": "f3fbef85-69cf-49bf-9a6d-9bba529e48d7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID = value.value.id.value.classificationID.value.idString\n          data.ihashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "a0249abd-2fd6-455d-b49a-a9708f659991",
                  "parentUUID": "f3fbef85-69cf-49bf-9a6d-9bba529e48d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate Asset Query Asset: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "a9d5ef32-06dc-4e87-aab4-6b44ed531520",
                  "parentUUID": "f3fbef85-69cf-49bf-9a6d-9bba529e48d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mutate Asset Mutate Asset: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mutateAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"assetID\": data.aclasificationID + '|' + data.ahashID,\n          \"mutableProperties\": \"ASSET1:S|\",\n          \"mutableMetaProperties\": \"ASSET3:S|num3\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mutateAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "34a0cb9d-4b89-42c6-9b3a-f512d055ef51",
                  "parentUUID": "f3fbef85-69cf-49bf-9a6d-9bba529e48d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "f1100fbc-d602-4b19-971e-2f2195bdf6be",
                  "parentUUID": "f3fbef85-69cf-49bf-9a6d-9bba529e48d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0249abd-2fd6-455d-b49a-a9708f659991",
                "a9d5ef32-06dc-4e87-aab4-6b44ed531520",
                "34a0cb9d-4b89-42c6-9b3a-f512d055ef51",
                "f1100fbc-d602-4b19-971e-2f2195bdf6be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "422e0d66-00cb-4cf8-838b-32531f2c762d",
              "title": "Mint Asset with meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "53554d6f-b558-4480-86c5-140d7fbc46e5",
                  "parentUUID": "422e0d66-00cb-4cf8-838b-32531f2c762d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "b80f359a-f3c3-474c-b48c-fbc5469dc972",
                  "parentUUID": "422e0d66-00cb-4cf8-838b-32531f2c762d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "57af112b-26b4-43a2-b9b5-112500126e7d",
                  "parentUUID": "422e0d66-00cb-4cf8-838b-32531f2c762d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset with meta properties: ",
                  "fullTitle": "Assets Mint Asset with meta properties Mint Asset with meta properties: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID + '|' + data.hashID,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSET1:S|num5\" + \",burn:H|1\",\n          \"immutableProperties\": \"ASSET2:S|num6\",\n          \"mutableMetaProperties\": \"ASSET3:S|num7\",\n          \"immutableMetaProperties\": \"ASSET4:S|num8\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "831b1c7e-010e-448f-b587-dd00fcd98afa",
                  "parentUUID": "422e0d66-00cb-4cf8-838b-32531f2c762d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "fb43206a-b091-496a-9a73-878bb8cb6953",
                  "parentUUID": "422e0d66-00cb-4cf8-838b-32531f2c762d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b80f359a-f3c3-474c-b48c-fbc5469dc972",
                "57af112b-26b4-43a2-b9b5-112500126e7d",
                "831b1c7e-010e-448f-b587-dd00fcd98afa",
                "fb43206a-b091-496a-9a73-878bb8cb6953"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9376c4f9-4b26-4e13-823a-165198c8220a",
              "title": "Mutate asset non meta properteies to meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "c1febe04-771a-4af7-a78f-cfe3e43c98d0",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID = value.value.id.value.classificationID.value.idString\n          data.ihashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "f4f58e80-081c-4eb0-96a3-2485746d1fec",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Define Asset: ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ASSETS1:S|num1\" + \",burn:H|1\",\n          \"immutableTraits\": \"ASSETS2:S|\",\n          \"mutableMetaTraits\": \"ASSETS3:S|num3\",\n          \"immutableMetaTraits\": \"ASSETS4:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "d46df313-2f82-4290-b244-1648df947f9d",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "9b3e436c-cba2-4936-9f41-f4726ecd3101",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS4\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "cc42d43b-98e3-4c50-a036-930f4e0d19f9",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID + '|' + data.hashID,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSETS1:S|num5\" + \",burn:H|1\",\n          \"immutableProperties\": \"ASSETS2:S|num6\",\n          \"mutableMetaProperties\": \"ASSETS3:S|num7\",\n          \"immutableMetaProperties\": \"ASSETS4:S|num8\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "7eedcc60-ad30-4c7d-ba2f-ff927d5dbfca",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "42d0f794-31d1-4997-a5c6-ab910c059c6a",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Asset: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS4\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "34d2828f-1d8c-434f-8b62-f333417f48f7",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Meta Reveal: ",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"S|num5\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "09af5be0-8314-43e1-afcd-d13115a21d97",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "284d877c-695b-4a13-a184-94950d708b77",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset non meta properties to meta properties: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Mutate Asset non meta properties to meta properties: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mutateAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"assetID\": data.aclasificationID + '|' + data.ahashID,\n          \"mutableProperties\": \"ASSETS1:S|\",\n          \"mutableMetaProperties\": \"ASSETS3:S|num3\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mutateAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "bb6f74d3-7dbe-439d-be2e-2ce917612780",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "18140a60-3386-49f0-818a-9907ef42b817",
                  "parentUUID": "9376c4f9-4b26-4e13-823a-165198c8220a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4f58e80-081c-4eb0-96a3-2485746d1fec",
                "d46df313-2f82-4290-b244-1648df947f9d",
                "9b3e436c-cba2-4936-9f41-f4726ecd3101",
                "cc42d43b-98e3-4c50-a036-930f4e0d19f9",
                "7eedcc60-ad30-4c7d-ba2f-ff927d5dbfca",
                "42d0f794-31d1-4997-a5c6-ab910c059c6a",
                "34d2828f-1d8c-434f-8b62-f333417f48f7",
                "09af5be0-8314-43e1-afcd-d13115a21d97",
                "284d877c-695b-4a13-a184-94950d708b77",
                "bb6f74d3-7dbe-439d-be2e-2ce917612780",
                "18140a60-3386-49f0-818a-9907ef42b817"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 296,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8be2acf4-ad28-4848-a29e-4c7292a5cefc",
              "title": "Mint Asset with 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "5fa67c89-6974-4069-a0af-7f9a1a3fb4fb",
                  "parentUUID": "8be2acf4-ad28-4848-a29e-4c7292a5cefc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "7c541d38-629f-434a-a8bc-9861ac6c024c",
                  "parentUUID": "8be2acf4-ad28-4848-a29e-4c7292a5cefc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n          \"immutableTraits\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n          \"mutableMetaTraits\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n          \"immutableMetaTraits\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "2b115a5a-5bf8-4614-bb5b-1a960c4d5acb",
                  "parentUUID": "8be2acf4-ad28-4848-a29e-4c7292a5cefc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "604e3360-5bbc-4f9a-ae2e-7727d222f284",
                  "parentUUID": "8be2acf4-ad28-4848-a29e-4c7292a5cefc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETP4\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "b6cbbab6-83a2-4854-8747-63c802966afb",
                  "parentUUID": "8be2acf4-ad28-4848-a29e-4c7292a5cefc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 60,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID + '|' + data.hashID,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n          \"immutableProperties\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n          \"mutableMetaProperties\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n          \"immutableMetaProperties\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "bb1f68ca-a600-424a-850d-738e39158a2e",
                  "parentUUID": "8be2acf4-ad28-4848-a29e-4c7292a5cefc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "09cd90b4-e1b5-4aa1-87ec-c46d9301b542",
                  "parentUUID": "8be2acf4-ad28-4848-a29e-4c7292a5cefc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c541d38-629f-434a-a8bc-9861ac6c024c",
                "2b115a5a-5bf8-4614-bb5b-1a960c4d5acb",
                "604e3360-5bbc-4f9a-ae2e-7727d222f284",
                "b6cbbab6-83a2-4854-8747-63c802966afb",
                "bb1f68ca-a600-424a-850d-738e39158a2e",
                "09cd90b4-e1b5-4aa1-87ec-c46d9301b542"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 132,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
              "title": "Add asset properties on mutation",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Add asset properties on mutation \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "cd64d91b-fc62-46e9-8674-ecca9e6cfec3",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID = value.value.id.value.classificationID.value.idString\n          data.ihashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "aeb17648-9347-4d2e-86c9-8d57e2c6ff7a",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Define Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ASSET_A5:S|, burn:H|1\",\n          \"immutableTraits\": \"ASSET_A6:S|\",\n          \"mutableMetaTraits\": \"ASSET_A7:S|\",\n          \"immutableMetaTraits\": \"ASSET_A8:S|\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "3616c4b1-efe8-4829-bcdc-18ebadd26903",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "5a0a09ab-aae5-457b-ad09-558096d40253",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Classification: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "d7450227-b4b3-4aac-80c8-11d414130d17",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Mint Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID + '|' + data.hashID,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSET_A5:S|A, burn:H|1\",\n          \"immutableProperties\": \"ASSET_A6:S|B\",\n          \"mutableMetaProperties\": \"ASSET_A7:S|C\",\n          \"immutableMetaProperties\": \"ASSET_A8:S|D\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "7e08f31b-a51d-47f6-80ca-ee651328f2a9",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "fe267efc-438f-4d6e-825c-44b9a4f1da3c",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Asset: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "a4c39dcc-ae33-47a6-9fe1-ac0a15c07946",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add asset properties on mutation: ",
                  "fullTitle": "Assets Add asset properties on mutation Add asset properties on mutation: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mutateAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"assetID\": data.aclasificationID + '|' + data.ahashID,\n          \"mutableProperties\": \"ASSET_A5:S|A\",\n          \"mutableMetaProperties\": \"ASSET_A7:S|C\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mutateAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "47ce5f09-0670-4d18-b443-cbb001c7e53f",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "470da273-76d0-4fee-94cd-4cf57c905ddc",
                  "parentUUID": "c717dfc2-80f3-4fd4-8067-b9b71fd1eee8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aeb17648-9347-4d2e-86c9-8d57e2c6ff7a",
                "3616c4b1-efe8-4829-bcdc-18ebadd26903",
                "5a0a09ab-aae5-457b-ad09-558096d40253",
                "d7450227-b4b3-4aac-80c8-11d414130d17",
                "7e08f31b-a51d-47f6-80ca-ee651328f2a9",
                "fe267efc-438f-4d6e-825c-44b9a4f1da3c",
                "a4c39dcc-ae33-47a6-9fe1-ac0a15c07946",
                "47ce5f09-0670-4d18-b443-cbb001c7e53f",
                "470da273-76d0-4fee-94cd-4cf57c905ddc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 203,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc069ef6-059d-49fc-8c94-52cb8a7cc498",
              "title": "Mint Asset with more than 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with more than 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "a7b019e4-a225-4f65-a80a-fdd9c3e9e21c",
                  "parentUUID": "cc069ef6-059d-49fc-8c94-52cb8a7cc498",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "f75851e1-4f2f-4d83-9831-5abcfafbd65f",
                  "parentUUID": "cc069ef6-059d-49fc-8c94-52cb8a7cc498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n          \"immutableTraits\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n          \"mutableMetaTraits\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n          \"immutableMetaTraits\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "ca8a74e4-67c3-4621-9804-d7f02f1abb51",
                  "parentUUID": "cc069ef6-059d-49fc-8c94-52cb8a7cc498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "10578447-62f5-45fc-8fb9-62ffaa1c3d41",
                  "parentUUID": "cc069ef6-059d-49fc-8c94-52cb8a7cc498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Classification: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"P4\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "47c8bc84-9edd-443d-86b8-aa3ccba25e52",
                  "parentUUID": "cc069ef6-059d-49fc-8c94-52cb8a7cc498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset with more than 22 properties: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Mint Asset with more than 22 properties: ",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID + '|' + data.hashID,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n          \"immutableProperties\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n          \"mutableMetaProperties\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n          \"immutableMetaProperties\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "2890cd5e-bf77-4fdc-83f4-16f6eac64309",
                  "parentUUID": "cc069ef6-059d-49fc-8c94-52cb8a7cc498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "d320a024-29ce-4921-8e73-a00c6e34dab4",
                  "parentUUID": "cc069ef6-059d-49fc-8c94-52cb8a7cc498",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f75851e1-4f2f-4d83-9831-5abcfafbd65f",
                "ca8a74e4-67c3-4621-9804-d7f02f1abb51",
                "10578447-62f5-45fc-8fb9-62ffaa1c3d41",
                "47c8bc84-9edd-443d-86b8-aa3ccba25e52",
                "2890cd5e-bf77-4fdc-83f4-16f6eac64309",
                "d320a024-29ce-4921-8e73-a00c6e34dab4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 153,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4cbcbca-0fed-49b2-af0f-0386e9c7fd7b",
              "title": "Mutate Asset to add more that 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "1d4d4bb2-6995-4097-b034-6d0f9d92c148",
                  "parentUUID": "f4cbcbca-0fed-49b2-af0f-0386e9c7fd7b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID = value.value.id.value.classificationID.value.idString\n          data.ihashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "ff78721f-7c2e-4cb4-8517-6c0a6000538c",
                  "parentUUID": "f4cbcbca-0fed-49b2-af0f-0386e9c7fd7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Asset: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "214d1eb5-42eb-4985-8929-780f147aff28",
                  "parentUUID": "f4cbcbca-0fed-49b2-af0f-0386e9c7fd7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset to add more that 22 properties: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Mutate Asset to add more that 22 properties: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mutateAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"assetID\": data.aclasificationID + '|' + data.ahashID,\n          \"mutableProperties\": \"ASSET_A5:S|A,ASSET_A5:S|B,ASSET_A5:S|C,ASSET_A5:S|D,ASSET_A5:S|E,ASSET_A5:S|F,ASSET_A5:S|G,ASSET_A5:S|H,ASSET_A5:S|I,ASSET_A5:S|J,ASSET_A5:S|K,ASSET_A5:S|L,ASSET_A5:S|M,ASSET_A5:S|N\",\n          \"mutableMetaProperties\": \"ASSET_A7:S|O,ASSET_A7:S|P,ASSET_A7:S|Q,ASSET_A7:S|R,ASSET_A7:S|S,ASSET_A7:S|T,ASSET_A7:S|U,ASSET_A7:S|V,ASSET_A7:S|W\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mutateAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "910c99a6-356e-44b7-85c5-e279dea4fd36",
                  "parentUUID": "f4cbcbca-0fed-49b2-af0f-0386e9c7fd7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "07c13540-681f-44f5-baa4-6d48beb7196d",
                  "parentUUID": "f4cbcbca-0fed-49b2-af0f-0386e9c7fd7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff78721f-7c2e-4cb4-8517-6c0a6000538c",
                "214d1eb5-42eb-4985-8929-780f147aff28",
                "910c99a6-356e-44b7-85c5-e279dea4fd36",
                "07c13540-681f-44f5-baa4-6d48beb7196d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4677a88-0b95-478d-95f5-876a8bd3c881",
              "title": "Burn Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Burn Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "a236ad0a-9f24-4b4e-ad50-edd267504bd1",
                  "parentUUID": "d4677a88-0b95-478d-95f5-876a8bd3c881",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Burn Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID = value.value.id.value.classificationID.value.idString\n          data.ihashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "ece8d0ff-d909-425a-b317-a61da3ec1390",
                  "parentUUID": "d4677a88-0b95-478d-95f5-876a8bd3c881",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Burn Asset Query Asset: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_P4\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "0bba4c53-1e49-4a1e-b01f-c4711e5032bb",
                  "parentUUID": "d4677a88-0b95-478d-95f5-876a8bd3c881",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Burn Asset Meta Reveal: ",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"H|1\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "8e5106bc-b9ef-4b4a-a81b-e788211ebcff",
                  "parentUUID": "d4677a88-0b95-478d-95f5-876a8bd3c881",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Burn Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "8f814129-9af1-41c6-9545-73fa1cfa7449",
                  "parentUUID": "d4677a88-0b95-478d-95f5-876a8bd3c881",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Burn Asset Burn Asset",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.burnAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"assetID\": data.aclasificationID + '|' + data.ahashID\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.burnAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "74c7ed95-2519-4d6c-b13c-09b5627e5c41",
                  "parentUUID": "d4677a88-0b95-478d-95f5-876a8bd3c881",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Burn Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "a2d5992d-ccff-408a-96f7-4376af1d557a",
                  "parentUUID": "d4677a88-0b95-478d-95f5-876a8bd3c881",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ece8d0ff-d909-425a-b317-a61da3ec1390",
                "0bba4c53-1e49-4a1e-b01f-c4711e5032bb",
                "8e5106bc-b9ef-4b4a-a81b-e788211ebcff",
                "8f814129-9af1-41c6-9545-73fa1cfa7449",
                "74c7ed95-2519-4d6c-b13c-09b5627e5c41",
                "a2d5992d-ccff-408a-96f7-4376af1d557a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 147,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b8e06ebc-820c-420d-a308-36cea178fefd",
              "title": "Mint Asset with burn greater than forseeable block height",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "659fd37f-6c52-494e-b8ff-21e3a44d1a56",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID = value.value.id.value.classificationID.value.idString\n          data.ihashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "244acd8c-4b9c-4bcd-91bf-b98806749c05",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Define Asset: ",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"mutableTraits\": \"AssetA:S|num1\" + \",burn:H|1\",\n          \"immutableTraits\": \"AssetB:S|\",\n          \"mutableMetaTraits\": \"AssetC:S|num3\",\n          \"immutableMetaTraits\": \"AssetD:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "25a289cb-271b-429d-980a-bd415a225972",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "421e5d31-561f-4b8c-85b7-97d1a9d4e9d8",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Classification: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "55e9e668-23f0-4205-a6e6-97db72570b8e",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mint Asset: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.iclasificationID + '|' + data.ihashID,\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"AssetA:S|num1\" + \",burn:H|100000000\",\n          \"immutableProperties\": \"AssetB:S|num2\",\n          \"mutableMetaProperties\": \"AssetC:S|num3\",\n          \"immutableMetaProperties\": \"AssetD:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "347068be-2626-4df5-890e-f735371931d3",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "a5e73619-2f8b-4ae8-9a36-a216a5421145",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Asset: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "b78165eb-ff17-4fbc-8d6a-384bc815b5f3",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"H|100000000\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "ee33abda-0e05-47ed-bf76-451e2bdb0d72",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "2b394355-4421-48b8-a80f-cc6112681864",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.burnAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"assetID\": data.aclasificationID + '|' + data.ahashID\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.burnAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "e7ca3136-02a3-4359-ad92-8695e62736fa",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "cd606aa1-c924-4c78-a92f-1d75a073bcdd",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"H|100\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "667e1b3b-2f7e-470f-8116-2192913b359c",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "cb63a48f-bdc3-4b7d-877e-74078332408b",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mutate Asset: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mutateAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"assetID\": data.aclasificationID + '|' + data.ahashID,\n          \"mutableProperties\": \"AssetA:S|ABCd,burn:H|100\",\n          \"mutableMetaProperties\": \"AssetC:S|num3\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mutateAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6dda9a84-4a6e-4f9e-a684-d5bc8c568a20",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "7efeee58-1659-4bd8-bee4-8e7d6d19269f",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.burnAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID + '|' + data.ihashID,\n          \"assetID\": data.aclasificationID + '|' + data.ahashID\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.burnAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f964d1c6-3df8-44a9-a013-e62a82640229",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "12d55c5e-f5d2-4e35-911e-1e10bb2d131c",
                  "parentUUID": "b8e06ebc-820c-420d-a308-36cea178fefd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "244acd8c-4b9c-4bcd-91bf-b98806749c05",
                "25a289cb-271b-429d-980a-bd415a225972",
                "421e5d31-561f-4b8c-85b7-97d1a9d4e9d8",
                "55e9e668-23f0-4205-a6e6-97db72570b8e",
                "347068be-2626-4df5-890e-f735371931d3",
                "a5e73619-2f8b-4ae8-9a36-a216a5421145",
                "b78165eb-ff17-4fbc-8d6a-384bc815b5f3",
                "ee33abda-0e05-47ed-bf76-451e2bdb0d72",
                "2b394355-4421-48b8-a80f-cc6112681864",
                "e7ca3136-02a3-4359-ad92-8695e62736fa",
                "cd606aa1-c924-4c78-a92f-1d75a073bcdd",
                "667e1b3b-2f7e-470f-8116-2192913b359c",
                "cb63a48f-bdc3-4b7d-877e-74078332408b",
                "6dda9a84-4a6e-4f9e-a684-d5bc8c568a20",
                "7efeee58-1659-4bd8-bee4-8e7d6d19269f",
                "f964d1c6-3df8-44a9-a013-e62a82640229",
                "12d55c5e-f5d2-4e35-911e-1e10bb2d131c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 443,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4019e44d-c296-4b46-8e40-7940d85f56c1",
              "title": "Mint Asset with extra properties when mutable trait is not defined",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "5bc8fc21-b61b-42d7-88bb-f2a16aaf93f9",
                  "parentUUID": "4019e44d-c296-4b46-8e40-7940d85f56c1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "4ba14dd8-586c-4daa-be7d-fbdf5cfd4b91",
                  "parentUUID": "4019e44d-c296-4b46-8e40-7940d85f56c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Define Asset: ",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ASSETA1:S|,burn:H|1\",\n          \"immutableTraits\": \"ASSETA2:S|G\",\n          \"mutableMetaTraits\": \"ASSETA3:S|L\",\n          \"immutableMetaTraits\": \"ASSETA4:S|Q\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "171dee4d-a839-40e5-903b-14763696e5f7",
                  "parentUUID": "4019e44d-c296-4b46-8e40-7940d85f56c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "b6755bde-f35d-4aba-b635-ef8dbf5ffe30",
                  "parentUUID": "4019e44d-c296-4b46-8e40-7940d85f56c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "0ff95baa-b920-4aeb-ac4d-aa44846b3913",
                  "parentUUID": "4019e44d-c296-4b46-8e40-7940d85f56c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Mint Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID + '|' + data.hashID,\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSETA1:S|A,burn:H|1,ASSETA1:S|B,ASSETA1:S|C\",\n          \"immutableProperties\": \"ASSETA2:S|G\",\n          \"mutableMetaProperties\": \"ASSETA3:S|L\",\n          \"immutableMetaProperties\": \"ASSETA4:S|Q\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "d994399d-776b-481f-8afe-1a6be793d492",
                  "parentUUID": "4019e44d-c296-4b46-8e40-7940d85f56c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Tx: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "12125da9-5d4e-48cd-b896-6065006e3ded",
                  "parentUUID": "4019e44d-c296-4b46-8e40-7940d85f56c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ba14dd8-586c-4daa-be7d-fbdf5cfd4b91",
                "171dee4d-a839-40e5-903b-14763696e5f7",
                "b6755bde-f35d-4aba-b635-ef8dbf5ffe30",
                "0ff95baa-b920-4aeb-ac4d-aa44846b3913",
                "d994399d-776b-481f-8afe-1a6be793d492",
                "12125da9-5d4e-48cd-b896-6065006e3ded"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 137,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2179e50c-7221-499a-9f73-d9be4062de30",
          "title": "Splits",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac5c750c-849f-4495-9cf8-7167b82267be",
              "title": "send split of an asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "95bbfb7c-5fe4-4c28-8c1e-27aea3b27f52",
                  "parentUUID": "ac5c750c-849f-4495-9cf8-7167b82267be",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Splits send split of an asset Query Identity 1: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n          data.ihashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "a81e83e1-89f4-4878-b720-bf63ceddeaf3",
                  "parentUUID": "ac5c750c-849f-4495-9cf8-7167b82267be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Splits send split of an asset Query Identity 2: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n          data.iclasificationID2 = value.value.id.value.classificationID.value.idString\n          data.ihashID2 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "f7816df3-d8c4-4b26-8bb4-cc95e048688b",
                  "parentUUID": "ac5c750c-849f-4495-9cf8-7167b82267be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits send split of an asset Query Asset: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \" \") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "46b773d5-6ebc-48a8-aaa6-af1c07c2864c",
                  "parentUUID": "ac5c750c-849f-4495-9cf8-7167b82267be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an asset: ",
                  "fullTitle": "Splits send split of an asset Send split of an asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.sendSplitType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n          \"toID\": data.iclasificationID2 + '|' + data.ihashID2,\n          \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n          \"split\": config.splitval\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.sendSplitPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "010fa16d-3cd1-4209-b64b-89092fd71ffc",
                  "parentUUID": "ac5c750c-849f-4495-9cf8-7167b82267be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits send split of an asset Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "64155ed9-2bd1-4a3f-b753-f9bc1cf380e4",
                  "parentUUID": "ac5c750c-849f-4495-9cf8-7167b82267be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a81e83e1-89f4-4878-b720-bf63ceddeaf3",
                "f7816df3-d8c4-4b26-8bb4-cc95e048688b",
                "46b773d5-6ebc-48a8-aaa6-af1c07c2864c",
                "010fa16d-3cd1-4209-b64b-89092fd71ffc",
                "64155ed9-2bd1-4a3f-b753-f9bc1cf380e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 90,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e99b3e7f-092a-4ed6-af38-66e264adf375",
              "title": "Unwrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Unwrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "9fe32d93-51ec-4238-b853-06ea586bdbb1",
                  "parentUUID": "e99b3e7f-092a-4ed6-af38-66e264adf375",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Splits Unwrap a coin Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n          data.ihashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "d14df374-077c-4476-9982-8fcd75dc1d1d",
                  "parentUUID": "e99b3e7f-092a-4ed6-af38-66e264adf375",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits Unwrap a coin Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "00d1f622-fb9f-4af8-b806-1bf2bf968945",
                  "parentUUID": "e99b3e7f-092a-4ed6-af38-66e264adf375",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Unwrap a coin: ",
                  "fullTitle": "Splits Unwrap a coin Unwrap a coin: ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.unwrapCoinType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n          \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n          \"split\": config.splitval\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.unwrapCoinPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "5a125aac-61cf-4ca2-a16e-15473ea54862",
                  "parentUUID": "e99b3e7f-092a-4ed6-af38-66e264adf375",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits Unwrap a coin Query Tx: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "da888138-3578-4bb8-9c69-147ade5ad8a7",
                  "parentUUID": "e99b3e7f-092a-4ed6-af38-66e264adf375",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d14df374-077c-4476-9982-8fcd75dc1d1d",
                "00d1f622-fb9f-4af8-b806-1bf2bf968945",
                "5a125aac-61cf-4ca2-a16e-15473ea54862",
                "da888138-3578-4bb8-9c69-147ade5ad8a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27b3b2e5-2089-4c56-8648-9a12e3ac0c7b",
              "title": "Wrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Wrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "fc63e1bd-6c7f-44d1-95b6-ecc6044202fb",
                  "parentUUID": "27b3b2e5-2089-4c56-8648-9a12e3ac0c7b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Splits Wrap a coin Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n          data.ihashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "feac7635-ca83-4813-9bf7-610ca57f934b",
                  "parentUUID": "27b3b2e5-2089-4c56-8648-9a12e3ac0c7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Splits Wrap a coin Wrap a coin: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.wrapCoinType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n          \"coins\": config.coins\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.wrapCoinPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "d8f6074b-e41a-4e38-9a4b-98c09f2baede",
                  "parentUUID": "27b3b2e5-2089-4c56-8648-9a12e3ac0c7b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits Wrap a coin Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "4cf66c3d-998e-488d-879c-03088a56d899",
                  "parentUUID": "27b3b2e5-2089-4c56-8648-9a12e3ac0c7b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "feac7635-ca83-4813-9bf7-610ca57f934b",
                "d8f6074b-e41a-4e38-9a4b-98c09f2baede",
                "4cf66c3d-998e-488d-879c-03088a56d899"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 69,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d5b959b-66f5-4705-9fd3-f0716addb16e",
              "title": "send split of an coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "2a496434-cd67-4679-aa45-10f0dbbd6850",
                  "parentUUID": "4d5b959b-66f5-4705-9fd3-f0716addb16e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Splits send split of an coin Query Identity 1: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n          data.ihashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "4e24ddf7-d397-4f86-aaea-98811e78e6e1",
                  "parentUUID": "4d5b959b-66f5-4705-9fd3-f0716addb16e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Splits send split of an coin Query Identity 2: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n          data.iclasificationID2 = value.value.id.value.classificationID.value.idString\n          data.ihashID2 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "3574ea4f-7677-4625-922e-9db1baea44d8",
                  "parentUUID": "4d5b959b-66f5-4705-9fd3-f0716addb16e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits send split of an coin Query Asset: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "144459cb-3273-4139-9802-46d23cc33e16",
                  "parentUUID": "4d5b959b-66f5-4705-9fd3-f0716addb16e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an coin: ",
                  "fullTitle": "Splits send split of an coin Send split of an coin: ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.sendSplitType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n          \"toID\": data.iclasificationID2 + '|' + data.ihashID2,\n          \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n          \"split\": config.splitval\n        }\n      }\n     \n      var err, res = await chai.request(server)\n        .post(config.sendSplitPath)\n        .send(obj)\n    \n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a702c91f-603f-4856-bc6d-f1041b9df59d",
                  "parentUUID": "4d5b959b-66f5-4705-9fd3-f0716addb16e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits send split of an coin Query Tx: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "3979eadb-6887-42b0-8a5c-883f460087ac",
                  "parentUUID": "4d5b959b-66f5-4705-9fd3-f0716addb16e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e24ddf7-d397-4f86-aaea-98811e78e6e1",
                "3574ea4f-7677-4625-922e-9db1baea44d8",
                "144459cb-3273-4139-9802-46d23cc33e16",
                "a702c91f-603f-4856-bc6d-f1041b9df59d",
                "3979eadb-6887-42b0-8a5c-883f460087ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b3a1441-0ee4-44a9-abdc-f4ce9ff6cca3",
          "title": "Metas",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
              "title": "Reveal a meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "a2de4e0b-eecf-47fd-9c7c-c9a5b47a5a2d",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Metas Reveal a meta Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n          data.ihashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "1aacd153-ba67-449e-a914-09eed3531083",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Metas Reveal a meta Define Asset: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n          \"mutableTraits\": \"ASSET_PA:S|AAA, burn:H|4\",\n          \"immutableTraits\": \"ASSET_PB:D|0.344\",\n          \"mutableMetaTraits\": \"ASSET_PC:I|ID\",\n          \"immutableMetaTraits\": \"ASSET_PD:S|A\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f31907b1-0549-4eba-afd9-a6234ec06f37",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "da5ab1a2-3b8b-404a-8730-f76885634ef9",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Metas Reveal a meta Query Classification: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "96214667-8215-4b2e-b9c2-003faea9280f",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Metas Reveal a meta Mint Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.iclasificationID1 + '|' + data.ihashID1,\n          \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSET_PA:S|AAA, burn:H|4\",\n          \"immutableProperties\": \"ASSET_PB:D|0.344\",\n          \"mutableMetaProperties\": \"ASSET_PC:I|ID\",\n          \"immutableMetaProperties\": \"ASSET_PD:S|A\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "12820efa-8af5-4049-93b5-2ed4b4b9bc7e",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "4dd3767c-b19f-4d7d-a151-2e8a842c1f23",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Metas Reveal a meta Query Asset: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "63fae7c3-fef6-46ed-bf2e-ac4432910326",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"S|AAA\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "175c2b4e-8a62-417f-9502-1f7c4461f41f",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "43c1a5d7-519d-4d67-be89-7ef9b5d48726",
                  "parentUUID": "5f5aa6fa-95d4-46f1-be51-980ffc65763e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1aacd153-ba67-449e-a914-09eed3531083",
                "f31907b1-0549-4eba-afd9-a6234ec06f37",
                "da5ab1a2-3b8b-404a-8730-f76885634ef9",
                "96214667-8215-4b2e-b9c2-003faea9280f",
                "12820efa-8af5-4049-93b5-2ed4b4b9bc7e",
                "4dd3767c-b19f-4d7d-a151-2e8a842c1f23",
                "63fae7c3-fef6-46ed-bf2e-ac4432910326",
                "175c2b4e-8a62-417f-9502-1f7c4461f41f",
                "43c1a5d7-519d-4d67-be89-7ef9b5d48726"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 189,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99a84aed-0a6b-4d49-aff0-24baf097bf89",
              "title": "Reveal a meta of id type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of id type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "15bfbcd9-f785-41c4-9d80-a3e6056ebdfb",
                  "parentUUID": "99a84aed-0a6b-4d49-aff0-24baf097bf89",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of id type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"I|ID\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "63dda0d3-b657-4ec3-b5d2-31eb9226d653",
                  "parentUUID": "99a84aed-0a6b-4d49-aff0-24baf097bf89",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of id type Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "97a41fd5-ade2-49de-b44d-d014cd21795f",
                  "parentUUID": "99a84aed-0a6b-4d49-aff0-24baf097bf89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63dda0d3-b657-4ec3-b5d2-31eb9226d653",
                "97a41fd5-ade2-49de-b44d-d014cd21795f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04e4a658-a893-4e76-8860-5becef213251",
              "title": "Reveal a meta of string type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of string type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "948204eb-46f2-4294-bff4-6f85ec934aaf",
                  "parentUUID": "04e4a658-a893-4e76-8860-5becef213251",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of string type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"S|AAA\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f7e08456-14b0-4e92-928e-35f03748e40d",
                  "parentUUID": "04e4a658-a893-4e76-8860-5becef213251",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of string type Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "d36ff1a1-29e8-456d-873c-a48ae3cb6dfd",
                  "parentUUID": "04e4a658-a893-4e76-8860-5becef213251",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7e08456-14b0-4e92-928e-35f03748e40d",
                "d36ff1a1-29e8-456d-873c-a48ae3cb6dfd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 45,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93daa227-ea3b-4fa8-ba1b-b4ad0d7d7801",
              "title": "Reveal a meta of dec type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of dec type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "c2d42773-ac86-4bcb-81f3-991103e821e6",
                  "parentUUID": "93daa227-ea3b-4fa8-ba1b-b4ad0d7d7801",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of dec type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"D|0.344\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "fe7b9520-ee3b-4044-98dc-83a712c13b89",
                  "parentUUID": "93daa227-ea3b-4fa8-ba1b-b4ad0d7d7801",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of dec type Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "eb731a08-a8da-403b-8bac-2aea4327fa8f",
                  "parentUUID": "93daa227-ea3b-4fa8-ba1b-b4ad0d7d7801",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe7b9520-ee3b-4044-98dc-83a712c13b89",
                "eb731a08-a8da-403b-8bac-2aea4327fa8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "54916cb2-4271-44a4-96e4-30e9390ec450",
              "title": "Reveal a meta of height type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of height type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "d5b7679f-3b75-4527-956e-ba8c5698cd08",
                  "parentUUID": "54916cb2-4271-44a4-96e4-30e9390ec450",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of height type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"H|4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "e17208e1-a2cf-43da-a92d-f9850a4ca5f8",
                  "parentUUID": "54916cb2-4271-44a4-96e4-30e9390ec450",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of height type Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "b160d963-e6f4-4e15-bb11-a97053eb3121",
                  "parentUUID": "54916cb2-4271-44a4-96e4-30e9390ec450",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e17208e1-a2cf-43da-a92d-f9850a4ca5f8",
                "b160d963-e6f4-4e15-bb11-a97053eb3121"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c9f2194-2b75-432a-8553-bb21ad628da9",
              "title": "Reveal an already revealed meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal an already revealed meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "55401323-b87a-4c0f-a623-88db386ab875",
                  "parentUUID": "1c9f2194-2b75-432a-8553-bb21ad628da9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal an already revealed meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.metaRevealType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"metaFact\": \"H|4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.metaRevealPath)\n        .send(obj)\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b5d6e662-cb3a-4312-a8aa-1871798b9e15",
                  "parentUUID": "1c9f2194-2b75-432a-8553-bb21ad628da9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal an already revealed meta Query Tx: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "6bea4c22-3785-4e5e-b9d3-aa9255cda3e5",
                  "parentUUID": "1c9f2194-2b75-432a-8553-bb21ad628da9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5d6e662-cb3a-4312-a8aa-1871798b9e15",
                "6bea4c22-3785-4e5e-b9d3-aa9255cda3e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4e68c6b9-28dd-4ca6-9674-b994b2981faa",
          "title": "Orders",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
              "title": "Create an asset make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an asset make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "0a9dd1bf-975e-49d7-9fa3-9e762a24acde",
                  "parentUUID": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create an asset make order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "a814c8c2-d933-4dc0-9519-35cdb41401b1",
                  "parentUUID": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an asset make order Define Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ORDER_MUTABLE2:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableTraits\": \"ORDER_IMMUTABLE2:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaTraits\": \"ORDER_MUTABLE_META2:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|\",\n          \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META2:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "2dab45a5-8b89-40f4-a099-87fa8a060cea",
                  "parentUUID": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an asset make order Query Tx: ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "f6bb1a9a-9c15-491f-9600-a26952c5bd82",
                  "parentUUID": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an asset make order Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "ade1f8ac-28a4-4235-8fcc-acfd3d1c9618",
                  "parentUUID": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an asset make order Query Asset: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "db481afd-48be-48a6-b15d-6ea9c3c405da",
                  "parentUUID": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an asset make order Asset Make Order: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n          \"takerOwnableID\": config.makerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE2:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE2:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META2:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit,\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META2:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "d72e288f-6f3f-44e8-97d4-9ae18f8c1aff",
                  "parentUUID": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an asset make order Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "cd037dc4-e1b0-4636-be1a-45c4277bf263",
                  "parentUUID": "26bd93b3-106c-4631-93e1-aa17dc34e05c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a814c8c2-d933-4dc0-9519-35cdb41401b1",
                "2dab45a5-8b89-40f4-a099-87fa8a060cea",
                "f6bb1a9a-9c15-491f-9600-a26952c5bd82",
                "ade1f8ac-28a4-4235-8fcc-acfd3d1c9618",
                "db481afd-48be-48a6-b15d-6ea9c3c405da",
                "d72e288f-6f3f-44e8-97d4-9ae18f8c1aff",
                "cd037dc4-e1b0-4636-be1a-45c4277bf263"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 151,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b03fe3e-4bbe-455a-a35f-3fd9fdd84602",
              "title": "Take an asset take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an asset take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "2abc2ee4-5791-42d8-85c2-341f1fca3b06",
                  "parentUUID": "8b03fe3e-4bbe-455a-a35f-3fd9fdd84602",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Take an asset take order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "3c682f15-2b06-4ace-aa4d-fc6d2f5e86fe",
                  "parentUUID": "8b03fe3e-4bbe-455a-a35f-3fd9fdd84602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Take an asset take order Query Orders: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qOrder)\n      var list = res.body.result.value.orders.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\") {\n          data.oclassificationID = value.value.id.value.classificationID.value.idString\n          data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n          data.otakerownableid = value.value.id.value.takerOwnableID.value.idString\n          data.omakerid = value.value.id.value.makerID.value.idString\n          data.ohashid = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "3a2f0595-c6b6-42da-96e2-74822f833cd6",
                  "parentUUID": "8b03fe3e-4bbe-455a-a35f-3fd9fdd84602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an asset take order Take Order: ",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.takeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"takerOwnableSplit\": config.makerownablesplit,\n          \"orderID\": data.oclassificationID + '*' + data.omakerownableid + '*' + data.otakerownableid + '*' + data.omakerid + '*' + data.ohashid\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.takeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "1260d336-165a-4a7c-9e6a-b93d40d6ba08",
                  "parentUUID": "8b03fe3e-4bbe-455a-a35f-3fd9fdd84602",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Take an asset take order Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "0b277fda-6aa5-41ba-bb9f-640db96411ca",
                  "parentUUID": "8b03fe3e-4bbe-455a-a35f-3fd9fdd84602",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c682f15-2b06-4ace-aa4d-fc6d2f5e86fe",
                "3a2f0595-c6b6-42da-96e2-74822f833cd6",
                "1260d336-165a-4a7c-9e6a-b93d40d6ba08",
                "0b277fda-6aa5-41ba-bb9f-640db96411ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
              "title": "Cancel an asset order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel an asset order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "6c67cf22-9dd7-46b8-8054-6a584fc93bd8",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Cancel an asset order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "f9e7154b-da30-4d98-b092-d0adc6f52303",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Cancel an asset order Define Order: ",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ORDER_MUTABLE3:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableTraits\": \"ORDER_IMMUTABLE3:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaTraits\": \"ORDER_MUTABLE_META3:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|ID\",\n          \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META3:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6b9c8101-fc50-4c23-ac66-b70e636ea4e7",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "b092fea8-f504-462d-91f5-3360b022099e",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Cancel an asset order Query Classification: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META3\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "921877ba-f4cf-48ff-b244-a6812dcff272",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Cancel an asset order Query Asset: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "3d12bf7a-b7d6-463e-b397-88248126ba79",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Cancel an asset order Make Order: ",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n          \"takerOwnableID\": config.makerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE3:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE3:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META3:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit,\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META3:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "7055d142-74d0-46ea-9046-3e4cfe572ff3",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "e4d48a43-2fad-43b3-931c-c8a75e5e63f5",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Cancel an asset order Query Orders: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qOrder)\n      var list = res.body.result.value.orders.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META3\") {\n          data.oclassificationID = value.value.id.value.classificationID.value.idString\n          data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n          data.otakerownableid = value.value.id.value.takerOwnableID.value.idString\n          data.omakerid = value.value.id.value.makerID.value.idString\n          data.ohashid = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "4423ba1a-6855-47ec-9d6b-b2d275742469",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel an asset order Cancel Order: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.cancelOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"orderID\": data.oclassificationID + '*' + data.omakerownableid + '*' + data.otakerownableid + '*' + data.omakerid + '*' + data.ohashid\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.cancelOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "38ffcfe7-1df1-4dcb-b202-549310681c53",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "db18c9e7-ec79-4b5c-ac61-22118ddd3bd9",
                  "parentUUID": "c19e8966-548f-4717-8fa1-9177eaf83d4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9e7154b-da30-4d98-b092-d0adc6f52303",
                "6b9c8101-fc50-4c23-ac66-b70e636ea4e7",
                "b092fea8-f504-462d-91f5-3360b022099e",
                "921877ba-f4cf-48ff-b244-a6812dcff272",
                "3d12bf7a-b7d6-463e-b397-88248126ba79",
                "7055d142-74d0-46ea-9046-3e4cfe572ff3",
                "e4d48a43-2fad-43b3-931c-c8a75e5e63f5",
                "4423ba1a-6855-47ec-9d6b-b2d275742469",
                "38ffcfe7-1df1-4dcb-b202-549310681c53",
                "db18c9e7-ec79-4b5c-ac61-22118ddd3bd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 209,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
              "title": "Create a coin make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create a coin make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "c9562ed6-9d69-4d43-8dcf-02315669e255",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create a coin make order Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "f6da968f-8d93-4f35-b73d-fcd46790505d",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create a coin make order Define Order: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ORDER_MUTABLE4:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableTraits\": \"ORDER_IMMUTABLE4:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaTraits\": \"ORDER_MUTABLE_META4:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|ID\",\n          \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META4:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0f3ecec2-ca62-42a8-94cd-f7f573191293",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create a coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "1fa5f773-a9f9-44d6-80ea-b5f438fd1e83",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create a coin make order Query Classification: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META4\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "2c7dcd21-fb0f-44f2-a132-6fbbc7d56b76",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Orders Create a coin make order Wrap a coin: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n        \"type\": config.wrapCoinType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"coins\": config.coins\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.wrapCoinPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6afa8f7b-528e-4cd3-865b-0a7c146ba597",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create a coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n   //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "686fa2b6-75b2-4a29-800b-8d158034e767",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Create a coin make order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": config.makerownableid,\n          \"takerOwnableID\": config.takerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE4:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE4:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META4:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate,\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META4:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "04b4f3cd-e848-4a1e-b6d4-ce98ccf316ab",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create a coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "749e5cdf-f235-43a6-bcd4-64f08a7ee6e3",
                  "parentUUID": "e4811884-adf8-4dbd-9bf4-a8d2c52c1268",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6da968f-8d93-4f35-b73d-fcd46790505d",
                "0f3ecec2-ca62-42a8-94cd-f7f573191293",
                "1fa5f773-a9f9-44d6-80ea-b5f438fd1e83",
                "2c7dcd21-fb0f-44f2-a132-6fbbc7d56b76",
                "6afa8f7b-528e-4cd3-865b-0a7c146ba597",
                "686fa2b6-75b2-4a29-800b-8d158034e767",
                "04b4f3cd-e848-4a1e-b6d4-ce98ccf316ab",
                "749e5cdf-f235-43a6-bcd4-64f08a7ee6e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 175,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0e3c1d4-42d8-493d-bc51-d4af48ccc5e6",
              "title": "Take an coin take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an coin take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "d4797068-6299-45c4-96aa-a0b3f3d935e8",
                  "parentUUID": "b0e3c1d4-42d8-493d-bc51-d4af48ccc5e6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Take an coin take order Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "085f48df-6af7-4105-a2b8-a310ddfa34fa",
                  "parentUUID": "b0e3c1d4-42d8-493d-bc51-d4af48ccc5e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Take an coin take order Query Orders: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qOrder)\n      var list = res.body.result.value.orders.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META4\") {\n          data.oclassificationID = value.value.id.value.classificationID.value.idString\n          data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n          data.takerownableid = value.value.id.value.takerOwnableID.value.idString\n          data.omakerid = value.value.id.value.makerID.value.idString\n          data.ohashid = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "3f8f0886-ebd0-47f5-8da4-94e563c92fd9",
                  "parentUUID": "b0e3c1d4-42d8-493d-bc51-d4af48ccc5e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an coin take order Take Order: ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.takeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"takerOwnableSplit\": config.makerownablesplit,\n          \"orderID\": data.oclassificationID + '*' + data.omakerownableid + '*' + data.takerownableid + '*' + data.omakerid + '*' + data.ohashid\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.takeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b50b5678-4890-4c83-93a9-c55907ea2734",
                  "parentUUID": "b0e3c1d4-42d8-493d-bc51-d4af48ccc5e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Take an coin take order Query Tx: ",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "0689905f-7a9f-42e8-9eeb-b6927a10f2ef",
                  "parentUUID": "b0e3c1d4-42d8-493d-bc51-d4af48ccc5e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "085f48df-6af7-4105-a2b8-a310ddfa34fa",
                "3f8f0886-ebd0-47f5-8da4-94e563c92fd9",
                "b50b5678-4890-4c83-93a9-c55907ea2734",
                "0689905f-7a9f-42e8-9eeb-b6927a10f2ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 92,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
              "title": "Cancel a coin order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel a coin order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "eac83a70-ad82-4bed-a92a-6ee7647bd7f4",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Cancel a coin order Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "4402daa0-5a34-4a39-b77e-ba3667a503d3",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Cancel a coin order Define Order: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ORDER_MUTABLE5:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableTraits\": \"ORDER_IMMUTABLE5:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaTraits\": \"ORDER_MUTABLE_META5:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|ID\",\n          \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META5:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f8c0a253-e238-4317-b0c3-0581e6d741c1",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "b0c7348f-3c21-4fdb-84e1-382dc9b1b71c",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Cancel a coin order Query Classification: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META5\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "0babbf89-7b84-47ab-b570-ac144f4fb216",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Cancel a coin order Query Asset: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "fe6ddde2-19d5-4ba1-aea6-6a1ebd3f86ac",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Coin Order: ",
                  "fullTitle": "Orders Cancel a coin order Make Coin Order: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": config.makerownableid,\n          \"takerOwnableID\": config.makerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE5:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE5:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META5:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit,\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META5:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "29d6d5ac-51a9-4586-a35c-13dee5e5cbd0",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "59b333de-1737-4bed-a417-42a2ae9c81eb",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Cancel a coin order Query Orders: ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qOrder)\n      var list = res.body.result.value.orders.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META5\") {\n          data.oclassificationID = value.value.id.value.classificationID.value.idString\n          data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n          data.takerownableid = value.value.id.value.takerOwnableID.value.idString\n          data.omakerid = value.value.id.value.makerID.value.idString\n          data.ohashid = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "e8cbc727-4c06-4755-b75e-8c443aee9784",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel a coin order Cancel Order: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.cancelOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"orderID\": data.oclassificationID + '*' + data.omakerownableid + '*' + data.takerownableid + '*' + data.omakerid + '*' + data.ohashid\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.cancelOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "25ca2763-720b-4ae2-bc05-c66a9ada0c29",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "6cee6b49-0a48-49f7-81d5-43a2c951888d",
                  "parentUUID": "ac359d19-1901-44ae-a434-d3e4bd161ebd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4402daa0-5a34-4a39-b77e-ba3667a503d3",
                "f8c0a253-e238-4317-b0c3-0581e6d741c1",
                "b0c7348f-3c21-4fdb-84e1-382dc9b1b71c",
                "0babbf89-7b84-47ab-b570-ac144f4fb216",
                "fe6ddde2-19d5-4ba1-aea6-6a1ebd3f86ac",
                "29d6d5ac-51a9-4586-a35c-13dee5e5cbd0",
                "59b333de-1737-4bed-a417-42a2ae9c81eb",
                "e8cbc727-4c06-4755-b75e-8c443aee9784",
                "25ca2763-720b-4ae2-bc05-c66a9ada0c29",
                "6cee6b49-0a48-49f7-81d5-43a2c951888d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 235,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "622234ea-4078-4322-85f9-952213d1f1b1",
              "title": "Create an order with correct takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with correct takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "bb796874-710c-4400-b801-7a0f91454d87",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Identity 1: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID1 = value.value.id.value.classificationID.value.idString\n          data.hashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "6432aa7a-7106-4b32-94d6-b56937af0f57",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Identity 2: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n          data.clasificationID2 = value.value.id.value.classificationID.value.idString\n          data.hashID2 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "bd399066-33f8-4fc5-941f-082722b1cef2",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Order: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"mutableTraits\": \"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableTraits\": \"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaTraits\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|ID\",\n          \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META6:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "38613b0f-a8a1-4463-98f4-c6fb878a3f8b",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "cc0c57d2-45d4-4faf-b0fe-a2d8415bdb7b",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META6\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "499fb05e-cf89-4244-8ddc-3a148a32898e",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "f2607956-e0da-4516-a1f1-0d6804dbe478",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 66,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n          \"takerOwnableID\": config.makerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit,\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META6:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "83675ed5-3711-4fa5-86f2-cdcbe43e2110",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "18a5df41-e227-4c55-b772-c7dc5112b55c",
                  "parentUUID": "622234ea-4078-4322-85f9-952213d1f1b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6432aa7a-7106-4b32-94d6-b56937af0f57",
                "bd399066-33f8-4fc5-941f-082722b1cef2",
                "38613b0f-a8a1-4463-98f4-c6fb878a3f8b",
                "cc0c57d2-45d4-4faf-b0fe-a2d8415bdb7b",
                "499fb05e-cf89-4244-8ddc-3a148a32898e",
                "f2607956-e0da-4516-a1f1-0d6804dbe478",
                "83675ed5-3711-4fa5-86f2-cdcbe43e2110",
                "18a5df41-e227-4c55-b772-c7dc5112b55c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 186,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
              "title": "Create an order with other takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with other takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "08507214-b608-4070-aeea-973178ab49f8",
                  "parentUUID": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 1: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID1 = value.value.id.value.classificationID.value.idString\n          data.hashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "422df087-fc0d-46fc-bf2d-37079ca07e80",
                  "parentUUID": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 2: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n          data.clasificationID2 = value.value.id.value.classificationID.value.idString\n          data.hashID2 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "6872a020-abfa-4f34-92e2-2caab0f90897",
                  "parentUUID": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 3: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\") {\n          data.clasificationID3 = value.value.id.value.classificationID.value.idString\n          data.hashID3 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "d18517bb-6e59-49ab-a6ea-cb4aed00bd4a",
                  "parentUUID": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an order with other takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "477cb691-025a-4cb7-a10b-31d977934d85",
                  "parentUUID": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an order with other takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "1656d634-5a16-4391-b5bd-f503c7682880",
                  "parentUUID": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with other takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n          \"takerOwnableID\": config.makerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|\" + data.clasificationID3 * data.hashID3,\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META6:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b583fb2e-c7f8-46b3-b09c-36fb9832ecb6",
                  "parentUUID": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with other takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "67121a60-07da-4eb7-afff-f454c589d3fe",
                  "parentUUID": "0c4dcb99-74f9-4784-966e-5e9f82adfe3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "422df087-fc0d-46fc-bf2d-37079ca07e80",
                "6872a020-abfa-4f34-92e2-2caab0f90897",
                "d18517bb-6e59-49ab-a6ea-cb4aed00bd4a",
                "477cb691-025a-4cb7-a10b-31d977934d85",
                "1656d634-5a16-4391-b5bd-f503c7682880",
                "b583fb2e-c7f8-46b3-b09c-36fb9832ecb6",
                "67121a60-07da-4eb7-afff-f454c589d3fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 123,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b31e33cf-4256-4407-a482-c53ac985a513",
              "title": "Create order with takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create order with takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "4dc87fc4-ae03-44b4-a5b2-108ea0cd811f",
                  "parentUUID": "b31e33cf-4256-4407-a482-c53ac985a513",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create order with takerID Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID = value.value.id.value.classificationID.value.idString\n          data.hashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "211023bb-4c60-4cb1-a037-d63a6bc002b1",
                  "parentUUID": "b31e33cf-4256-4407-a482-c53ac985a513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create order with takerID Define Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ORDER_MUTABLE7:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableTraits\": \"ORDER_IMMUTABLE7:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaTraits\": \"ORDER_MUTABLE_META7:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|\",\n          \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META7:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "533c1143-e836-4791-85ef-3832d5522846",
                  "parentUUID": "b31e33cf-4256-4407-a482-c53ac985a513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create order with takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "0ef17dcf-75c2-4169-93fb-1f8a133bd7ab",
                  "parentUUID": "b31e33cf-4256-4407-a482-c53ac985a513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create order with takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META7\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "6b293e7a-b93b-4af5-a6df-c174c193aea3",
                  "parentUUID": "b31e33cf-4256-4407-a482-c53ac985a513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create order with takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "05f39ff9-0d28-4888-b34b-6735471e2d6e",
                  "parentUUID": "b31e33cf-4256-4407-a482-c53ac985a513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create order with takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n          \"takerOwnableID\": config.makerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE7:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE7:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META7:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|\" + data.clasificationID * data.hashID,\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META7:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "8a2390fc-329d-42aa-b6be-c9269e709f2a",
                  "parentUUID": "b31e33cf-4256-4407-a482-c53ac985a513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create order with takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "1129a096-fc47-4b26-8550-085772742cae",
                  "parentUUID": "b31e33cf-4256-4407-a482-c53ac985a513",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "211023bb-4c60-4cb1-a037-d63a6bc002b1",
                "533c1143-e836-4791-85ef-3832d5522846",
                "0ef17dcf-75c2-4169-93fb-1f8a133bd7ab",
                "6b293e7a-b93b-4af5-a6df-c174c193aea3",
                "05f39ff9-0d28-4888-b34b-6735471e2d6e",
                "8a2390fc-329d-42aa-b6be-c9269e709f2a",
                "1129a096-fc47-4b26-8550-085772742cae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 163,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
              "title": "Sell assets with splits, where taker gives more splits than he is supposed to",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "5c1405e3-79b0-4bbd-9492-cae32dc72a34",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 1: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID1 = value.value.id.value.classificationID.value.idString\n          data.hashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "c9eb6968-662f-4966-a092-685526c09304",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 2: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n          data.clasificationID2 = value.value.id.value.classificationID.value.idString\n          data.hashID2 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "02605a89-15cf-4326-97cd-ff854b5e6633",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 3: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\") {\n          data.clasificationID3 = value.value.id.value.classificationID.value.idString\n          data.hashID3 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "72bbdff7-9969-4d8f-ba42-e9a5d5243774",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Asset: ",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n          \"immutableTraits\": \"ASSETS11:S|\",\n          \"mutableMetaTraits\": \"ASSETS12:S|num3\",\n          \"immutableMetaTraits\": \"ASSETS13:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "8724f6c9-cbba-4d87-aceb-12b75568cf20",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "bc7b51d4-6809-4977-bc27-4c28eff920e7",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Classification: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS13\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "df98a88f-7881-40c6-81d5-4bb406144735",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Mint Asset: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID1 + '|' + data.hashID1,\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n          \"immutableProperties\": \"ASSETS11:S|abc\",\n          \"mutableMetaProperties\": \"ASSETS12:S|num3\",\n          \"immutableMetaProperties\": \"ASSETS13:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b862c429-fd7e-40c2-9b9c-0dc0bcfcb125",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "927a738a-4e74-4708-8a73-e200a6f1f211",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Asset: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS13\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "4cd3ed2d-d9ea-4177-a18a-6b947a3670be",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Order: ",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"mutableTraits\": \"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableTraits\": \"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaTraits\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerSplit:D|,takerID:S|\",\n          \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META24:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "de1127d4-8d75-46a7-970a-934263297f6f",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "848b6435-8a62-4ff0-910b-e2294a4140df",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Classification: ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META24\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "cfd5bb39-35fa-4872-93cb-c6fc0e91c35d",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Asset Make Order: ",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n          \"takerOwnableID\": config.makerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|,makerID:S|\" + data.clasificationID3 * data.hashID3,\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META24:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b4ac29f4-3715-4ed7-af4a-4a9f4059a8ee",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "e5550bb2-2ff1-4dcb-a1f0-c54ad8e0699c",
                  "parentUUID": "505c4c49-3719-4026-aa58-b7cb5c1fa42a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9eb6968-662f-4966-a092-685526c09304",
                "02605a89-15cf-4326-97cd-ff854b5e6633",
                "72bbdff7-9969-4d8f-ba42-e9a5d5243774",
                "8724f6c9-cbba-4d87-aceb-12b75568cf20",
                "bc7b51d4-6809-4977-bc27-4c28eff920e7",
                "df98a88f-7881-40c6-81d5-4bb406144735",
                "b862c429-fd7e-40c2-9b9c-0dc0bcfcb125",
                "927a738a-4e74-4708-8a73-e200a6f1f211",
                "4cd3ed2d-d9ea-4177-a18a-6b947a3670be",
                "de1127d4-8d75-46a7-970a-934263297f6f",
                "848b6435-8a62-4ff0-910b-e2294a4140df",
                "cfd5bb39-35fa-4872-93cb-c6fc0e91c35d",
                "b4ac29f4-3715-4ed7-af4a-4a9f4059a8ee",
                "e5550bb2-2ff1-4dcb-a1f0-c54ad8e0699c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 354,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
              "title": "Orders (splits) with exchange value other than smallest dec",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "59a16799-c600-4df8-8e23-6899058c3231",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 1: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID1 = value.value.id.value.classificationID.value.idString\n          data.hashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "bac80bd2-74f4-4e24-a259-04f4dad22bfe",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 2: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n          data.clasificationID2 = value.value.id.value.classificationID.value.idString\n          data.hashID2 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "813837d1-6abe-4408-aada-3d17d2510440",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 3: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\") {\n          data.clasificationID3 = value.value.id.value.classificationID.value.idString\n          data.hashID3 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "21270def-da6e-4a59-8a74-e89d5ea8548f",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Define Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID + '|' + data.hashID,\n          \"mutableTraits\": \"ASSETS101:S|num1\" + \",burn:H|1\",\n          \"immutableTraits\": \"ASSETS111:S|\",\n          \"mutableMetaTraits\": \"ASSETS121:S|num3\",\n          \"immutableMetaTraits\": \"ASSETS131:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b8e995b5-a834-49b3-b763-3129739afd74",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "10778e5f-24bc-48f6-8d9f-5aaf96615cb3",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Classification: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS131\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "5fd1c0a0-e62e-4913-92da-bbb75dc71ace",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Mint Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.mintAssetType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"toID\": data.clasificationID1 + '|' + data.hashID1,\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"mutableProperties\": \"ASSETS101:S|num1\" + \",burn:H|1\",\n          \"immutableProperties\": \"ASSETS111:S|abc\",\n          \"mutableMetaProperties\": \"ASSETS121:S|num3\",\n          \"immutableMetaProperties\": \"ASSETS131:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.mintAssetPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "4e038d9c-7976-4931-a493-3cf2f36e8a91",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "00a0df91-f623-4da6-bfe3-1181eb61aad4",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Asset: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS131\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "bfda8965-7274-4fed-9b28-6147baafeb2b",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Define Order: ",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.defineOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"mutableTraits\": \"ORDER_MUTABLE211:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableTraits\": \"ORDER_IMMUTABLE222:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaTraits\": \"ORDER_MUTABLE_META233:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|100\" + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerSplit:D|,takerID:S|\",\n          \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META244:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.defineOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "2bb5727b-7d92-41ea-93a1-5520737ab415",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "ed95076a-947b-422d-b5ff-22ba229710a7",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Classification: ",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qClassification)\n      var list = res.body.result.value.classifications.value.list\n      list.forEach(function (value) {\n        if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META244\") {\n          data.chainID = value.value.id.value.chainID.value.idString\n          data.clshashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "a9f67aa0-ea5e-4c68-b9ae-e6880552402b",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Asset Make Order: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.makeOrderType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"classificationID\": data.chainID + '.' + data.clshashID,\n          \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n          \"takerOwnableID\": config.makerownableid,\n          \"expiresIn\": config.expiry,\n          \"makerOwnableSplit\": config.makerownablesplit,\n          \"mutableProperties\": \"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n          \"immutableProperties\": \"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n          \"mutableMetaProperties\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|100\",\n          \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META24:S|num4\"\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.makeOrderPath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "33ab0a0e-ede7-4c44-9886-c7c78d18fc6d",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    //do nothing\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "32136809-bfed-4aba-8298-aca865d7d79c",
                  "parentUUID": "3103af14-ef2f-4d72-8c63-9c6e14798dfa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bac80bd2-74f4-4e24-a259-04f4dad22bfe",
                "813837d1-6abe-4408-aada-3d17d2510440",
                "21270def-da6e-4a59-8a74-e89d5ea8548f",
                "b8e995b5-a834-49b3-b763-3129739afd74",
                "10778e5f-24bc-48f6-8d9f-5aaf96615cb3",
                "5fd1c0a0-e62e-4913-92da-bbb75dc71ace",
                "4e038d9c-7976-4931-a493-3cf2f36e8a91",
                "00a0df91-f623-4da6-bfe3-1181eb61aad4",
                "bfda8965-7274-4fed-9b28-6147baafeb2b",
                "2bb5727b-7d92-41ea-93a1-5520737ab415",
                "ed95076a-947b-422d-b5ff-22ba229710a7",
                "a9f67aa0-ea5e-4c68-b9ae-e6880552402b",
                "33ab0a0e-ede7-4c44-9886-c7c78d18fc6d",
                "32136809-bfed-4aba-8298-aca865d7d79c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 330,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c1f3d869-4fcb-4b2a-a6f0-60567e4cace5",
          "title": "Maintainer",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "50fbbee1-606b-4704-a571-ff7610149154",
              "title": "Deputize",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Maintainer Deputize \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n  done()\n}, 3000)",
                  "err": {},
                  "uuid": "8741566a-c6d4-4eed-9e64-16752cc16321",
                  "parentUUID": "50fbbee1-606b-4704-a571-ff7610149154",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Maintainer Deputize Query Identity 1: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n          data.clasificationID1 = value.value.id.value.classificationID.value.idString\n          data.hashID1 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "79d86889-2e1f-4d60-bc3c-8d9c58a40837",
                  "parentUUID": "50fbbee1-606b-4704-a571-ff7610149154",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Maintainer Deputize Query Identity 2: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qIdentity)\n      var list = res.body.result.value.identities.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n          data.clasificationID2 = value.value.id.value.classificationID.value.idString\n          data.hashID2 = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "344b9c8b-4c19-40ba-abd3-507613965fcb",
                  "parentUUID": "50fbbee1-606b-4704-a571-ff7610149154",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Maintainer Deputize Query Asset: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n        .get(config.qAsset)\n      var list = res.body.result.value.assets.value.list\n      list.forEach(function (value) {\n        if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\") {\n          data.aclasificationID = value.value.id.value.classificationID.value.idString\n          data.ahashID = value.value.id.value.hashID.value.idString\n        }\n      });",
                  "err": {},
                  "uuid": "bf7d7f90-f500-453f-bb6e-2bbe30092752",
                  "parentUUID": "50fbbee1-606b-4704-a571-ff7610149154",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Maintainer Deputize: ",
                  "fullTitle": "Maintainer Deputize Maintainer Deputize: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n      let obj = {\n        \"type\": config.deputizeType,\n        \"value\": {\n          \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n          },\n          \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n          \"toID\": data.clasificationID2 + '|' + data.hashID2,\n          \"classificationID\": data.aclasificationID + '|' + data.ahashID,\n          \"maintainedTraits\": \"maintainerTraits:S|maintainerTraits\",\n          \"addMaintainer\": true,\n          \"removeMaintainer\": false,\n          \"mutateMaintainer\": false\n        }\n      }\n      var err, res = await chai.request(server)\n        .post(config.deputizePath)\n        .send(obj)\n      res.should.have.status(200);\n      res.body.should.be.a('object');\n      expect(res.body.txhash).to.not.equal(null)\n      expect(res.body.txhash).to.not.equal('')\n      txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b5980f3b-ca01-46bc-8772-c500253f6d9d",
                  "parentUUID": "50fbbee1-606b-4704-a571-ff7610149154",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Maintainer Deputize Query Tx: ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n  .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n  if ((data1.indexOf('error') != -1)) {\n    callbackretry('failed')\n  } else {\n    //continue\n  }\n}, function (err, response) {\n  if (err) {\n    console.log(\"err: \" + err)\n    console.log(\"response: \" + response)\n    console.log(\"failed to send txHash query\")\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  } else {\n    expect(res.body.raw_log).to.not.contain('failed')\n    expect(res.body).to.not.contain('error')\n  }\n})",
                  "err": {},
                  "uuid": "954616e3-51ae-4d8b-899f-50a315498cce",
                  "parentUUID": "50fbbee1-606b-4704-a571-ff7610149154",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79d86889-2e1f-4d60-bc3c-8d9c58a40837",
                "344b9c8b-4c19-40ba-abd3-507613965fcb",
                "bf7d7f90-f500-453f-bb6e-2bbe30092752",
                "b5980f3b-ca01-46bc-8772-c500253f6d9d",
                "954616e3-51ae-4d8b-899f-50a315498cce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}